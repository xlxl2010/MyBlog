<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Chrome 离线包查询]]></title>
      <url>/archives/chrome-binary-download.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>DEMO：<a href="https://chrome.nfz.moe" target="_blank" rel="external">chrome.nfz.moe</a></p>
</blockquote>
<a id="more"></a>
<p> 在 METO 的 <a href="https://i-meto.com/chrome-binary/" target="_blank" rel="external"> 这篇文章 </a> 的启发下，我也自己做了一套 Chrome 离线包下载页面，如下图所示：</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000185.png" alt="0000185.png"></p>
<p> 我也写了一个 bash 脚本用来自动查询 Chrome 离线包数据，并丢在 Travis CI 上运行：</p>
<p>GitHub Repo: <a href="https://github.com/neoFelhz/ChromeChecker" target="_blank" rel="external">ChromeChecker</a><br>Travis CI: <a href="https://travis-ci.org/neoFelhz/ChromeChecker" target="_blank" rel="external">Build Status</a></p>
<hr>
<p> 在本文的主要内容开始之前，我不得不放置一张和 Chrome 离线包查询无关的图片。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000186.png" alt="0000186.png"></p>
<p> 上面这张图片是 <a href="https://i-meto.com/chrome-binary/" target="_blank" rel="external">METO 的那篇文章 </a> 下面的评论，和这个人和我的邮件交流过程。</p>
<p> 为了防止再有伸手党过来烦人，而且我的脾气也非常差。所以，<strong> 本文拒绝提供任何技术细节 </strong>，任何相关问题的咨询一律一个问题 150RMB，十个问题以上八折，多不退少补。我的 Repo 都以 <code>Unlicense</code> 协议开源了，别来烦我了。</p>
<hr>
<p> 简单地说，Chrome 内部的更新检查机制是对 <code>https://tools.google.com</code> 发起一个 POST 请求，Form data 的格式为 </p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0' encoding='UTF-8'?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>request</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>3.0<span class="token punctuation">'</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1.3.23.9<span class="token punctuation">'</span></span> <span class="token attr-name">shell_version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1.3.21.103<span class="token punctuation">'</span></span> <span class="token attr-name">ismachine</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span>
         <span class="token attr-name">sessionid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{3597644B-2952-4F92-AE55-D315F45F80A5}<span class="token punctuation">'</span></span> <span class="token attr-name">installsource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ondemandcheckforupdate<span class="token punctuation">'</span></span>
         <span class="token attr-name">requestid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{CD7523AD-A40D-49F4-AEEF-8C114B804658}<span class="token punctuation">'</span></span> <span class="token attr-name">dedup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hw</span> <span class="token attr-name">sse</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">sse2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">sse3</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">ssse3</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">sse41</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">sse42</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">avx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">physmemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>12582912<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>os</span> <span class="token attr-name">platform</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>win<span class="token punctuation">'</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>6.3<span class="token punctuation">'</span></span> <span class="token attr-name">arch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{arch}}<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app</span> <span class="token attr-name">appid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{appid}}<span class="token punctuation">'</span></span> <span class="token attr-name">ap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{ap}}<span class="token punctuation">'</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span> <span class="token attr-name">nextversion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span> <span class="token attr-name">brand</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>GGLS<span class="token punctuation">'</span></span> <span class="token attr-name">client</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatecheck</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>request</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>METO 在他的文章中提供了一系列可以用的 <code>appid</code> <code>ap</code> 参数的值：</p>
<pre><code>{{appid}}
Stable: 8A69D345-D564-463C-AFF1-A69D9E530F96,
Beta: 8A69D345-D564-463C-AFF1-A69D9E530F96&quot;,
Dev: 8A69D345-D564-463C-AFF1-A69D9E530F96&quot;,
Canary: 4EA16AC7-FD5A-47C3-875B-DBF4A2008C20
</code></pre><pre><code>{{arch}}
x64, x86
</code></pre><pre><code>{{ap}}
Stable
    &quot;x86&quot;: &quot;-multi-chrome&quot;,
    &quot;x64&quot;: &quot;x64-stable-multi-chrome&quot;
Beta
    &quot;x86&quot;: &quot;1.1-beta&quot;,
    &quot;x64&quot;: &quot;x64-beta-multi-chrome&quot;
Dev
    &quot;x86&quot;: &quot;2.0-dev&quot;,
    &quot;x64&quot;: &quot;x64-dev-multi-chrome&quot;
Canary
    &quot;x86&quot;: &quot;&quot;,
    &quot;x64&quot;: &quot;x64-canary&quot;
</code></pre><p> 通过发起一个 POST 请求，带上 APPID 和 Key，就可以得到 Google 返回的 XML 的数据，格式化一下就像这样：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>response</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span> <span class="token attr-name">server</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>daystart</span> <span class="token attr-name">elapsed_days</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3967<span class="token punctuation">"</span></span> <span class="token attr-name">elapsed_seconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>83981<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app</span> <span class="token attr-name">appid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{8A69D345-D564-463C-AFF1-A69D9E530F96}<span class="token punctuation">"</span></span> <span class="token attr-name">cohort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1:gu/lur:<span class="token punctuation">"</span></span> <span class="token attr-name">cohortname</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>62_89_win<span class="token punctuation">"</span></span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatecheck</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>urls</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://redirector.gvt1.com/edgedl/release2/chrome/eyeaRM1a5ls_62.0.3202.89/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://redirector.gvt1.com/edgedl/release2/chrome/eyeaRM1a5ls_62.0.3202.89/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dl.google.com/release2/chrome/eyeaRM1a5ls_62.0.3202.89/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://dl.google.com/release2/chrome/eyeaRM1a5ls_62.0.3202.89/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.google.com/dl/release2/chrome/eyeaRM1a5ls_62.0.3202.89/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.google.com/dl/release2/chrome/eyeaRM1a5ls_62.0.3202.89/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>urls</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>62.0.3202.89<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>actions</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">arguments</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>--verbose-logging --do-not-launch-chrome<span class="token punctuation">"</span></span> <span class="token attr-name">event</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>install<span class="token punctuation">"</span></span> <span class="token attr-name">run</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>62.0.3202.89_chrome_installer.exe<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>62.0.3202.89<span class="token punctuation">"</span></span> <span class="token attr-name">event</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postinstall<span class="token punctuation">"</span></span> <span class="token attr-name">onsuccess</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exitsilentlyonlaunchcmd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>actions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packages</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">fp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.2e363460a769f36f691210de5293506bb545654a0a3967a5c3fbcb1d9c582343<span class="token punctuation">"</span></span> <span class="token attr-name">hash</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>62+NhjmNmmu/IItr6bxA2FE0FQY<span class="token punctuation">=</span><span class="token punctuation">"</span></span> <span class="token attr-name">hash_sha256</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2e363460a769f36f691210de5293506bb545654a0a3967a5c3fbcb1d9c582343<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>62.0.3202.89_chrome_installer.exe<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45365352<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packages</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatecheck</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>response</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 其中可以看到返回的数据中包括了 6 个可用的 URL、文件名、版本号、文件大小、SHA_256 和 HASH。自行拼凑 URL、正则提取有关数据，就可以很容易实现一个查询器了。<br> 我开源了的 ChromeChecker 写了几个简单粗暴的脚本，使用 <code>xmllint</code> <code>cat</code> <code>grep</code> <code>echo</code> <code>sed</code> 这几个指令简单粗暴地就完成了数据提取和合并。</p>
<p>Python 版可以看 <a href="https://github.com/unnamed5719/chrome-checker" target="_blank" rel="external">chrome-checker</a>。</p>
<hr>
<p> 另外开放一个 “API”，可以拿来造一些轮子。</p>
<ul>
<li> 请求地址：<code>https://neofelhz.github.io/ChromeChecker</code> （仅支持 HTTPS，HTTP 请求将会 301 强制跳转 HTTPS）</li>
<li> 请求方式：GET</li>
<li> 请求参数：<code>chrome.xml</code> <code>chrome.min.xml</code></li>
</ul>
<p> 请求 <code>https://neofelhz.github.io/ChromeChecker/chrome.xml</code> 会返回格式化了的 XML 结果，用于阅读；请求 <code>https://neofelhz.github.io/ChromeChecker/chrome.xml</code> 会返回压缩后的 XML 文件。定时查询这一部分丢在 Travis CI 上跑，每 24 小时会查询一次（反正对于 Chrome 离线包查询，不需要 5 分钟就查询一次）。XML 中包括整理好的查询的时间、版本号、下载 URL 和文件名、SHA_256 等数据。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中国的互联网]]></title>
      <url>/archives/network-in-china.html</url>
      <content type="html"><![CDATA[<p>外交部发言人华春莹称“中国的互联网是 <strong>自由、开放、有序</strong> 的”。尽管中国互联网相比世界其他地方的互联网也存在许多相似之处，但还有很大不同。</p>
<a id="more"></a>
<blockquote>
<p>本文中关于“中国”的论述仅适用于中国大陆地区、即 <code>Mainland China</code>；本文介绍的内容与香港、澳门和中华民国（中华人民共和国台湾省）无关。本文中若提到“中国”，一律仅指代中国大陆地区。</p>
</blockquote>
<p>中国和其它国家的互联网的不同，主要可以从这几个方面介绍：</p>
<h1 id="基础设施"><a href="# 基础设施" class="headerlink" title="基础设施"></a>基础设施 </h1><p> 与世界其它大多数地方网络不同，中国的路由是不开放的。中国的核心互联网接入在很大程度上是由两个互联网服务提供商提供：中国电信和中国联通。除此以外，中国的互联网服务提供商还有中国移动、鹏博士和长城宽带、教育网、科技网、华数、世纪互联、光环新网。大大小小运营商分治了中国的互联网。互联网服务提供商当中的巨头建设并控制了整个国家的互联网基础设施建设、IP 地址的分配和内部路由的管理。这些运营商使用自己的方式、自己的规定，独立管理和运营自己旗下的网络。就算是中国互联网巨头，也仅仅最多拥有自己的 IP 地址分配（如阿里云、腾讯云等）；在中国，使用 <code>IP Anycast</code> 几乎是不可能的——在中国，只有三个 IP 获得了 <code>IP Anycast</code> 的授权：<code>119.29.29.29</code> <code>223.5.5.5</code> <code>223.6.6.6</code>。它们分别是腾讯和阿里提供的公共 DNS 服务。</p>
<p>与此同时，在中国境内，各个互联网服务提供商之间也存在瓶颈；即使是同一个服务商，他们内部之间也存在瓶颈。例如，中国电信在中国很多省份建立了很多分公司来经营很多不同地区的网络，其中许多分公司都是独立运作的。这些网络之间的路由，互联网服务提供商本身，都因为太多的流量与太少的容量之间的矛盾变得拥堵。在中国，流量在不同地区之间就会遇到瓶颈、甚至流量在同一个地区里的不同运营商之间中转都会拥堵。<br>以中国几家公共 DNS 服务为例，阿里和腾讯在全国不同地区的各个运营商累计上百个节点均部署了 DNS 服务，借助 <code>IP Anycast</code> 服务中国所有地区的网民；南京信风科技在他们位于南京的机房接入了中国电信、中国联通、中国移动运营商的骨干网、以及其它 10 家运营商的线路，用来确保中国各个地区、各个运营商的网民都能以最快的速度请求 114 的 DNS（实际上，这意味着南京信风科技拥有中国最好、也是最昂贵的 BGP 多线机房）。</p>
<h1 id="费用成本"><a href="# 费用成本" class="headerlink" title="费用成本"></a>费用成本 </h1><p> 在这样畸形的基础设施建设的结果下为了获得合适的性能、降低延时，就只有两种选择：大量的分布在中国各地的数据中心、亦或者是一个拥有多线 BGP 的数据中心。<br>如果选择运营 BGP 多线机房，就需要同时和数十家运营商签署协议使用他们的带宽，意味着使原本高昂的成本继续翻倍。<br>如果选择使用大量数据中心构建 CDN，就需要在中国各地建设数据中心、有时还需要租借当地运营商的机房。在中国建设能够各地能快速访问的 CDN，至少需要 50 个数据中心；而如果要建设覆盖中国的 CDN，至少需要 100-200 个节点，成本可想而知。</p>
<p>中国互联网的技术挑战也抬高了做生意的成本。由于互联网服务供应商之间在当地的市场动态、带宽的成本，中国的宽带已然成为是世界上费用最昂贵的宽带之一。在中国，带宽的价格堪比黄金，能在海外购买到百兆 VPS 的费用在国内的云服务商不一定能购买到独享 1M 带宽的云主机。一些非中国本土的云计算供应商都表示，在中国提供高质量的服务并不像在北京建立一个单点定位那么简单。无论是大量的数据中心还是昂贵的 BGP 多线，都使得在中国境内提供服务非常昂贵。</p>
<h1 id="法律监管"><a href="# 法律监管" class="headerlink" title="法律监管"></a>法律监管 </h1><p> 和许多国家一样，中国法律禁止某些类型的内容在中国的互联网上传播。在中国，购买和使用服务器需要实名认证、域名用于服务也需要实名；任何一个想要在国内经营一个网站的组织或者个人都需要一个由中国工业和信息化部颁发的互联网内容提供商（ICP）许可证，为了获取 ICP 许可证需要网站确实存在、备案期间又禁止网站开放。为了避免违反中国法律、确定只存在中国可以用的内容、不存在中国不可以用的内容，在中国，云服务商也主动成为一个互联网审查者——推进云服务购买时的实名认证、机房设置备案阻断机制、云服务商在云主机的系统里内置监控进程、以及配合公安部开展“网站一键关停”。</p>
<p>在中国，以下内容均不允许在中国的互联网上进行传播。</p>
<ul>
<li>危害国家统一和领土完整的</li>
<li>煽动抗拒破坏宪法和法律实施</li>
<li>危害国家安全或者损害国家荣誉和利益的</li>
<li>破坏民族团结</li>
<li>扰乱社会秩序破坏社会稳定的</li>
<li>宣传淫秽赌博暴力或者教唆犯罪的、</li>
<li>危害社会公德或者民族优秀文化传统</li>
<li>以非法民间组织名义活动</li>
<li>含有法律、行政法规禁止的其他内容</li>
</ul>
<p>为了实现对上述内容的监管、维护中国互联网的稳定，中国的有关部门会对网络进行 24 小时不间断的监控、政府及网评员引导网上舆论、谴责与处罚海外公司、对社交媒体更加严格的控制、拘捕审问一些尝试突破网络限制的开发者。<br>一旦出现不适合在中国互联网上传播的内容、而中国政府无能为力的（如服务器在境外），就会采取一定的措施解决——</p>
<h1 id="封锁拦截"><a href="# 封锁拦截" class="headerlink" title="封锁拦截"></a>封锁拦截 </h1><p> 位于中国的网络审查技术在世界上具有独特性。中国互联网通过多手段、多途径、多层次、分布式的处理，阻止大多数网民接触到违反相关政策、涉及黄赌毒和其它各类敏感内容进入中国。</p>
<p>中国著名的防火长城，其作用主要是监控国际网关上的通讯，对认为不匹配中共官方要求的传输内容，进行干扰、阻断、屏蔽。目前常见的封锁措施包括 IP 或端口封锁、DNS 污染、连接重置、动态路由转发、干扰加密连接、关键字阻断、SSL 伪造和劫持、劣化服务等。在十九大前后，中国短暂关闭了位于广东的互联网国际出口、并对中国华北地区进行了骨干网阻断。<br>中国境内曾经部署了 F I J 三组根域名服务器，由于中国多次恶意在根域名服务器投毒、影响全球互联网，被断开与世界互联网的连接，后 F I J 更换至海外服务商、不再由中国提供服务。</p>
<p>在中国国内的省与省之间，也存在各自独立的信息审查。比如中国著名的网络文件存储和分享服务百度网盘在新疆地区遭到完全屏蔽，在新疆遭到屏蔽的还有在中国沿海地区早已经解封的网站如 GitHub、谷歌翻译、谷歌开发者等；在新疆使用虚拟专用网（VPN）的用户会被停止服务，并需到当地派出所登记以进行解锁；新疆在 2009 - 2010 年更是进行了为期将近一年的断网；又例如中国著名的天涯论坛的服务器位于海南省海口市，当有不利于其它地方的地方官员的信息出现在该论坛时，可能会要求海口市网警向论坛提出信息删除，甚至有为此而出现的网警之间的相互贿赂等。</p>
<p>除了不同地区的封锁，还有运营商自行进行的封锁和审查。以中国移动为例，其网络在中国防火长城的基础上，额外封锁“不良”网站累计超 60 万个，即在使用由中国移动提供的互联网接入服务时将会有更多的网站无法直接访问，但是在其它互联网服务提供商的网络下则能正常访问。<br>某种意义上，防火长城其实早已实现了分布式，改变了过去北京、天津、哈尔滨、上海、深圳部署多个集群的做法、转变为由运营商自行开展封锁，所以出现了中国网民口中常称的 “墙高 墙矮” “墙中墙”。</p>
]]></content>
      
        <categories>
            
            <category> 自言语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 互联网 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 运营商 </tag>
            
            <tag> 封锁 </tag>
            
            <tag> BGP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这是最好的时代 这是最坏的时代]]></title>
      <url>/archives/the-prosperous-china-as-you-wish.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>于是他只好保持着沉默，默默地与同样面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。——<a href="https://blog.nfz.moe/archives/the-silence-city.html">《寂静之城》</a></p>
</blockquote>
<p>——谨以此文献礼十九大。</p>
<a id="more"></a>
<hr>
<ul>
<li>豆瓣关于家庭暴力和自杀的讨论小组被迫雪藏</li>
<li>广电总局审查同性恋和性有关的视听媒体</li>
<li>在西安拥有三万粉丝以上的个人微博要备案</li>
<li>B 站番剧类视频被文化部要求进行内容审查</li>
<li>某 Hosts 维护人员被刑事拘留</li>
<li>淘宝被禁止出售日文游戏</li>
<li>公安在全国范围内开展 “网站一键关停” 演练</li>
<li>国内各大互联网企业开展党建工作</li>
<li>唐山收费站阿訇率穆斯林打人事件被封锁</li>
<li>AcFun 的视听服务被叫停</li>
<li>袁腾飞《铿锵三人行》被封禁</li>
<li>Pixiv 遭遇 DNS 污染</li>
<li><strong>. . . . . .</strong></li>
</ul>
<hr>
<p>墙最可怕的，并不是我们不再能够访问被封锁的网站，而是它能让几乎一整代的人不再愿意访问被封锁的网站。</p>
<blockquote>
<p>XX 被墙前的日子：还好这次 XX 没有被墙 / XX 怎么可能被墙 / 要是 XX 被墙了我就肉身翻墙了<br>XX 被墙时的几天：不要慌是 XX 服务器炸了 / 我这里能上一定是 XX 的问题 / 明明是 XX 主动屏蔽大陆 IP<br>XX 被墙后的一年：没事墙内已经有替代品了现在上起来很方便 / 你不会翻墙吗？ / 抱怨个 P 有本事你肉身翻墙啊</p>
</blockquote>
<p>本应是我们应有的权利，却变成了某些人幸免于难的“侥幸”。</p>
<p>我的同学告诉我，他在 App Store 购买过 <code>Surge</code>，但是他如今已经不愿意再费心了，因为他觉得“没有必要”。<br>实体的墙并不可怕，人心的墙才让人生畏。</p>
<p>GitHub 因为程序员的抗议，在 2015 年解封了；V2EX 备案后接受国内的规定，在 2015 年解封了。其它的网站呢？<br>魏则西因为被迫只能使用百度搜索而被莆田系医院害死。或许，还会有下一个？</p>
<hr>
<blockquote>
<p>不需要政府造墙，网民也会自发造墙。这尼玛连做个翻墙软件都要造墙，真是令人叹为观止。这是一个造了几千年墙的保守的农耕民族，缺乏对别人的基本尊重，不愿意分享，喜欢遮遮掩掩，喜欢小圈子抱团，大概这些传统是改不掉了吧。<br>—— <a href="https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168" target="_blank" rel="external">shadowsocks 作者 clowwindy 发表于 2015 年</a></p>
</blockquote>
<p>“深圳 SS 大规模精准识别” 的消息在算不上很久的之前震动了翻墙圈，虽然没有多久就被证实 <strong>不过是 SSR TG 群内的造谣 </strong>；BreakWa11 和 Madeye 互相编写探测工具 <code>sssniff</code> 的风波还没有停息之时，BreakWa11 便已然成为了网络暴力的目标。这场荒唐的闹剧最终以 SSR 删库收场。<br> 造谣传谣、相互攻击、网络暴力。这是一场暴民的盛宴。</p>
<p>你国翻墙圈根本不会死于 GFW。你国翻墙圈会死于内讧。</p>
<hr>
<p>在国内论坛和博客需要备案的规定、和今年七月《网络安全法》的基础上，网信办颁布的新法令，要求国内的评论、跟帖系统必须备案、实名使用，并加以严格监督。就在法令颁布之前，多说 和 网易云跟帖 先后停止了运营。<br>毕竟这是一个 <code>JavaScript</code> 和 <code>RIP</code> 都能触发 “微博反垃圾”、小熊维尼都能影射国家领导人的国度。因实名举报学校而险些被开除、因抱怨食堂饭菜难吃而被行政拘留，言论的口就像绝地求生的毒圈一样越缩越紧。</p>
<p>无理由、无厘头的审查已经理直气壮。人们随时都可能成为破坏社会和谐气氛的罪人。</p>
<hr>
<blockquote>
<p>中华立国数千年，礼义纲纪，云为得失，皆奉孔子之经，若一弃之，则人皆无主，是非不 止所定，进退不知所守，家无以为家，是大乱之道也。<br>「冒万死以保旧俗，存礼教而护国魂。」</p>
</blockquote>
<p>这是最好的时代，这是最坏的时代。<br>这盛世，如你所愿。</p>
]]></content>
      
        <categories>
            
            <category> 自言语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[云主机和 VPS 的区别]]></title>
      <url>/archives/compare-vps-ecs-vh.html</url>
      <content type="html"><![CDATA[<p>很多站长对于云主机、VPS、虚拟主机之间的区别都不知所以，很多解释这些概念的文章也经常出现各种错误，使得这些概念经常被混淆。所以我也写一篇阐述它们区别的文章。</p>
<a id="more"></a>
<h1 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h1><p>VPS(Virtual Private Server)，中文名称是虚拟专用服务器。详细的定义可以去看 <a href="https://zh.wikipedia.org/wiki/ 虚拟专用服务器" target="_blank" rel="external">维基百科 - VPS</a>。通俗点讲，就是在一台大型的独立服务器上，通过一定的技术（如虚拟化或者容器化）和一定的软件（VMWare、Xen、KVM、OpenVZ），将这台大型独立服务器的运存、处理器、硬盘进行划分成一个一个小的 VPS，每一台 VPS 都可以分配到独立公网 IP 地址、独立资源和独立系统配置，用户可以安装独立操作系统、单独对自己的 VPS 进行重启和关机。</p>
<h1 id="云主机"><a href="# 云主机" class="headerlink" title="云主机"></a>云主机 </h1><p> 云主机我见过的常见的两个英文缩写是 CVM(Cloud Virtual Machine 腾讯云使用这个名词) 和 ECS(Elastic Compute Service 阿里云和华为云使用这个名词)。<br>理解云主机的概念，就必须抛开一台独立的大型服务器的概念，而要明白一个概念——算池。<br>以阿里云为例。阿里云在国内很多地区都建设了数据中心，在数据中心中所有服务器都是内网互通的。在数据中心里有专门负责存储的机器，配备有大型 HDD 和 SSD 组成 RAID 存储阵列，这些机器组成存储池；有专门负责运算的机器，根据不同的需求有不同的配置（如多核 CPU、强劲的 GPU 和大运存），这些机器组成运算池；有专门进行网络分配和调度的交换机，组成了虚拟网关。</p>
<blockquote>
<p>当然，这些算池还会往下细分、以便在不同业务的不同需求中完成调度。</p>
</blockquote>
<h1 id="区别"><a href="# 区别" class="headerlink" title="区别"></a>区别 </h1><h2 id="可用性"><a href="# 可用性" class="headerlink" title="可用性"></a> 可用性 </h2><p> 从可用性来讲，VPS 的可用性是要低于云主机的。VPS 的宿主机一旦出现软硬件故障，就会影响到上面的虚拟出来的 VPS。而在云计算池中，如果算池中的某个部分甚至一个物理单位出现故障而离线，大部分情况下都可以由算池中其它部分接替工作，所以云计算一般不会出现整个服务出现大规模故障的情况。</p>
<h2 id="灵活性"><a href="# 灵活性" class="headerlink" title="灵活性"></a>灵活性 </h2><p> 以升级你的主机配置为例。VPS 升级配置需要先关闭你的 VPS，然后分配更多的 CPU、运存和硬盘给你的 VPS；虽然 VPS 的宿主机可能有足够强劲的配置，但是一旦你的需求在你目前的宿主机上无法得到满足，你就有可能需要让主机商将你的数据转移到另一台宿主机上重新分配资源虚拟出一个 VPS。而对于云主机，升级配置只需要从算池中分配给你更多的资源即可，非常灵活。</p>
<blockquote>
<p>这些就是阿里云、腾讯云、美团云这类云计算创立的初衷——把平时业务较少时从算池中将闲置的算力拿出来卖钱。所以会有这么一句很有意思的话——“双十一期间，你的阿里云主机隔壁就有可能是淘宝的后端服务。”</p>
</blockquote>
<h2 id="性能"><a href="# 性能" class="headerlink" title="性能"></a>性能 </h2><p> 通常情况下，云主机的性能会比 VPS 差很多，在 IO 性能表现的尤为明显。整个算池分工明确，所有算力都通过内网传输，内网的传输速度是远远不如单一硬件设备之间传输的。举例说明，阿里云的 IO 性能平均为 120M/s，而较好性能的宿主机上的 VPS 的 IO 性能可以达到 1G/s 。</p>
<hr>
<blockquote>
<p>实际上对于一般情况，云主机和 VPS 的性能的区别是感觉不明显的；VPS 的可用性和 SLA 也不会逊于云主机。在实际的使用体验和操作中也并不能感受到云主机和 VPS 之间的区别；具体如何选择还是要根据自己的业务需要和预算。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 云主机 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何写好一个开源项目的 README]]></title>
      <url>/archives/how-to-write-beautiful-github-readme.html</url>
      <content type="html"><![CDATA[<p>README 是一个项目的门面。如果你想让更多人使用你的项目或者给你的贡献 PR、丢 star，你就应该写一个吸引人的 README。</p>
<a id="more"></a>
<h1 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h1><p>无论如何，项目有一个 logo 是一个加分项。一个生动活泼的 logo 能吸引很多人的注意。如果没有 logo，那么就学习 Material 主题、把一张漂亮的预览图丢在 README 开头吧~</p>
<blockquote>
<p>就像这样 ↓↓</p>
</blockquote>
<p align="center"><br><img src="https://bbs-static.nfz.yecdn.com/i/0000180.png" alt="Material Render Phone" width="80%"><br></p>

<p>logo 当然需要居中放置，所以我们不能使用 markdown 语法来添加图片，而应该使用 html。正确做法就像这样：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2017/09/07/59b1367f76fdb.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Material Render Phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="项目名称"><a href="# 项目名称" class="headerlink" title="项目名称"></a>项目名称 </h1><p> 同样的，如果想要突出项目的名称，应该同样让其居中。带上 <code>&lt;a&gt;</code> 标签链接到项目的官网（如果有的话）那也是极好的。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://material.viosey.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Material Theme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="Slogan"><a href="#Slogan" class="headerlink" title="Slogan"></a>Slogan</h1><p>然后是 slogan。slogan 要么耍帅要么优雅。我列举几个项目的 slogan 吧~</p>
<blockquote>
<ul>
<li>Nature, Source | 原之质，物之渊 —— <a href="https://github.com/viosey/hexo-theme-material/tree/2.x-develop" target="_blank" rel="external">hexo-theme-material</a></li>
<li>🍭Wow, such a powerful music API framework —— <a href="https://github.com/metowolf/Meting" target="_blank" rel="external">Meting</a></li>
<li>A magical documentation site generator. —— <a href="https://github.com/QingWei-Li/docsify" target="_blank" rel="external">docsify</a></li>
</ul>
</blockquote>
<p>需要注意的是，你的项目 README 中的 Logo 和名称应该要能够完整地出现在手机版 GitHub 页面内。当然，如果 slogan 也在那就更好了。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000181.png" alt="0000181.png"></p>
<h1 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h1><p>README 里面一定不能缺少 Badge。Badge 可以形象的把大部分项目的信息、比如版本号、依赖、构建状态等等展示出来。<br>比如说，hexo-theme-material 添加了这几个 badge：</p>
<ul>
<li>Version</li>
<li>Author</li>
<li>Hexo Version</li>
<li>NodeJS Version</li>
<li>Travis Build Status</li>
<li>Download</li>
</ul>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000182.png" alt=""></p>
<p>这里当然要推荐 <a href="https://shields.io" target="_blank" rel="external">Shields.io</a>，绝大部分常见的 GitHub Badge 都是用这个网站生成的。</p>
<h1 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a>介绍 </h1><p> 接下来就应该是对项目的介绍了。README 需要解答下面这些问题：</p>
<ul>
<li>这个开源项目是做什么的</li>
<li>项目维护、CI、依赖更新状态</li>
<li>项目可用版本及其他版本、并且应该如何下载它们</li>
<li>Demo 或官网地址（如果有）</li>
<li>License</li>
</ul>
<p>这就是对项目的简单介绍。当然，除了需要上述信息能对用户对你的项目有一个简单的印象，你还需要在 README 中写一些关于项目的介绍。</p>
<ul>
<li>如何下载这个项目</li>
<li>项目依赖</li>
<li>安装方式</li>
<li>部署方法（如果项目可以被部署的话）</li>
<li>Debug 方法</li>
<li>文档</li>
</ul>
<p>由于 Material 是 Hexo 的一个主题，所以我们在 README 中只介绍了下载方式，然后我们提供了一个链接通往我们的文档。</p>
<hr>
<p>基本这就是一个 README 需要包括的内容了。当然，书写项目 README 时候还需要遵守排版规范。这里是 <a href="https://neko-dev.github.io/GUIDELINE/#/others/copywriter" target="_blank" rel="external">Neko-Dev 的文案风格 GUIDELINE</a></p>
]]></content>
      
        <categories>
            
            <category> 分享镜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> README </tag>
            
            <tag> Coding </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 性能优化（6）——WebFont 字体优化]]></title>
      <url>/archives/wpo-web-font-performance.html</url>
      <content type="html"><![CDATA[<p>WebFont 的加载是一个令人头疼的事情。除了跨域问题、还有 FOIT、FOUT 等等。为了提供更好的用户体验，我寻找了一些高效加载 WebFont 的简单解决方法，并对它们分别进行测试。</p>
<a id="more"></a>
<h1 id="解决方案"><a href="# 解决方案" class="headerlink" title="解决方案"></a>解决方案 </h1><p> 常见的加速字体的方案有：</p>
<ul>
<li>将字体部署在 CDN 并开启跨域头</li>
<li>使用第三方字体库加载字体</li>
<li>将字体以 base64 形式保存在 css 中并缓存下来</li>
<li>将字体以 base64 形式保存在 css 中并通过 localstorage 中进行缓存</li>
</ul>
<blockquote>
<p>参考阅读：</p>
<ul>
<li><a href="https://blog.nfz.moe/archives/wpo-data-uri-performance.html">《Web 性能优化（3）——探讨 data URI 的性能》</a></li>
<li><a href="https://blog.nfz.moe/archives/wpo-localstorage-css-js.html">《Web 性能优化（4）——localstorage 存储静态文件的意义》</a> </li>
</ul>
</blockquote>
<h1 id="测试"><a href="# 测试" class="headerlink" title="测试"></a>测试 </h1><p> 我写了四个测试页面，分别用来测试上述四种方案的字体加载性能。</p>
<ul>
<li>测试字体：Roboto 的三个字重（300、400、500）</li>
<li>测试环境：完整 HTTP2</li>
<li>测试工具：<a href="https://gtmetrix.com" target="_blank" rel="external">GTmetrix</a></li>
</ul>
<h2 id="将字体部署在 -CDN- 上"><a href="# 将字体部署在 -CDN- 上" class="headerlink" title="将字体部署在 CDN 上"></a>将字体部署在 CDN 上 </h2><p><a href="https://lab.nfz.moe/fonts-performance/default.html" target="_blank" rel="external"> 测试页面</a></p>
<p>在这个页面中，我从 inline 在页面中的 <code>style</code> 标签通过 <code>@font-face</code> 引用了来自 <code>css.net</code> 的公共 CDN 库中的 Roboto 字体。</p>
<h3 id="正常网络环境"><a href="# 正常网络环境" class="headerlink" title="正常网络环境"></a>正常网络环境</h3><p><img src="https://bbs-static.nfz.yecdn.com/i/0000170.png" alt="0000170.png"></p>
<p>可以看到，只有在 DOMLoaded 触发以后，WebFont 才开始予以加载。WebFont 的优先级在加载中并不高。</p>
<p><a href="https://gtmetrix.com/reports/lab.nfz.moe/Ap69eYgs" target="_blank" rel="external">详细的测试报告</a></p>
<p>在测试报告中提供的视频里也可以清楚地看到，当页面整体框架出来以后，文字内容才被“一点点填充”进页面中</p>
<h3 id="极限网络环境"><a href="# 极限网络环境" class="headerlink" title="极限网络环境"></a>极限网络环境</h3><p><img src="https://bbs-static.nfz.yecdn.com/i/0000171.png" alt="0000171.png"></p>
<p>在 <code>Slow 3G</code> 的极端模式下，如果整个页面全部使用外源字体，那么就会严重影响主要内容的展现。</p>
<p><a href="https://gtmetrix.com/reports/lab.nfz.moe/geEKorku" target="_blank" rel="external">详细的测试报告</a></p>
<h2 id="使用 -Google-Font- 加载字体"><a href="# 使用 -Google-Font- 加载字体" class="headerlink" title="使用 Google Font 加载字体"></a>使用 Google Font 加载字体 </h2><p><a href="https://lab.nfz.moe/fonts-performance/google-font.html" target="_blank" rel="external"> 测试页面</a></p>
<p>在这个页面中，我用 <code>https://fonts.googleapis.com/css?family=Roboto:300,400,500</code> 加载 Roboto 字体。</p>
<h3 id="正常网络环境 -1"><a href="# 正常网络环境 -1" class="headerlink" title="正常网络环境"></a>正常网络环境</h3><p><img src="https://bbs-static.nfz.yecdn.com/i/0000173.png" alt="0000173.png"></p>
<p>可能是 Google 字体库的 Buff，GTmetrix 的测试中加载的字体非常快。但是加载字体 css 还需要新建立一个 TCP 连接，所以略微延迟了 DOMLoaded 触发。</p>
<p><a href="https://gtmetrix.com/reports/lab.nfz.moe/QI8daVFy" target="_blank" rel="external">详细的测试报告</a></p>
<h3 id="极限网络环境 -1"><a href="# 极限网络环境 -1" class="headerlink" title="极限网络环境"></a>极限网络环境</h3><p><img src="https://bbs-static.nfz.yecdn.com/i/0000174.png" alt="0000174.png"></p>
<p>在 <code>Slow 3G</code> 的极端模式下，Google 字体库不得不额外建立一个 TCP 连接的劣势被放大。</p>
<p><a href="https://gtmetrix.com/reports/lab.nfz.moe/FS9lebB8" target="_blank" rel="external">详细的测试报告</a></p>
<h2 id="将 -base64- 字体 -inline- 在 -HTML"><a href="# 将 -base64- 字体 -inline- 在 -HTML" class="headerlink" title="将 base64 字体 inline 在 HTML"></a>将 base64 字体 inline 在 HTML</h2><p><a href="https://lab.nfz.moe/fonts-performance/base64.html" target="_blank" rel="external">测试页面</a></p>
<blockquote>
<p>将字体转变为 base64 使用了 <a href="https://amio.github.io/embedded-google-fonts/" target="_blank" rel="external">embedded-google-fonts</a> 项目，下同。</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000175.png" alt="0000175.png"></p>
<p>无需新增任何额外请求使这个页面的加载性能表现的很优秀，但是这无疑增大了 HTML 的体积，把字体这种不常更新的资源提升到了和 HTML 这种经常改变的资源同等的缓存地位，于性能是大大不利的。<br>而且，将将这么大的字体进行 base64 加码，可能会严重影响页面的渲染性能，因为解码 base64 也要消耗时间。</p>
<p><a href="https://gtmetrix.com/reports/lab.nfz.moe/cKJhnLnQ" target="_blank" rel="external">详细的测试报告</a></p>
<h2 id="将 -base64- 字体 -inline- 在 -css"><a href="# 将 -base64- 字体 -inline- 在 -css" class="headerlink" title="将 base64 字体 inline 在 css"></a>将 base64 字体 inline 在 css</h2><p><a href="https://lab.nfz.moe/fonts-performance/base64-css.html" target="_blank" rel="external">测试页面</a></p>
<p>虽然很多人并不赞同将字体 base64 化后储存在 css 中，包括了 css 和字体的缓存等级的不同、影响 css 文件的加载从而影响渲染等等；但是 css 本身具有可以缓存的特点，而且使用 css 内建 base64 字体可以避免 FOIT。</p>
<blockquote>
<ul>
<li>Chrome 和 Firefox 的部分版本最多只能显示 3 秒钟内显示的文字。如果网络字体在这三秒内到达，文本从不可见切换到您的自定义字体。如果字体在 3 秒后仍未到达，则文本使用系统默认字体。这是 <code>FOIT</code>。</li>
<li>IE 会立即显示系统备用字体，然后在自定义字体到达时将进行替换。这是 <code>FOUT</code>。现在部分版本的 Chrome 也使用了这种方案。</li>
<li>Safari 会不显示字，直到字体到达。如果字体从未到达，它也没有备用字体。这是 <code>FOIT</code>，用户可能永远无法看到您网页上的任何文字。</li>
</ul>
</blockquote>
<p><a href="https://gtmetrix.com/reports/lab.nfz.moe/0yCct7SN" target="_blank" rel="external">详细的测试报告</a></p>
<h2 id="将 -base64- 字体存储在 -localstorage- 中"><a href="# 将 -base64- 字体存储在 -localstorage- 中" class="headerlink" title="将 base64 字体存储在 localstorage 中"></a>将 base64 字体存储在 localstorage 中 </h2><p><a href="https://lab.nfz.moe/fonts-performance/base64-lsloader.html" target="_blank" rel="external"> 测试页面</a></p>
<blockquote>
<p>这个页面使用了 Material 主题中专门开发的轮子 <code>lsloader</code></p>
</blockquote>
<p>无论文件是否可以缓存，总有特殊环境和辣鸡浏览器不能很好的缓存文件。这个时候将字体 base64 以后直接储存在 localstorage 中可以实现强缓存的效果。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000176.png" alt="0000176.png"></p>
<p>当二次加载以后，页面的主要拖延成为了从本地的 localstorage 中取出巨大体积的 base64 字体并将其解码、渲染。但是这一切操作均在本地完成，本身不需要发起网络请求，在移动端这种恶劣的网络环境下这不失为一种最佳选择。</p>
<h1 id="最佳实践"><a href="# 最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ul>
<li>尽量避免 Google 字体库，因为这不得不需要专门下载一个 <code>@font-face</code> 的 css 片段才能加载字体。直接内置在 css 片段中是一个不错的选择。</li>
<li>使用 base64 字体主要是为了避免跨域和 FOIT。如果只考虑现代浏览器，使用 <code>woff</code> 或者 <code>woff2</code> 这种内建压缩的现代的 WebFont 格式搭配 <code>Preload</code> 提升字体加载优先级别可能更适合常规选择。</li>
<li>最好的选择是不加载字体，尽量使用访客设备上默认的字体用于页面。毕竟各种系统默认的内置字体在对应系统上有最好的显示效果。</li>
<li>如果需要使用 base64 字体（比如外源的图标字体），建议对字体本身进行精简，然后 base64 转码后储存在 localstorage 中，可以有效改善缓存的效果、显著提升二次加载的性能。</li>
</ul>
<p>在 Material 主题 2.0.0 重构的计划中，我们决定采用 <a href="https://ant.design" target="_blank" rel="external">ANT.Design</a> 的字体设定（稍作改造）以获得最好的显示效果和加载性能。选择 <code>woff</code> 或者 <code>woff2</code> 格式的 Material Icon 内联在 css 当中，并使用 Material 主题中已经成熟的 <code>lsloader</code> 储存字体 css，获得最好的性能。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端优化 </tag>
            
            <tag> base64 </tag>
            
            <tag> localstorage </tag>
            
            <tag> 字体 </tag>
            
            <tag> WebFont </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小米降噪耳机评测]]></title>
      <url>/archives/xiaomi-anc-earphone.html</url>
      <content type="html"><![CDATA[<script src="https://cdnjs.cat.net/ajax/libs/aplayer/1.6.0/APlayer.min.js"></script>
<script src="https://api.i-meto.com/music/aplayer.min.js"></script>

<p>在同学的安利之下，我剁手了一副小米降噪耳机 Type-C 版。</p>
<a id="more"></a>
<h1 id="开箱图"><a href="# 开箱图" class="headerlink" title="开箱图"></a>开箱图</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000164.jpg" alt="0000164.jpg"></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000165.jpg" alt="0000165.jpg"></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000166.jpg" alt="0000166.jpg"></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000167.jpg" alt="0000167.jpg"></p>
<p>包装盒左下角的金标很醒目，实际上也就是玄学加成而已。。<br>包装盒里的配件包括：</p>
<ul>
<li>耳机本身</li>
<li>3 对硅胶套</li>
<li>2 对空气耳套</li>
<li>1 个布制随身袋</li>
</ul>
<p>小米耳机上部使用塑胶线，下部使用编织线。总的来说，小米降噪耳机整体做工可以的。我买的是黑色款，做工还算细致，整体上来讲并不简陋。由于使用 Type-C 供电，也就免去了常见主动降噪耳机中颇影响美观的电池盒。</p>
<h1 id="参数"><a href="# 参数" class="headerlink" title="参数"></a>参数</h1><table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">耳机类型</td>
<td style="text-align:center">入耳式</td>
</tr>
<tr>
<td style="text-align:center">喇叭阻抗</td>
<td style="text-align:center">32Ω</td>
</tr>
<tr>
<td style="text-align:center">产品净重</td>
<td style="text-align:center">20g</td>
</tr>
<tr>
<td style="text-align:center">连接线长</td>
<td style="text-align:center">1.25m</td>
</tr>
<tr>
<td style="text-align:center">插头类型</td>
<td style="text-align:center">USB Type - C</td>
</tr>
<tr>
<td style="text-align:center">额定功率</td>
<td style="text-align:center">5mW</td>
</tr>
<tr>
<td style="text-align:center">执行标准</td>
<td style="text-align:center">Q / WMSX 004 - 2016</td>
</tr>
<tr>
<td style="text-align:center">频响范围</td>
<td style="text-align:center">20 - 40000Hz</td>
</tr>
<tr>
<td style="text-align:center">耳机灵敏度</td>
<td style="text-align:center">113dB</td>
</tr>
<tr>
<td style="text-align:center">尺寸</td>
<td style="text-align:center">77 * 120 * 30mm</td>
</tr>
</tbody>
</table>
<h1 id="体验"><a href="# 体验" class="headerlink" title="体验"></a>体验 </h1><h2 id="使用体验"><a href="# 使用体验" class="headerlink" title="使用体验"></a> 使用体验 </h2><p> 我主要拿小米降噪耳机搭配我的 一加三 使用。目前系统是 Mokee Unofficial。<br>开启主动降噪后耗电并没有明显增加，属于正常水平。<br>线控的音量加减和播放暂停都可以正常使用；使用网易云音乐时不能使用按两次下一曲、按三次上一曲，但是可以用长按音量键切歌。<br>在一加三上，小米降噪耳机无法在通话中使用。来电话无法用线控接听和挂断、通话中耳机没有声音、对方也听不到任何声音。</p>
<h2 id="降噪效果"><a href="# 降噪效果" class="headerlink" title="降噪效果"></a>降噪效果 </h2><p> 开启线控上的开关之后 主动降噪发挥一定作用，加上入耳式耳塞和空气气囊，晚自习时班上的喧闹声基本都被削弱了：能明显感觉到背景声音变小甚至消失，但耳压感觉正常、不是把耳朵捂住的那种感觉，但是说话声和其它比较尖锐的声音的降噪效果不明显。<br>个人认为，小米降噪耳机的降噪能力还算是过关的，至少声音是相对纯净的、也不需要在公共场合时刻意提高耳机的音量了。</p>
<h2 id="音质音色"><a href="# 音质音色" class="headerlink" title="音质音色"></a>音质音色 </h2><p> 音质的话，高 / 中频可以接受；高音偏弱但明显，低频推力不是太够；音色上小米降噪耳机偏清亮、有些粗糙，而一加银耳相对偏浑厚和圆润，可能是我没有煲过小米降噪耳机的缘故。</p>
<h1 id="测试曲目"><a href="# 测试曲目" class="headerlink" title="测试曲目"></a>测试曲目 </h1><p> 光说感觉无益，直接上测试曲目。</p>
<h3 id="纯音乐测试"><a href="# 纯音乐测试" class="headerlink" title="纯音乐测试"></a>纯音乐测试</h3><h4 id="You"><a href="#You" class="headerlink" title="You"></a>You</h4><div class="aplayer" data-title="You" data-author="Approaching Nirvana" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk670i372oj30hs0hsq56.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/You.mp3" data-autoplay="false"></div>

<p>在《You》上，小米降噪耳机的解析度并不差，但是节拍和鼓点的效果不如一加银耳。一加银耳对《You》的表现平平常常，小米降噪耳机的清亮的音色发挥得不错。</p>
<h4 id="Relentless-WhiteRose-RWBY-doujin-remix"><a href="#Relentless-WhiteRose-RWBY-doujin-remix" class="headerlink" title="Relentless-WhiteRose [RWBY doujin remix]"></a>Relentless-WhiteRose [RWBY doujin remix]</h4><div class="aplayer" data-title="Relentless【WhiteRose】[RWBY doujin remix]" data-author="Cre-sc3NT" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk671v3nj8j30qw0qw0x4.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/Relentless.mp3" data-autoplay="false"></div>

<p>在《Relentless-WhiteRose》中小米降噪耳机的高音段的缺陷变得明显一些，而一加银耳的表现还是一贯地出色，Nubia 的圈铁表现显然更好，声音让人听得舒服。</p>
<h4 id="Leevis"><a href="#Leevis" class="headerlink" title="Leevis"></a>Leevis</h4><div class="aplayer" data-title="Leevis" data-author="TomLeevis" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk67v32kjvj30dw0dwjsp.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/Leevis.mp3" data-autoplay="false"></div>

<p>小米降噪耳机在《Leevis》上的表现得偏尖锐、鼓点表现不够有力，但是解析力还是足够的。Nubia 圈铁耳机音色偏厚重，解析度不错，也不会显得刺耳。</p>
<h3 id="人声测试"><a href="# 人声测试" class="headerlink" title="人声测试"></a>人声测试 </h3><h4 id="记忆回收"><a href="# 记忆回收" class="headerlink" title="记忆回收"></a> 记忆回收</h4><div class="aplayer" data-title="记忆回收" data-author="动点 / 乐正绫" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk67o950yvj30nb0nbgn0.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/%E8%AE%B0%E5%BF%86%E5%9B%9E%E6%94%B6.mp3" data-autoplay="false"></div>

<p>可以明显听出，小米降噪耳机明显和一加银耳的音色上有明显的区别，一加银耳的声音更真实和圆润，对于阿绫的声音还原较为真实。小米耳机表现偏飘，而 Nubia 圈铁在人声的表现很不赖。几种耳机各有千秋。</p>
<h4 id="残月雪"><a href="# 残月雪" class="headerlink" title="残月雪"></a>残月雪</h4><div class="aplayer" data-title="残月雪" data-author="乐正绫 / 砖厂浪人" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk67puddzbj30ni0niwqx.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/%E6%AE%8B%E6%9C%88%E9%9B%AA.mp3" data-autoplay="false"></div>

<p>《残月雪》中阿绫的高音部分中，一加银耳显然相对失真少（但是一加银耳高音性能还是比不上 Nubia 红魔）、声音也偏浑厚一些，但是高音有些失真；小米降噪耳机会颇清亮一些，高音发挥不错。</p>
<h4 id="八重回归·伪"><a href="# 八重回归·伪" class="headerlink" title="八重回归·伪"></a>八重回归·伪</h4><div class="aplayer" data-title="八重回归·伪" data-author="DELA / 乐正绫 / 洛天依 / 雨狸" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk67rcob4lj30jg0jfdje.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/%E5%85%AB%E9%87%8D%E5%9B%9E%E5%BD%92.mp3" data-autoplay="false"></div>

<p>在《八重回归》上，小米降噪耳机和一加银耳的表现效果各有千秋。小米降噪耳机声音显得更通透一些；Nubia 圈铁的还原效果更好、更清晰，相比之下小米降噪耳机显得偏飘。</p>
<h4 id="将死"><a href="# 将死" class="headerlink" title="将死"></a>将死</h4><div class="aplayer" data-title="将死" data-author="唯 love 燕子 / 言和" data-pic="https://ww2.sinaimg.cn/large/0060lm7Tly1fk67th5byxj30hs0hsn67.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/%E5%B0%86%E6%AD%BB.mp3" data-autoplay="false"></div>

<p>小米降噪耳机的低频段有些推力不足，在《将死》上显得有些飘，一加银耳的浑厚圆润的音色在低音段发挥优秀。而 Nubia 圈铁耳机表现优秀，解析度和低音表现出色。</p>
<hr>
<p>总的来说，小米降噪耳机表现平平，在低音表现不足，但在高音段和人声表现还是说得过去的。可能小米对降噪耳机在 <em>流行、人声 </em> 这一块做了一定打磨，但是音质上普遍不如一加银耳，在听觉感受上也不如 Nubia 圈铁有优势。但是听耳机也是耳机听你的过程。适应以后，小米降噪耳机也不是不能接受。<br> 个人觉得小米降噪耳机，价格能接受，音质尚可，做工不错。如果只是希望在通勤或者旅行中听听歌舒缓心情、或者主要用于削弱外界的骚扰（比如晚自习时的喧闹），那么小米降噪耳机还是可以成为一种选择。如果你对音质有更高的要求、或者不满意小米降噪耳机的音色，那么你完全可以去选择其它耳机。</p>
<blockquote>
<p>以上评测完全基于个人，不保证完全公正、客观。玄学的东西，八千以下都是听个响嘛。。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 分享镜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 耳机 </tag>
            
            <tag> 评测 </tag>
            
            <tag> 小米降噪耳机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[本博客对 sw-toolbox 的实践]]></title>
      <url>/archives/sw-toolbox-practice.html</url>
      <content type="html"><![CDATA[<p>Service Worker 可能是前端的一场革命。Service Worker 开放了众多 API，是 PWA 的基石。同时，Service Worker 开放的操作 Cache Storage 的 API 更是给了一个极其方便的控制浏览器缓存的工具。</p>
<a id="more"></a>
<h1 id="What-amp-why-sw-toolbox"><a href="#What-amp-why-sw-toolbox" class="headerlink" title="What &amp; why sw-toolbox"></a>What &amp; why sw-toolbox</h1><p>我曾经在 《<a href="https://blog.nfz.moe/archives/wpo-by-service-worker.html">Web 性能优化（1）——浅尝 Service Worker</a>》一文当中介绍了 Service Worker 的离线加载特性，并且给了一份使用 Service Worker 原生 API 的样例代码。那份代码实现了基于白名单一个拦截所有请求并存储进 Cache Storage。<br>这份样例代码有很多缺陷：比如说不能针对路径、文件类型控制资源缓存，仅支持通过版本号管理全部缓存，对于频繁更新的内容不能起到很好的缓存效果等等。<br>针对动态缓存的需求，Google 推出了 <a href="https://googlechrome.github.io/sw-toolbox/" target="_blank" rel="external">sw-toolbox</a>。<br>Google 的 sw-toolbox 提供了一套专门为动态缓存使用的通用策略。它使用了一套类似 Express.js 路由的语法专门用于编写缓存策略。<br>对于加载，sw-toolbox 提供了以下选项：</p>
<ul>
<li>networkFirst（网络加载优先，无法返回正确状态码后 fallback 到缓存）</li>
<li>cacheFirst（优先从缓存加载，cacheTank 中没有再发起网络请求）</li>
<li>networkOnly（每次加载都在线加载资源）</li>
<li>cacheOnly（仅使用缓存，或者不加载。可以搭配 precache 使用）</li>
<li>fastest（同时发起网络请求和读取缓存，谁快就用谁。一般缓存都先于网络请求）</li>
</ul>
<p>除了对于资源的加载来源提供了上述选项，sw-toolbox 还提供了可以便利的在 Cache Storage 中添加或删除缓存、控制缓存数量和有效期的 API；提供了一套可以快速利用 Service Worker 发起请求的 API；等等。</p>
<h1 id="How-to-use-sw-toolbox"><a href="#How-to-use-sw-toolbox" class="headerlink" title="How to use sw-toolbox"></a>How to use sw-toolbox</h1><p>简单介绍了一下 sw-toolbox 以后，我介绍一下本博客对 sw-toolbox 的实践。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> cacheVersion <span class="token operator">=</span> <span class="token string">"-170816"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> staticImageCacheName <span class="token operator">=</span> <span class="token string">"image"</span> <span class="token operator">+</span> cacheVersion<span class="token punctuation">;</span>
<span class="token keyword">var</span> staticAssetsCacheName <span class="token operator">=</span> <span class="token string">"assets"</span> <span class="token operator">+</span> cacheVersion<span class="token punctuation">;</span>
<span class="token keyword">var</span> contentCacheName <span class="token operator">=</span> <span class="token string">"content"</span> <span class="token operator">+</span> cacheVersion<span class="token punctuation">;</span>
<span class="token keyword">var</span> vendorCacheName <span class="token operator">=</span> <span class="token string">"vendor"</span> <span class="token operator">+</span> cacheVersion<span class="token punctuation">;</span> <span class="token keyword">var</span> maxEntries <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先是定义一些 Cache Storage 名称的有关变量。首先是 Cache Version，强制刷新缓存时会用的到。我将要缓存的内容分别分类为 图片 (image)，静态资源(assets)，网页内容(content) 和其它(vendor)。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">self<span class="token punctuation">.</span><span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">"https://cdnjs.cat.net/ajax/libs/sw-toolbox/3.6.1/sw-toolbox.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>options<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>options<span class="token punctuation">.</span>networkTimeoutSeconds <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>从 css.net 的公共 CDN 库载入 sw-toolbox.js、关闭 sw-toolbox 的 debug 模式、将加载方式从 Network 超时 fallback 到 Cache 的时长设置为 3s。</p>
<hr>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* staticImageCache */</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/img/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/blog\.nfz\.yecdn\.com/</span><span class="token punctuation">,</span> 
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> staticImageCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/p0\.ssl\.qhmsg\.com/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> staticImageCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/i\.nfz\.yecdn\.com/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> staticImageCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/i\.loli\.net/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> staticImageCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于可以缓存的图片部分，全部采用 cacheFirst 的原则，节省用户流量，提升页面二次加载速度。我总共匹配了所有可能遇到的图片的域名，包括 <code>s.nfz.yecdn.com</code> <code>img1.nfz.yecdn.com</code> <code>img2.nfz.yecdn.com</code> <code>i.loli.net</code> 等等。</p>
<hr>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* StaticAssetsCache */</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/css/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>origin<span class="token punctuation">:</span> <span class="token regex">/blog\.nfz\.yecdn\.com/</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/js/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>origin<span class="token punctuation">:</span> <span class="token regex">/blog\.nfz\.yecdn\.com/</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/static/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>origin<span class="token punctuation">:</span> <span class="token regex">/blog\.nfz\.yecdn\.com/</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/fonts/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/blog\.nfz\.yecdn\.com/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> staticAssetsCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/cdnjs\.cat\.net/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> staticAssetsCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我的博客对于 css 和 js 使用了基于 localstorage 的缓存机制；我不想在刷新缓存时，同时刷新 CDN、localstorage 和 Cache Storage 的缓存，所以针对 css js 都做了 <code>networkOnly</code>。</p>
<blockquote>
<p>这样一来，我的博客会存在一个 Bug，即当用户处于离线模式时，本地 Cache Storage 缓存了对当前页面的离线、同时用户的 localstorage 已经损坏，这时候会引起页面的渲染错误。但是发生这种错误的可能性微乎其微，因为 localstorage 的缓存强度比 Cache Storage 要强。</p>
</blockquote>
<p>对于字体和从公共 CDN 库上调用的文件，都是不会经常改动的（准确说几乎不会改动），全部使用 <code>cacheFirst</code>。</p>
<hr>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* ContentCache */</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/archives/(.*).html(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> contentCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(tags|about|gallery|archives|links|timeline)(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
   cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> contentCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/$"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
         name<span class="token punctuation">:</span> contentCacheName<span class="token punctuation">,</span>
         maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/\?(.*)$"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> contentCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> contentCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据 URI 匹配我博客的页面，采用 <code>networkFirst</code>，这样当访客在线时可以及时收到页面更新，访客离线时也能正常加载已经缓存的版本。</p>
<hr>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* VendorCache */</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/next/config.json"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkOnly<span class="token punctuation">,</span> <span class="token punctuation">{</span>origin<span class="token punctuation">:</span> <span class="token regex">/disqus\.com/</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkOnly<span class="token punctuation">,</span> <span class="token punctuation">{</span>origin<span class="token punctuation">:</span> <span class="token regex">/disqus\.com/</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/disquscdn\.com/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> vendorCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    origin<span class="token punctuation">:</span> <span class="token regex">/referrer\.disqus\.com/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> vendorCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>cacheFirst<span class="token punctuation">,</span> <span class="token punctuation">{</span>origin<span class="token punctuation">:</span> <span class="token regex">/(www\.google-analytics\.com|ssl\.google-analytics\.com)/</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> vendorCacheName<span class="token punctuation">,</span>
        maxEntries<span class="token punctuation">:</span> maxEntries
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于 Disqus 几个域名，分别做了不同的安排。我的博客使用 <code>disqus.com/next/config.json</code> 作为访客 Disqus 连通性测试的探针，所以这个请求一定不能被缓存，只能 <code>networkOnly</code>。对于需要实时更新的一些 Disqus API 数据，也用 URI 正则匹配的方式加以 <code>networkOnly</code>。对于 Disqus CDN 的域名（主要用于加载用户头像和评论框的 css）也全部 <code>cacheFirst</code>，加快访客的 Disqus 评论框二次加载速度。<br>我对于 Disqus 引入的 Google Analytics 和 <code>referrer.disqus.com</code> 没有好感，同样全部缓存处理，反正并不影响我自己网站的访问统计（我自己的 Google Analytics 实现方式不同）</p>
<hr>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* NoCache */</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/sw.js"</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkFirst<span class="token punctuation">)</span><span class="token punctuation">,</span>
self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/(.*).php(.*)"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span>networkOnly<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>最后是不缓存部分和预缓存部分。对于博客中的动态部分不做任何缓存；对于 <code>sw.js</code> 采取 <code>networkFirst</code> 策略，使访客网络状态正常时更新 <code>sw.js</code>，离线时也能正常使用 Service Worker。</p>
<hr>
<pre class="line-numbers language-javascript"><code class="language-javascript">self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span>
<span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">skipWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"activate"</span><span class="token punctuation">,</span>
<span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sw.js</code> 结尾部分设置 <code>skipWaiting</code> 和 <code>clients.claim</code> 以便实现每次页面加载时 Service Worker 都要强制更新。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> Service Worker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Travis CI 持续构建 Hexo]]></title>
      <url>/archives/hexo-auto-deploy-with-travis-ci.html</url>
      <content type="html"><![CDATA[<p>我已经写了三篇关于如何使用 CI 持续构建 Hexo 的文章了，现在我将博客迁移到 GitHub 上托管，所以就需要使用 Travis CI 完成持续构建了。</p>
<a id="more"></a>
<blockquote>
<p>相关阅读</p>
<ul>
<li>《<a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-daocloud.html">使用 DaoCloud 让 Hexo 持续集成</a>》</li>
<li>《<a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-flow-ci.html">用 Flow.CI 让 Hexo 持续集成</a>》</li>
<li>《<a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-gitlab-ci.html">使用 GitLab CI 实现 Hexo 持续部署</a>》</li>
<li>《<a href="https://blog.nfz.moe/archives/use-hexo-at-any-time-any-place.html">随时随地 Hexo——我是如何使用 Hexo 的</a>》</li>
</ul>
</blockquote>
<h1 id="建立 -Repo"><a href="# 建立 -Repo" class="headerlink" title="建立 Repo"></a>建立 Repo</h1><p>根据《<a href="https://blog.nfz.moe/archives/use-hexo-at-any-time-any-place.html">随时随地 Hexo——我是如何使用 Hexo 的 </a>》一文，你应该使用 Git 管理你的 Hexo 工程文件。<br> 新建一个分支 <code>raw</code>，用来存放你的 Hexo 工程文件。将 <code>raw</code> 分支 push 到 GitHub 上。</p>
<p>如果你不想使用 SSH 的方式完成 Hexo 的 Deploy 的话，你可以使用——</p>
<h1 id="GitHub-Personal-Access-Token"><a href="#GitHub-Personal-Access-Token" class="headerlink" title="GitHub Personal Access Token"></a>GitHub Personal Access Token</h1><p>在 GitHub 上点击页面右上角你的头像，进入 <code>Settings</code>。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000151.jpg" alt="0000151.jpg" style="width:50%"></p>
<p>在左侧菜单的最下面、<code>Developer Settings</code> 中最后一项就是 <code>Personal Access Token</code>。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000152.jpg" alt="0000152.jpg" style="width:50%"></p>
<p>点击 <code>Generate new token</code>。GitHub 会让你输入密码，因为这是一个危险的操作。<br>你需要给 Token 取一个名字，建议使用一个容易辨别的名字。权限勾选 <code>repo</code> 的全部权限，即可生成一个新的 Token。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000153.jpg" alt="0000153.jpg" style="width:50%"></p>
<p>确定生成后，Token 将会显示在页面上，强烈建议你将其复制并保存好，同时避免泄露。遗忘 Token 后不能找回，只能重新生成。</p>
<h1 id="配置 -Travis-CI"><a href="# 配置 -Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h1><p>打开 <a href="https://travis-ci.com" target="_blank" rel="external">Travis CI</a> 并用 GitHub 帐号登陆完成授权，同步一下你 GitHub 帐号下的 repo 到 Travis CI，找到你博客的 repo，把左侧的开关打开。<br>找到已经启用自动构建的 repo，并在右侧找到设置按钮，有两处需要设置。首先需要启用 <code>Build only if .travis.yml is present</code> 选项，以避免用于 deploy 的分支被构建和、陷入构建循环的问题；在下方的环境变量设置处，我们需要设置几组环境变量，并注意保持 <code>Display value in build log</code> 处于禁用状态（默认为禁用），以免构建日志泄露重要信息。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000155.jpg" alt="0000155.jpg" style="width:50%"></p>
<pre><code>GitHubKEY = 上文生成的 GitHub Personal Access Token
GitHubEMail = 你绑定在 GitHub 上的邮箱地址
GitHubUser = 你的 GitHub 用户名
GitHubRepo = 静态页面 deploy 的目标仓库名称
</code></pre><h1 id="定义构建流程"><a href="# 定义构建流程" class="headerlink" title="定义构建流程"></a>定义构建流程</h1><p>Travis CI 使用 repo 根目录下的 <code>.travis.yml</code> 来定义构建流程。</p>
<p>有关于 Travis CI 配置的详细解释可以查阅 <a href="http://docs.travis-ci.com/" target="_blank" rel="external"> 文档</a>，下面是我使用的 <code>.travis.yml</code>：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js
<span class="token key atrule">dist</span><span class="token punctuation">:</span> trusty
<span class="token key atrule">node_js</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"7"</span>
<span class="token key atrule">install</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g
  <span class="token punctuation">-</span> npm install
<span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> chmod +x ../deploy.sh
  <span class="token punctuation">-</span> hexo clean
  <span class="token punctuation">-</span> hexo g
  <span class="token punctuation">-</span> ../deploy.sh <span class="token punctuation">></span> /dev/null
<span class="token key atrule">branches</span><span class="token punctuation">:</span>
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> raw
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，部署生成的静态页面我使用了一个 <code>deploy.sh</code>。接下来我就来介绍一下这个脚本是如何替代 <code>hexo d</code> 和 <code>hexo-deployer-git</code> 的。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ./public <span class="token comment" spellcheck="true"># Hexo 生成的目录默认在 public 下</span>
<span class="token function">git</span> init <span class="token comment" spellcheck="true"># 初始化一个 Repo</span>
<span class="token function">git</span> config --global push.default matching
<span class="token function">git</span> config --global user.email <span class="token string">"<span class="token variable">${GitHubEMail}</span>"</span>
<span class="token function">git</span> config --global user.name <span class="token string">"<span class="token variable">${GitHubUser}</span>"</span> <span class="token comment" spellcheck="true"># 利用在环境变量中定义的信息配置 Git</span>
<span class="token function">git</span> add --all <span class="token keyword">.</span>
<span class="token function">git</span> commit -m <span class="token string">"Auto Builder of <span class="token variable">${GitHubUser}</span>'s Blog"</span> <span class="token comment" spellcheck="true"># commit 信息</span>
<span class="token function">git</span> push --quiet --force https://<span class="token variable">${GitHubKEY}</span>@github.com/<span class="token variable">${GitHubUser}</span>/<span class="token variable">${GitHubRepo}</span>.git master <span class="token comment" spellcheck="true"># 将生成的静态整站部署到指定 Repo 的 master 分支。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="分支保护"><a href="# 分支保护" class="headerlink" title="分支保护"></a>分支保护 </h1><p> 为了防止你不小心将 Hexo 生成的静态整站覆盖了存放工程文件的分支，你需要对存放工程文件的分支开启写保护。<br>进入 Repo 的 <code>Settings</code>，在 <code>Branches</code> 选项卡中 <code>Protected Branches</code> 选中存放你的 Hexo 工程文件的分支，只勾选第一个勾 <code>Protect this branch</code> 即可。点击 <code>Save Changes</code> 保存。</p>
<blockquote>
<p>因为在 Travis CI 构建时，是使用 <code>git push --quiet --force</code> 完成 deploy 的，所以对 Hexo 工程文件所在分支进行写保护（即禁止 Force Push）可以有效保护你的工程文件。</p>
</blockquote>
<h1 id="加密 -Personal-Access-Token"><a href="# 加密 -Personal-Access-Token" class="headerlink" title="加密 Personal Access Token"></a>加密 Personal Access Token</h1><p>Travis CI 的环境变量相对可靠。但 GitHub Personal Access Token 权限太大，不能轻易暴露出去。所以如果你对 Travis CI 不太放心，那么可以用 Travis 命令行工具对其进行加密。</p>
<p>在本地配置好 Ruby 环境后，执行</p>
<pre class="line-numbers language-bash"><code class="language-bash">gem <span class="token function">install</span> travis
travis login
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>安装 Travis 命令行工具并登陆。</p>
<pre class="line-numbers language-bash"><code class="language-bash">travis encrypt <span class="token string">'GitHubKEY=&lt; 这里填入你生成的 Token >'</span> --add
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面命令会在 <code>.travis.yml</code> 中添加如下内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">env</span><span class="token punctuation">:</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token key atrule">secure</span><span class="token punctuation">:</span> QAH+/EIDC/Jg<span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面的一长串字符串就是加密后的环境变量。之后，在 Travis 执行脚本时，就可以直接使用该环境变量了。由于已经在 <code>.travis.yml</code> 里完成 <code>env</code> 的定义，你就不需要在 Travis CI 后台配置 <code>GitHubKEY</code> 变量了。</p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI </tag>
            
            <tag> Travis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用免费前端公共库 CDN 服务收集]]></title>
      <url>/archives/public-static-cdn-service.html</url>
      <content type="html"><![CDATA[<p>前端公共库 CDN 服务是指一些服务商将我们常用的前端开发用到的库存放到网上，方便开发者直接调用，并且提供 CDN 加速。<a id="more"></a>与将前端库存放在自己的服务器上相比，公共库的 CDN 更加稳定、高速，一来可以方便开发者的开发，二来可以让用户加速访问这些资源。</p>
<h1 id="BootCDN"><a href="#BootCDN" class="headerlink" title="BootCDN"></a>BootCDN</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000144.jpg" alt="0000144.jpg"></p>
<ul>
<li>CDN 提供商：又拍云</li>
<li>节点：全球</li>
<li>HTTPS：支持</li>
<li>HTTP2：支持 HTTP2 和 SPDY3.1</li>
<li>官网：<a href="http://www.bootcdn.cn" target="_blank" rel="external">www.bootcdn.cn</a></li>
<li>CDN 资源域名：<code>cdn.bootcss.com</code></li>
</ul>
<p>BootCDN 是 Bootstrap 中文网和又拍云合作提供的前端公共库服务。BootCDN 每天同步一次 CDNJS 的 GitHub。又拍云的 CDN 嘛没的说，国内 150+ 节点，在香港和美国也都有节点，整体速度都很不错。</p>
<h1 id="CDNBee"><a href="#CDNBee" class="headerlink" title="CDNBee"></a>CDNBee</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000145.jpg" alt="0000145.jpg"></p>
<ul>
<li>CDN 提供商：又拍云</li>
<li>节点：全球</li>
<li>HTTPS：支持</li>
<li>HTTP2：支持 HTTP2 和 SPDY3.1</li>
<li>官网：<a href="https://cdnbee.com" target="_blank" rel="external">cdnbee.com</a></li>
<li>CDN 资源域名：<code>js.cdnbee.com</code></li>
</ul>
<p>CDNBee 也是接入了又拍云的一个公共库服务，特点是不仅同步 CDNJS，还同步 jsDeliver。CDNBee 还有一个特点是资源路径和 CDNJS 的是几乎相同的，很容易通过替换 URI 的方式从 CDNJS 迁移到 CDNBee（甚至可以直接在 WebServer 中实现 URI 替换，实现对国内和海外的用户使用不同的公共库）。</p>
<h1 id="BaomituCDN"><a href="#BaomituCDN" class="headerlink" title="BaomituCDN"></a>BaomituCDN</h1><ul>
<li>CDN 提供商：奇虎 360</li>
<li>节点：全球</li>
<li>HTTPS：支持</li>
<li>HTTP2：支持</li>
<li>官网：<a href="https://cdn.baomitu.com/" target="_blank" rel="external">cdn.baomitu.com</a></li>
<li>CDN 资源域名：<code>lib.baomitu.com</code></li>
</ul>
<p>BaomituCDN 是奇虎 360 最大的前端团队奇舞团维护的前端开源公共库，也是每天同步 CDNJS。奇虎的 CDN 节点在国内数量很可观，但是在海外就有些差强人意（没有东南亚地区节点，只有一个北美节点），亚太地区访客都会被解析回国内节点。不过 BaomituCDN 还同步了谷歌字体库（不是反代），所以还是可以看看的。</p>
<h1 id="CSS-NET"><a href="#CSS-NET" class="headerlink" title="CSS.NET"></a>CSS.NET</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000142.jpg" alt="0000142.jpg"></p>
<ul>
<li>CDN 提供商：Sucuri CDN 和 阿里云 CDN</li>
<li>节点：双节点</li>
<li>HTTPS：支持</li>
<li>HTTP2：支持</li>
<li>官网：<a href="https://css.net" target="_blank" rel="external">css.net</a></li>
<li>CDN 资源域名：<code>cdnjs.cat.net</code> 等</li>
<li>介绍：<a href="https://sb.sb/css-cdn/" target="_blank" rel="external">SB.SB/css-cdn/</a></li>
</ul>
<p>CSS.NET 是土豪 Showfom 提供的公益前端 CDN 服务，每天同步 CDNJS<del>和 jsDeliver</del>的 GitHub。jsDelivr 由于有国内和网宿合作的节点，css.net 已经不再同步。<br><del>当面对全网加速的需求时，CDN 和 BGP 成为了两个极端。如果说前面几家前端公共库选择了 CDN，那么 Showfom 的选择是另一个极端——BGP。cdn.css.net 只解析了国内和北美的各一台服务器，其中国内的是位于浙江阿里云 BGP 机房，同时接入了 8 条运营商线路 </del> 兽兽 dalao 亲自来博客评论区了(⁄ ⁄•⁄ω⁄•⁄ ⁄)，现在 css.net 的架构改成了国内是阿里云 CDN，海外是 SUCURI CDN（IP 任播），全球路由畅通。CSS.NET 的整体速度和延迟都很不赖<del>，就是需要担心如果公共库单点宕机带来的加载问题</del>。</p>
<h1 id="Staticfile"><a href="#Staticfile" class="headerlink" title="Staticfile"></a>Staticfile</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000146.jpg" alt="0000146.jpg"></p>
<ul>
<li>CDN 提供商：七牛</li>
<li>节点：全球</li>
<li>HTTPS：支持</li>
<li>HTTP2：不支持</li>
<li>官网：<a href="https://www.staticfile.org" target="_blank" rel="external">www.staticfile.org</a></li>
<li>CDN 资源域名：<code>cdn.staticfile.org</code></li>
</ul>
<p>Staticfile 是七牛提供的公共 CDN 服务，由掘金提供的技术支持。Staticfile 的库是自己维护的，开源在 GitHub 上。不过已经将近一年没有更新了，里面的库都不是最新的。不过七牛毕竟和网宿合作，在国内节点和线路优秀，在海外也有韩国、日本、香港、台湾、北美多地的节点。不过七牛一直不支持 HTTP2，大家需要权衡一下。</p>
<h1 id="CDNJS"><a href="#CDNJS" class="headerlink" title="CDNJS"></a>CDNJS</h1><ul>
<li>CDN 提供商：CloudFlare</li>
<li>节点：海外</li>
<li>HTTPS：支持</li>
<li>HTTP2：支持</li>
<li>官网：<a href="https://cdnjs.com" target="_blank" rel="external">cdnjs.com</a></li>
<li>CDN 资源域名：<code>cdnjs.cloudflare.com</code></li>
</ul>
<p>公共 CDN 库的老大，基本上国内大部分公共 CDN 都是从它这里同步的。支持多资源合并。CDN 服务商是大名鼎鼎的 CloudFlare，IP 任播走遍全球节点，还支持 IPv6。在国外速度没话说，不过在国内的路由就因为某些大家都懂的原因就基本呵呵了。</p>
<h1 id="jsDeliver"><a href="#jsDeliver" class="headerlink" title="jsDeliver"></a>jsDeliver</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000148.jpg" alt="0000148.jpg"></p>
<ul>
<li>CDN 提供商：CloudFlare、MaxCDN、Fastly 和网宿等</li>
<li>节点：全球</li>
<li>HTTPS：支持</li>
<li>HTTP2：<del>国内不支持、海外支持</del> 现在国内节点也已经支持了 HTTP2。</li>
<li>官网：<a href="https://www.jsdelivr.com/" target="_blank" rel="external">www.jsdeliver.com</a></li>
<li>CDN 资源域名：<code>cdn.jsdelivr.net</code></li>
</ul>
<p>也是一家公共 CDN 巨头，除了拥有自有库、支持文件合并以外，还支持从 NPM 上获得资源。jsDeliver 域名还在国内备了案。提供海外 CDN 服务的是 CloudFlare，提供国内 CDN 服务的是 CloudFlare 国内版（但是看介绍说，节点是网宿的）。<del>虽然有国内节点，但是我还是推荐使用国内同步 jsDeliver 的公共库，因为 jsDeliver 用的域名解析不够智能，还是偶尔会有国内一些地区被解析到 CloudFlare 海外节点上 </del> 现在 jsDelivr 换了负载均衡提供商，目前的解析还是挺正确的。</p>
<h1 id="UNPKG"><a href="#UNPKG" class="headerlink" title="UNPKG"></a>UNPKG</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000147.jpg" alt="0000147.jpg"></p>
<ul>
<li>CDN 提供商：CloudFlare</li>
<li>节点：海外</li>
<li>HTTPS：支持</li>
<li>HTTP2：支持</li>
<li>官网：<a href="https://unpkg.com/#/" target="_blank" rel="external">unpkg.com</a></li>
<li>CDN 资源域名：<code>unpkg.com</code></li>
</ul>
<p>UNPKG CDN 是和 jsDeliver 类似的、但是只从 NPM 上获取资源的公共 CDN 库。虽然是 CloudFlare 国内速度较为不理想，但是比较推荐在开发时使用，因为 NPM 上的资源是最新的和实时的。不过部署在国内的生产环境上，还是不建议使用 UNPKG、或者部署反代。</p>
]]></content>
      
        <categories>
            
            <category> 分享镜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 免费资源 </tag>
            
            <tag> Web </tag>
            
            <tag> 公共 CDN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客统计报告（2016.11.26-2017.07.02）]]></title>
      <url>/archives/2016-blog-analytics.html</url>
      <content type="html"><![CDATA[<p>我的博客到现在快 300 天了，期间我的域名换了两次，博客程序也换了 Hexo。如今我即将使用 Google Analytics 统计访问数据，本文将公布从 2016.11.26 至 2017.07.02 的访问情况。</p>
<a id="more"></a>
<h1 id="PV-amp-UV"><a href="#PV-amp-UV" class="headerlink" title="PV &amp; UV"></a>PV &amp; UV</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000131.png" alt="0000131.png"></p>
<p>在这过去的 220 天中，我的博客总共迎来了 21557 名访客，总共访问了 86729 次页面。每位访客平均在我的页面上驻留 346s，跳出率平均为 40%。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000130.png" alt="0000130.png"></p>
<p>上图的几个波峰颇有意思。</p>
<ul>
<li>2016.12.22 第一次访问高峰，是我在酷安“玩机技巧”话题推广了我的博客。那一次访问高峰跑掉了我七牛 2 个 G 的流量、将近 2 块钱。这一次访问高峰持续了三天，累计带来了 641PV。</li>
<li>2017.1.23 这是第二次访问高峰。之前酷安发生了一起有人打包绿色守护、App Settings 等 Xposed 模块为木马的恶性事件，我写了一篇博客解析这个病毒。这篇博客我分享到了酷安和知乎，后来被多次转载。</li>
<li>2017.1.26 接下来我乘胜追击，写了《阻止运行、猎鹰网络、黑域 始末》，延续了这一次高峰。</li>
<li>2017.1.31 怒怼妮乎，又痛批了中国的开源环境。这几次的访问高峰总共为我带来了 3992PV。</li>
<li>2017.2.11 在怒几次事件中，我看清了酷安，选择离开。有感而发的文章引发了之后的一次访问高峰，累计带来 992PV。</li>
<li>之后的访问量便趋于平稳，图表中一些比较小的波峰一般是当天发表了新的文章。</li>
</ul>
<h1 id="地理位置与语言"><a href="# 地理位置与语言" class="headerlink" title="地理位置与语言"></a>地理位置与语言</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000132.png" alt="0000132.png"></p>
<p>毫无疑问，我的博客绝大部分访问量都来自中国，主要访客以使用简体中文为主。也就是说，并不是国内用户都会选择使用中文系统。</p>
<h1 id="设备类型"><a href="# 设备类型" class="headerlink" title="设备类型"></a>设备类型</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000133.png" alt="0000133.png"></p>
<p>我的博客主要流量还是来自于移动端，主要和我之前主要在酷安推广我的博客有关。<br>我的博客通过桌面浏览器访问能获得最好的体验；移动端的优势是方便，可以随时随地阅读，我的博客的主题的响应式设计也对移动端友好；而随着手机屏幕越来越大，平板已经被逐渐边缘化。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000134.png" alt="0000134.png"></p>
<p>除去 UA 中未知的部分（应该是桌面端的访问），绝大部分访客都使用 Android，小米和一加位居第一和第二。联想到我之前在酷安推广博客，这并不奇怪。排在第三、第四和第五的是三星、苹果和华为。它们也的确是非常热销的品牌。</p>
<h1 id="操作系统"><a href="# 操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000135.png" alt="00000135.png"></p>
<p>从操作系统来看，使用 Android 的占绝对优势，Windows 紧随其后。但是，使用 Mac 和 Linux 的访客数量加起来只是略多于 iOS 用户。看来我博客的访问依然不是以开发者为主。</p>
<h1 id="浏览器"><a href="# 浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000136.png" alt="0000136.png"></p>
<p>访问我的博客的浏览者中，使用 Chrome 的占绝大多数。接下来是 QQ 浏览器，我认为应该是使用 QQ 或者微信上的内置 TencentX5 内核的访客。<br>Chrome 浏览器性能优异，而且有很多 Web 前沿的特性。我的博客在 Chrome 上有最好的性能表现。<br>对于那微乎其微的 UC 浏览器用户，博客的主题甚至专门为 UC 内置了一整套样式。<br>由于来自 IE 的份额极低以至于都没有出现在报表中，这意味着我可以尽情尝试各种新的技术。</p>
<h1 id="流量来源"><a href="# 流量来源" class="headerlink" title="流量来源"></a>流量来源</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000137.png" alt="0000137.png"></p>
<p>我博客的大部分流量来自于我在社交媒体和社区上的推广，所以以直接访问为主。同时，我也欣喜地发现有多个搜索引擎收录了我的博客，并为我的博客带来了访客。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000138.png" alt="0000138.png"></p>
<p>可以看到，我的博客的引荐流量主要来自我的个人主页、知乎跳转、酷安跳转、Google+ 转发和 Telegram。<br>还可以看到，我的友链在流量引荐中占了很大一部分。<br>同时，我也注意到一些特定搜索引擎的关键词来的流量，这意味着我的 SEO 做的不错，有被搜索引擎收录。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000139.png" alt="0000139.png"></p>
<p>同时也需要注意，就是直接访客和引荐访客，网页平均停留时间较长、跳出率明显较低，但是从搜索引擎到来的访客则相反。这符合人们使用搜索引擎的习惯，找到有用的信息便不再继续探索，但同时也说明了我的博客对于这一类访客保活度还不够。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000140.png" alt="0000140.png"></p>
<p>Google 对原创博客非常友好，使用 HTTPS、提高访问速度、对移动端友好、结构化数据等也很有利于提高在 Google 的权重，最终绝大部分搜索引擎流量来自于 Google 搜索。而百度对原创博客就没有这么友好了，但基于其在国内庞大的市场份额，本博客也有部分的流量来自于百度。不过最近我使用 CloudXNS 分线路解析功能，刻意将百度爬虫的线路解析到 127.0.0.1 来阻止百度爬虫的到访，以后应该不会有从百度到访的人了。</p>
<h1 id="后记"><a href="# 后记" class="headerlink" title="后记"></a>后记 </h1><p> 我快要高三了，到高考结束以前，更新博客只会越来越少。很多事情在刚开始时，并不能预料到它最终会有什么结果。写博客也是一样。但是只要长期投入，最终一定能从中找到乐趣和成就感。</p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 访问统计 </tag>
            
            <tag> Piwik </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[寂静之城 (The Silence City)]]></title>
      <url>/archives/the-silence-city.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>马伯庸《寂静之城》未删节版本全文 <br> 发表在 2005 年第 5 期《科幻世界》上的本文由于众所周知的原因进行了删节。以下是发在马伯庸个人网站上的原文。</p>
</blockquote>
<hr>
<p>And in the naked light I saw ten thousand people, maybe more.<br>People talking without speaking, people hearing without listening.<br>People writing songs that voices never shared, no one dared disturb the sound of silence.</p>
<p>— The sound of silence</p>
<p>美利坚合众国，2015 年，纽约。</p>
<p>当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。</p>
<p>其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。</p>
<p>阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。</p>
<p>电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。</p>
<p>“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。<br>“19842015”<br>阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音。</p>
<p>他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。<br>话筒里的声音仍旧在继续着。<br>“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”<br>“知道了，谢谢。”<br>阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。<br>电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。</p>
<p>每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此 <code>19842015</code> 就是阿瓦登，阿瓦登就是 <code>19842015</code>。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。</p>
<p>有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。<br>“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登 EMAIL 信箱的服务器；还有时候它是监察网络的 FBI 特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。<br>简直就象是老大哥一样无微不至。</p>
<p>电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。</p>
<p>音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。<br>“缔造健康的互联网络，美国万岁！”<br>音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”</p>
<p>这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和 BBS 论坛。其中 BBS 选项呈现灰色，说明这项功能还没有开通。<br>整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。</p>
<p>阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。<br>他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE 浏览器没有地址栏，就算知道地址也没有用处。</p>
<p>“您有一封新邮件。”<br>系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。<br>“To: 19842015<br>From：10045687<br>Subject: 模块、已经、完成、当前、项目、是否、开始。”</p>
<p>阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。</p>
<p>这封信很简短，但是内容很充实。<code>19842015</code> 是阿瓦登的网络编号，而 <code>10045687</code> 则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。<br>阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的 TXT 文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。<br>“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。<br>这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。</p>
<p>他对照着这份列表，很快就完成了一封文字风格与来信差不多的 <code>EMAIL</code>——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。<br>接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。<br>阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者 USB 接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。<br>完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的 <code>EMAIL</code>。</p>
<p>这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。<br>阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。<br>他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的 BBS 论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。<br>阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。</p>
<p>纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。<br>“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。<br>这时候正是 11 月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。<br>距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。</p>
<p>站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：<br>“烟，有吗？”<br>男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。<br>阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：<br>“没有。”<br>男人很失望，又一次不甘心地张开嘴。<br>“酒，有吗？”<br>“没有。”<br>阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。<br>这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。</p>
<p>阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。<br>这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。</p>
<p>“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他 X 的，老 * 受够了……”<br>男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。<br>而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。<br>警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。</p>
<p>联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。<br>“他，是，你朋友？”<br>“我，不，认识。”<br>警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。<br>阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。</p>
<p>街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”<br>阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。<br>大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。</p>
<p>车站对面就是阿瓦登要去的地方，那是有关部门负责受理 BBS 论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。<br>BBS 论坛是一种奇特的东西，从理论上来讲它完全多余，BBS 的功能完全可以由 EMAIL 新闻组来取代，后者更容易管理和审查。而且申请使用 BBS 论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设 BBS 则几乎是不可能。<br>因此真正对 BBS 有兴趣的人少之有少。阿瓦登当初之所以决定申请 BBS 论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。<br>阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用 BBS 论坛回想起一些当年的事情。</p>
<p>阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部 BBS 论坛科。”<br>一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。</p>
<p>“公民，请您站在原地不要动。”<br>一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。<br>“缔造健康的互联网络，美国万岁。”<br>阿瓦登跟着声音重复了一遍。<br>“请前往八号窗口。”<br>电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。</p>
<p>阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。<br>“请把文件放入盒子里。”<br>柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。<br>“请把文件放入盒子里。”<br>声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。<br>“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。<br>很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。</p>
<p>“你申请 BBS 服务的目的是什么？”<br>喇叭后的女声浸满了纯粹事务性的腔调。<br>“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”<br>阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。<br>对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。<br>“最后手续确认，你已经获得 BBS 论坛浏览权。”<br>“谢谢。”<br>“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。<br>“这是有关部门核发给你的 BBS 论坛统一用户名与密码，BBS 论坛列表、互联网 BBS 论坛使用指南及相应法规、以及最新健康网络词汇列表。”<br>阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。<br>他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。<br>“手续办理完毕，请离开网络部回到自己的工作岗位上。”</p>
<p>甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。<br>在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到 BBS 的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。<br>如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。<br>忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。<br>阿瓦登很快注意到，在装有 BBS 论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母 i。<br>很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照 BBS 论坛统一用户名与密码、BBS 论坛列表、互联网 BBS 论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：<code>title</code></p>
<p>题目？这是什么意思？<br>阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？<br>这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。<br>阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。<br>无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。<br>他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用 BBS 论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。</p>
<p>回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。<br>过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。<br>信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。<br>阿瓦登打开了包含有 BBS 论坛的用户名、密码和 BBS 论坛列表的两封信。他看到自己的论坛通用用户名叫做 <code>19842015</code>，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS 论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。<br>小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。</p>
<p>阿瓦登又打开了那份 BBS 列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新 BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。<br>居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。<br>阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了 TITLE 五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。</p>
<p>一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为 BBS 论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU,YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。<br>忽然，他又想到了那个神秘的 <code>title</code>，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟 <code>title</code> 有关系？<br>阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的 <code>title</code> 部分。五张光盘各隐藏着一个字母，凑到一起就是 <code>title</code>，那么按照这个方式，那五封 EMAIL 的 <code>title</code> 凑到一起，就变成了一句话：去用户学习论坛。”<br>阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。</p>
<p>用户论坛是一个事务性论坛，里面是一些关于 BBS 用户资料的投诉帖和管理帖，斑竹的是一个叫 <code>19387465</code> 的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：</p>
<p>“每周日辛普森大楼 5 层 B 户。”</p>
<p>又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL 和 BBS 论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。<br>究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼 5 层 B 户又会发生什么事情呢？<br>阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。</p>
<p>营造健康的互联网络。<br>FUXKYOU, YOUSONOFBITCH。<br>阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。</p>
<p>在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。<br>日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。<br>阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。</p>
<p>他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。<br>值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着 B 户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。</p>
<p>阿瓦登深深吸了一口气，伸手去按电纽。<br>电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：<br>“你，找谁？”<br>女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部 BBS 论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。<br>看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”<br>阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。<br>女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。</p>
<p>一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，<br>但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。<br>阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。<br>他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：<br>“欢迎加入说话会！”<br>“说话会？”<br>出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。<br>“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。</p>
<p>阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”<br>“你们，是什么，人，这，是，哪里？”<br>阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。<br>“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”<br>另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。<br>阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”<br>她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。<br>“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。<br>“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。<br>“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”<br>阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。<br>“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”<br>“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”<br>于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：<br>“可以问个问题吗？说话会到底是什么？”</p>
<p>带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：<br>“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。<br>“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。<br>“可是，要说些什么呢？”阿瓦登又问道。<br>“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”<br>这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。<br>“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”<br>阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。<br>“我不会离开的，我要加入你们，说话。”<br>“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”</p>
<p>她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”<br>“假名？”<br>“是的，和我户籍本上的名字是不同的。”<br>“可是，为什么？”<br>“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”<br>阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。<br>通过介绍，阿瓦登了解到阿尔特弥斯是网络部 BBS 论坛管理科的职员，今年 23 岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。</p>
<p>接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41 岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。<br>那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。<br>“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。<br>说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。<br>“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。<br>“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。<br>“真的什么都可以？”<br>“什么都可以，在这里没有任何限制。”</p>
<p>阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”</p>
<p>在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”<br>“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。<br>“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。<br>“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。<br>屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。</p>
<p>“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”<br>“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”<br>瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请 BBS 论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为 BBS 论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对 BBS 论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请 BBS 论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”<br>“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。<br>“你是第二个找到说话会的人，第一个是杜拉丝小姐。”<br>阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”</p>
<p>阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：<br>“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”<br>“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。<br>“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。<br>“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”<br>大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。<br>很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。</p>
<p>“王二，你可曾看过《1984》？”<br>阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”<br>“这是一本书的名字。”<br>“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要 FIND 和 REPLACE 两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”<br>“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”</p>
<p>阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：<code>19842015</code>。<br>“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。<br>“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”<br>“太好了，然后她写下来了，对吗？”<br>“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”<br>大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。<br>杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。</p>
<p>“1984 的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。<br>“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”<br>“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。<br>“就好象同样是 0 和 1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”<br>阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。<br>“很不错的比喻，王二，就是如此，真不愧是程序员。”<br>谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。</p>
<p>“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”<br>阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。<br>“活动？还有什么活动？”<br>阿瓦登奇怪地问道，说话会除了说话还有其他活动？<br>“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”<br>“完全交流？”<br>“就是 intercourse”<br>“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。<br>“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”<br>兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”</p>
<p>阿瓦登的脸色涨红，热的仿佛夏季的电脑 CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。<br>还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。<br>最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。<br>强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……</p>
<p>……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。<br>“很舒服，对不对？”她问道。<br>“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”<br>“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：<br>“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”<br>“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。<br>“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。<br>“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。<br>“谢谢你。”<br>阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。<br>这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”<br>“我记住了。”阿瓦登回答，然后转身要走。<br>“王二。”<br>阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”</p>
<p>阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。<br>此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲 1984 的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号 19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。<br>有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。</p>
<p>在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政 polit/ic”、“pol/itic”等近乎无限种表达方式。<br>当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。<br>这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。</p>
<p>这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。<br>尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。<br>“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”<br>瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。<br>“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”<br>“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。<br>“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”<br>杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。<br>不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。</p>
<p>从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。<br>他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是 <code>19842015</code>，而我是 <code>19387465</code>。”<br>对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。<br>除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的 EMAIL 与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个 title 一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。<br>讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。</p>
<p>“FUXKYOU, YOUSONOFBITCH！”</p>
<p>每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。<br>这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。<br>偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。</p>
<p>有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是 EMAIL 与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL 新闻组里也全是类似主题。<br>不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。</p>
<p>阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”<br>杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。</p>
<p>“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于 intercourse 的快乐。<br>“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。<br>“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。<br>阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以 24 小时工作的旁观者并没发出任何警报。</p>
<p>阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。<br>今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。<br>车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。</p>
<p>有什么地方不对劲！<br>他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。<br>也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。</p>
<p>“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。<br>他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。<br>这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。</p>
<p>这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。<br>阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。<br>他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。</p>
<p>他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU,<br>YOUSONOFBITCH”都不能说。<br>从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。<br>另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。<br>阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封 EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。</p>
<p>其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。<br>说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的 EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。<br>因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。<br>与词汇列表更新速度相对的，EMAIL 和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。</p>
<p>这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。<br>然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。<br>阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论 EMAIL，新闻组，BBS 论坛还是其他什么现在全部都变成了一样的东西。</p>
<p>从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。<br>忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。<br>阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。</p>
<p>于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。</p>
<hr>
<p>我曾不止一次地读过这篇文章。我最终决定转载它，是因为最近发生了的事情。<br>广电总局封杀 AcFun，体育总局的苟屁，还有 B 站 UP 主实名制，等等等等，不一而足。<br>最后，推荐大家阅读我自己写的博客<a href="https://blog.nfz.moe/archives/my-view-of-freedom.html">《真正的自由？——从杨舒平的演讲来谈中国和言论自由》</a></p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 性能优化（5）——Preload 和 Server Push]]></title>
      <url>/archives/wpo-preload-serverpush.html</url>
      <content type="html"><![CDATA[<p>相比使用 Prefetch 之类的技术让浏览器提前准备好将来需要的资源，Preload 是让浏览器在加载页面时提前准备好这个页面所需要的资源。</p>
<a id="more"></a>
<p>在之前的 <a href="https://blog.nfz.moe/archives/wpo-by-prefetch.html">《Web 性能优化（2）——分析 Prefetch》</a> 中，我介绍了 Prefetch 对于前端优化的重要性。</p>
<p>在开发过程中，我们经常会碰到这样的情况，有些资源由于依赖管理、条件加载、加载顺序控制等等的原因，不需要立即在页面上执行，但是又需要尽早获取。<br>应对这类问题的传统的解决方案是：</p>
<ul>
<li>用 JS 动态地插入元素<ul>
<li>缺陷：script 不能延迟执行</li>
</ul>
</li>
<li>XMLHttpRequest 异步加载<ul>
<li>缺陷：浏览器无法根据资源类型进行预判并优化加载，造成性能问题；大量加载脚本会 Block 页面的加载进程。</li>
</ul>
</li>
</ul>
<blockquote>
<p>我在 <a href="https://blog.nfz.moe/archives/wpo-by-prefetch.html">《Web 性能优化（2）——分析 Prefetch》</a> 中，还介绍了一种针对 WebView 的奇技淫巧：服务端根据 cookie 判断页面是否为首次加载，如果是则会返回的 HTML 中包含一个 1px 的 iframe 用于承担 Prefetch 的代码片段。</p>
</blockquote>
<h1 id="Preload"><a href="#Preload" class="headerlink" title="Preload"></a>Preload</h1><p>Preload 是解决文首的问题的一个新的解决方案：</p>
<ul>
<li>与页面逻辑分离，基本不阻塞加载</li>
</ul>
<blockquote>
<p>指不影响页面加载进程。实际上 Preload 资源时会占用一部分带宽，在移动端上尤为明显</p>
</blockquote>
<ul>
<li>资源提前加载但不会被使用</li>
<li>优先级高，不像 Prefetch/Subresource 那般模棱两可</li>
</ul>
<h2 id="使用方法"><a href="# 使用方法" class="headerlink" title="使用方法"></a>使用方法 </h2><p> 使用 <code>&lt;link&gt;</code> 标签设置需要的预加载的元素。</p>
<ul>
<li>rel：<code>preload</code></li>
<li>href：用来定义需要 Preload 的资源。</li>
<li>as：用来指定资源的类型，使浏览器能够确定优先级、根据资源类型发送合适的 <code>Accept headers</code>、判断资源能否复用。</li>
</ul>
<blockquote>
<p>具体用法，可以查看一下 <a href="https://w3c.github.io/preload/" target="_blank" rel="external"> W3C 关于 Preload 的标准</a></p>
</blockquote>
<h2 id="使用场景"><a href="# 使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>加载”隐性“资源</li>
</ul>
<p>一些非标签资源，比如在 css 内定义的资源如图片。由于“隐藏”在 css 中，大部分浏览器不能判断资源优先级，所以导致 css 中的资源优先级不够高、被“搁浅”。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-island.png<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>加载字体</li>
</ul>
<p>加载字体的规则异常复杂。有些重要的字体等到真正加载的时候已经晚了。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MaterialIcons-Regular.woff2<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font/woff2<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>需要注意，字体即使符合同源策略也需要加上 crossorigin 属性。</p>
</blockquote>
<ul>
<li>JS 的只加载而不执行</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> preload <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
preload<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'https://cdn.bootcss.com/fullPage.js/2.9.4/jquery.fullpage.min.js'</span><span class="token punctuation">;</span>
preload<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">'preload'</span><span class="token punctuation">;</span>
preload<span class="token punctuation">.</span><span class="token keyword">as</span> <span class="token operator">=</span> <span class="token string">'script'</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>preload<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/fullPage.js/2.9.4/jquery.fullpage.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>基于标签实现的 css 异步加载</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>async_style.css<span class="token punctuation">"</span></span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this.rel<span class="token punctuation">=</span><span class="token punctuation">'</span>stylesheet<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>渲染页面框架的重要 css 不建议异步引入；如果 css 加载过慢或者 onload 不能及时触发会导致页面抖动。<br>这是一个很有意思的设计，是比 loadcss 更简单的 css 异步加载方案。比如使用这种方法加载谷歌字体库的字体 css，可以避免因为访客连通性不佳而彻底影响页面内容的渲染。</p>
</blockquote>
<ul>
<li>响应式加载</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map.png<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width: 600px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map.js<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 601px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server Push"></a>Server Push</h1><p>Server Push 是 HTTP2 的一项新特性。当客户端请求 HTML 文件时，服务端同时将其它重要资源随 HTML 在同一个资源中一并发送给用户。这样不仅节省了请求，还避免了重要资源阻塞了页面渲染和加载。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000123.png" alt="0000123.png"></p>
<p>在目前 W3C 的草案中使用了 Link Preload 响应头标记 Server Push。你可以看到页面响应类似如下所示的 Header：</p>
<pre><code>Link: &lt;/app/script.js&gt;; rel=preload; as=script
</code></pre><blockquote>
<p>目前 Nginx <del>尚不</del> 没有直接支持 Server Push，在 Apache 中支持 Server Push 但是需要 <code>mod_http2</code> 的配置中 <code>H2Push On</code>，然后通过添加 Header  <code>Header add Link &quot;&lt;/css/styles.css&gt;;rel=preload&quot;</code> 的方法启用 Server Push。在不支持 Server Push 的 WebServer 上添加该响应头，不过是通过让服务端响应头、而不是通过 HTML 标记 Preload、从而可以让浏览器提前执行预加载罢了。</p>
</blockquote>
<p>从某种意义上讲，Server Push 就是更激进、更主动的 Preload。</p>
<h1 id="兼容性"><a href="# 兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000124.png" alt="0000124.png"></p>
<p>根据 CanIUse 上的数据表明，目前支持 Preload 的浏览器并不多，只占到了 53% 。但是试想在 2015 年、Preload 的草案刚刚出来时、甚至还没有任何浏览器表态支持这项技术，我们不得不感叹 Web 技术的日新月异啊。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/36641137/how-exactly-does-link-rel-preload-work" target="_blank" rel="external">http://stackoverflow.com/questions/36641137/how-exactly-does-link-rel-preload-work</a></li>
<li><a href="https://blog.cloudflare.com/http-2-server-push-with-multiple-assets-per-link-header/" target="_blank" rel="external">https://blog.cloudflare.com/http-2-server-push-with-multiple-assets-per-link-header/</a></li>
<li><a href="https://httpd.apache.org/docs/2.4/mod/mod_http2.html" target="_blank" rel="external">https://httpd.apache.org/docs/2.4/mod/mod_http2.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> HTTP2 </tag>
            
            <tag> Preload </tag>
            
            <tag> Resource Hint </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Analytics 异步优化方案]]></title>
      <url>/archives/google-analytics-optimize.html</url>
      <content type="html"><![CDATA[<p>一般地，网站配置 Google An­a­lyt­ics 的常见方式是在网站前端引用 Google Analytics 的 trackercode，然后获取 <code>analytics.js</code> 并开始统计用户行为。</p>
<a id="more"></a>
<h1 id="Google-Analytics- 异步方案的必要性"><a href="#Google-Analytics- 异步方案的必要性" class="headerlink" title="Google Analytics 异步方案的必要性"></a>Google Analytics 异步方案的必要性 </h1><p> 虽然现在 Google Analytics 的 <code>www.google-analytics.com</code> 和 <code>ssl.google-analytics.com</code> 已经重新解析回谷歌在国内那 200 多台服务器了，所以 Google Analytics 已经不用再担心被墙而导致网站加载慢和无法采集到数据的问题了。</p>
<p>然而，浏览器端经常有意无意的，包括常见的 Ad­block 扩展等自带的屏蔽列表，利用 user­script 等方式，屏蔽 Google An­a­lyt­ics。这导致了数据统计不准的问题。</p>
<p>在 JerryQu 的 <a href="https://imququ.com/post/summary-of-my-blog-optimization.html" target="_blank" rel="external">《本博客零散优化点汇总》</a> 一文中提到他是如何处理 Google Analytics 的：</p>
<blockquote>
<p>把统计逻辑挪到了服务端；自己生成用户唯一标识，获取访问页面的标题、URL、Referer，获取用户 IP 和浏览器 UA，随着每次访问发给 Google 的统计地址。服务端向 Google 发起的请求是异步的，用户端访问速度丝毫不受影响。</p>
</blockquote>
<p>Google Analytics 的 <a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/reference" target="_blank" rel="external"> 官方文档 </a> 给出了相关介绍，Google 也提供了 <a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/" target="_blank" rel="external">Measurement Protocol</a>。</p>
<h1 id="Google-Analytics- 异步方案介绍"><a href="#Google-Analytics- 异步方案介绍" class="headerlink" title="Google Analytics 异步方案介绍"></a>Google Analytics 异步方案介绍 </h1><p> 目前常见的是这两种方法：完整的后端方案和前端和后端搭配的方案。</p>
<blockquote>
<p>前者通过配置 Nginx，使用 uid 模块和 proxy_pass 向后端转发请求；后者的方案则是通过 JS 发送请求给中转服务，再由中转服务器异步发送给 Google。对于前者的解决方案的实现可以阅读下述文章：</p>
</blockquote>
<ul>
<li><a href="https://darknode.in/network/nginx-google-analytics/" target="_blank" rel="external">《Ng­inx 内配置 Google An­a­lyt­ics 指南》</a></li>
<li><a href="https://eason-yang.com/2016/11/04/google-analytics-via-nginx/" target="_blank" rel="external">《使用 Nginx 将请求转发至 Google Analytics 实现后端统计》</a></li>
</ul>
<p>还有一种方案，就是在前端通过 JS 发起一个请求、生成用户端的信息带到请求的 URI 上，然后后端的有关程序监听这个请求，并异步发送给 Google。</p>
<blockquote>
<p>对于这种解决方案，有人写了一个 Node.js（基于 ThinkJS） 的程序实现：<a href="https://blog.alphatr.com/google-analytics-on-server.html" target="_blank" rel="external">《服务端使用 Google Analytics》</a></p>
</blockquote>
<h1 id="PHP- 的轮子"><a href="#PHP- 的轮子" class="headerlink" title="PHP 的轮子"></a>PHP 的轮子 </h1><p> 我想，没有 Node.js 支持的虚拟主机，又不是所有人都有独立的 VPS 的，也不是所有人都使用 Node.js 的。所以我根据这种思路，找到了个 PHP 版的。</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">// ********************</span>
<span class="token comment" spellcheck="true">// * Author: stneng</span>
<span class="token comment" spellcheck="true">// * Date: 2016.12.11</span>
<span class="token comment" spellcheck="true">// * Introduction: https://u.nu/ytq</span>
<span class="token comment" spellcheck="true">// *********************</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"status: 204"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control: no-cache, max-age=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Pragma: no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$tid</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在这里写 Google Analytics 给的 tid，形如：UA-XXXX-Y</span>

    <span class="token keyword">function</span> <span class="token function">create_uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$uuid</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span><span class="token punctuation">;</span>
        <span class="token variable">$uuid</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span><span class="token punctuation">;</span>
        <span class="token variable">$uuid</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span><span class="token punctuation">;</span>
        <span class="token variable">$uuid</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span><span class="token punctuation">;</span>
        <span class="token variable">$uuid</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$uuid</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"uuid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$uuid</span><span class="token operator">=</span><span class="token function">create_uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">,</span> <span class="token variable">$uuid</span> <span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">368400000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$uuid</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"uuid"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">"fastcgi_finish_request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">fastcgi_finish_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对于 fastcgi 会提前返回请求结果，提高响应速度。</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$url</span><span class="token operator">=</span><span class="token string">'v=1&amp;t=pageview&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'tid='</span><span class="token punctuation">.</span><span class="token variable">$tid</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'cid='</span><span class="token punctuation">.</span><span class="token variable">$uuid</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'dl='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'uip='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'ua='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'dt='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'dt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'dr='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'dr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'ul='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'ul'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'sd='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'sr='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'vp='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'vp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">'z='</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$url</span><span class="token operator">=</span>'https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.google-analytics.com/collect?'.$url;</span>
    <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上述代码保存为 <code>ga.php</code>，放在网站根目录。</p>
<blockquote>
<p>当然你也可以命名为其它的，不过你需要修改下述提到的 script。</p>
</blockquote>
<p>在页面中插入下述代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>!function(e,n,o){var t=e.screen,a=encodeURIComponent,r=["dt="+a(n.title),"dr="+a(n.referrer),"ul="+(o.language||o.browserLanguage),"sd="+t.colorDepth+"-bit","sr="+t.width+"x"+t.height,"vp="+e.innerWidth+"x"+e.innerHeight,"z="+ +new Date],i="?"+r.join("&amp;");e.__beacon_img=new Image,e.__beacon_img.src="/ga.php"+i}(window,document,navigator,location);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>上面这段代码是直接修改自 imququ.com 的 <code>ana_js</code><br>屈哥在 Disqus 把他这部分 javascript 的源码给了我，如下：</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> navigator<span class="token punctuation">,</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> screen <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">;</span>
<span class="token keyword">var</span> encode <span class="token operator">=</span> encodeURIComponent<span class="token punctuation">;</span>

<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dt='</span> <span class="token operator">+</span> <span class="token function">encode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string">'dr='</span> <span class="token operator">+</span> <span class="token function">encode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>referrer<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string">'ul='</span> <span class="token operator">+</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>language <span class="token operator">||</span> navigator<span class="token punctuation">.</span>browserLanguage<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string">'sd='</span> <span class="token operator">+</span> screen<span class="token punctuation">.</span>colorDepth <span class="token operator">+</span> <span class="token string">'-bit'</span><span class="token punctuation">,</span>
<span class="token string">'sr='</span> <span class="token operator">+</span> screen<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">'x'</span> <span class="token operator">+</span> screen<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
<span class="token string">'_='</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span>__beacon_img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>__beacon_img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'/ga.php'</span> <span class="token operator">+</span> query<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> navigator<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段 JS 代码完成了 URI 生成和发起请求两个操作。</p>
<p>后端 PHP 程序包含了 uuid 生成、cookie 校验和转发请求三个部分。</p>
<p>首先是用 md5 生成符合 Google Analytics 的唯一用户 uid，作为辨别不同用户的依据。<br>然后会从客户端的 cookie 来进行匹配，判断是否是回访的访客。如果客户端没有相关 cookie，这个请求就会把 uuid 写进用户端的 cookie 中。<br>然后就是解析 URI，通过请求采集请求的 URI 获取有关信息，然后组成 <code>www.google-analytics.com/collect</code> 适用的 URI。<br>最后就是服务端通过发起 cURL 请求 <code>www.google-analytics.com</code>，把统计的页面行为提交给 Google 即可。</p>
<blockquote>
<p>上述代码你可以在 <a href="https://gist.github.com/neoFelhz/4bc074783641b1ba9f4484cd232765e7" target="_blank" rel="external"> 我的 gist</a> 中下载。</p>
</blockquote>
<h1 id="异步方案的性能分析"><a href="# 异步方案的性能分析" class="headerlink" title="异步方案的性能分析"></a>异步方案的性能分析</h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000122.png" alt="0000122.png"></p>
<p>上图上半部分是使用 Google Analytics 的 Tracker Code 的前端响应速度，下半部分是我使用 PHP 程序异步的 Google Analytics 统计的性能表现。</p>
<blockquote>
<p>使用 <code>https://blog.viosey.com</code> 和 <code>https://blog.nfz.moe</code> 做的测试。</p>
</blockquote>
<p>使用 Google Analytics 的 Tracker Code 需要加载一个大小 30k 左右的脚本（可被缓存），整个统计需要花费 90ms 左右（还不包括中间异步等待时的时间）。使用我的异步统计方案大概需要 85ms - 100ms。虽然速度相差无几，但是异步方案无需加载 JS，而且如果主机性能能再好一些，后端 PHP 运行速度再快一些，完全可以将时间控制在 50ms 以内。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 访问统计 </tag>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> Google Analytics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[收集常见的公共图床]]></title>
      <url>/archives/collection-of-image-hosting.html</url>
      <content type="html"><![CDATA[<p>为了节省带宽和流量、减少自己服务器的负载、加速网站图片的加载，站长一般会使用专门的图床或者 CDN 服务加载图片。本文就汇总介绍一下我所知道的公共图床，以及我对它们的评价。</p>
<a id="more"></a>
<p>如果你想查看一下以下图床是否适合你当地的网络环境，你可以访问这个 <a href="https://lab.nfz.moe/image-hosting.html" target="_blank" rel="external"> 测试页面</a></p>
<h1 id="公共图床"><a href="# 公共图床" class="headerlink" title="公共图床"></a>公共图床</h1><blockquote>
<p>注意！在使用这些公共图床之前，强烈建议阅读这些网站的 TOS（如果有的话）。公共服务运营不易，希望大家珍惜。</p>
</blockquote>
<h2 id="微博图床"><a href="# 微博图床" class="headerlink" title="微博图床"></a>微博图床 </h2><p> 微博图床堪称国内图床的中流砥柱，很多站长都在用。各种插件和在线上传都层出不穷，使用起来很方便。</p>
<ul>
<li>速度：国内国外都非常快</li>
<li>CDN：国内分别接入使用了蓝汛、网宿、阿里云 CDN、加速乐等，在国外使用了 Akamai CDN、Tierra.Net 的 CDN 等</li>
<li>HTTPS：支持（不完全支持 HTTP2，得看你被解析到了哪个服务商的节点）</li>
<li>域名：<ul>
<li><code>ww1.sinaimg.cn</code> <code>ww2.sinaimg.cn</code> <code>ww3.sinaimg.cn</code> <code>ww4.sinaimg.cn</code></li>
<li><code>wx1.sinaimg.cn</code> <code>wx2.sinaimg.cn</code> <code>wx3.sinaimg.cn</code> <code>wx4.sinaimg.cn</code></li>
<li><code>ws1.sinaimg.cn</code> <code>ws2.sinaimg.cn</code> <code>ws3.sinaimg.cn</code> <code>ws4.sinaimg.cn</code></li>
<li>等等等等。。。</li>
</ul>
</li>
</ul>
<ul>
<li><a href="http://photo.weibo.com/photos/upload" target="_blank" rel="external">上传地址</a></li>
<li><a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/related" target="_blank" rel="external">Chrome 插件</a></li>
</ul>
<blockquote>
<p>微博图床会把你上传的图片转码成 jpg 格式；会提供三种 缩略图、中等大小、接近原图 三种尺寸的图片；通过 Chrome 插件方式上传需要用户登录才能上传；另外，渣浪微博也曝出过 <strong> 在图片上加新浪 logo 水印的行为 </strong>（不过现在已经去除，但不排除使用了肉眼难以辨别的水印）；另外渣浪的图片鉴定服务容易让你上传的图片消失，所以使用起来还是需要谨慎一些<del> 比如不要上传什么维尼熊之类的图片</del>。</p>
</blockquote>
<h2 id="imgur"><a href="#imgur" class="headerlink" title="imgur"></a>imgur</h2><p>这是一家著名的老牌国外图床，2009 年就开始运行了。图片存储稳定可靠。</p>
<ul>
<li>速度：国外真的挺快，不过国内半墙</li>
<li>CDN：FastlyCDN（这家 CDN 的很多节点都被墙了）</li>
<li>HTTPS：支持（不支持 HTTP2）</li>
<li>域名：<code>i.imgur.com</code></li>
<li><a href="https://imgur.com" target="_blank" rel="external">上传地址</a></li>
</ul>
<blockquote>
<p>追求国内访问速度的还是别用了吧，不过这家图床是真的足够稳定可靠。开放有 API（还有支持免费匿名上传图片的 ClientKey 可以申请），也有很多第三方插件可以用。</p>
</blockquote>
<h2 id="sm-ms- 图床"><a href="#sm-ms- 图床" class="headerlink" title="sm.ms 图床"></a>sm.ms 图床 </h2><p> 这是土豪兽兽建的图床，2015 年开始正式运营。</p>
<ul>
<li>速度：<del>现在估计是被滥用了没那么快了 </del> 烧风购买了更多节点、修改了服务架构，现在全球速度还是不错的。</li>
<li>CDN：烧风自建的 CDN，有香港阿里云、DigitalOcean 欧洲和 Linode 北美等节点</li>
<li>HTTPS：HTTP 会被 301 跳转 HTTPS（支持 HTTP2）</li>
<li>域名：<code>ooo.0o0.ooo</code> <code>i.loli.net</code></li>
<li><a href="https://sm.ms" target="_blank" rel="external">上传地址</a></li>
</ul>
<blockquote>
<p>支持 API 操作，图片存储非常可靠，V2EX 钦点的图床。iOS 和 Android 应用 <del> 即将开发完毕</del> 已经分别上架 <a href="https://itunes.apple.com/app/sm-ms/id1268411917" target="_blank" rel="external">iTunes</a> 和 <a href="https://play.google.com/store/apps/details?id=sm.ms" target="_blank" rel="external">Play Store</a>，甚至有第三方做的 Telegram Bot。在众多公共图床中最看好它和 imgur。</p>
</blockquote>
<h2 id="V2EX- 图床"><a href="#V2EX- 图床" class="headerlink" title="V2EX 图床"></a>V2EX 图床 </h2><p> 这是 V2EX 推出的图床服务，需要付费才能使用。</p>
<ul>
<li>速度：全球的速度都还挺不错</li>
<li>CDN：V2 自建的 CDN，东亚地区会解析到台湾节点、国内速度不错。</li>
<li>HTTPS：支持（支持 HTTP2）</li>
<li>域名：<code>i.v2ex.co</code></li>
<li><a href="https://www.v2ex.com/i" target="_blank" rel="external">上传地址</a></li>
</ul>
<blockquote>
<p>V2 图床需要付费才能解锁使用可能会使一些人望而却步，不过这样可以避免被滥用，所以 V2 图床质量还是挺高的。<br>我把必须保证高度可靠外链的图片托管在上面，比如我的友链信息提供的供大家调用的头像和 favicon，都托管在 V2 图床。</p>
</blockquote>
<h2 id="贴图库（不推荐）"><a href="# 贴图库（不推荐）" class="headerlink" title="贴图库（不推荐）"></a>贴图库（不推荐）</h2><p>这个图床曾经被严重滥用，几年前还承诺免费，如今想要长期保存图片已经需要付费了。</p>
<ul>
<li>速度：<del>国内还是足够快的，国外速度很一般</del> 现在只剩下 CloudFlare，还能说什么呢？</li>
<li>CDN：<del>之前用过百度云加速 CDN，现在接入了 CloudXNS 牛盾 CDN 和五五互联的 CDN 服务 </del> <del> 现在又重新启用百度云加速了</del> 现在穷的都开始用 CLoudFlare 了</li>
<li>HTTPS：<del>现在重新接入了百度云加速以后没有启用 HTTPS，怕是为了降低运营成本。</del> 又重新支持了 HTTPS 和 HTTP2，不过是 CloudFlare 的功劳。</li>
</ul>
<blockquote>
<p>免费套餐上传图片只能保存 <del>6 个月</del> 7 天（应国家上级有关部门要求），上传任何图片都需要登录，而且需要付费才能长时间保存。</p>
</blockquote>
<p>贴图库接入的 CDN 很不咋地，天天换域名到处各种蹭云加速，我估计只有傻子才会去买他们的服务。祝愿贴图库早日倒闭。</p>
<h2 id="ONJI- 图床"><a href="#ONJI- 图床" class="headerlink" title="ONJI 图床"></a>ONJI 图床</h2><ul>
<li>速度：国内速度可以，国外就不行了</li>
<li>CDN：百度云加速</li>
<li>HTTPS：支持（不支持 HTTP2）</li>
<li>域名：<code>cdn.onji.cn</code> <code>api.onji.cn</code></li>
</ul>
<p>ONJI 图床的架构很特殊。<del>这个图床有两种使用方式 </del> 现在只剩下一种了。</p>
<ul>
<li><del>在 <a href="https://pic.onji.cn" target="_blank" rel="external">pic.onji.cn</a> 上上传图片，获得链接</del></li>
<li>事先将图片上传到安全可靠的位置，然后使用 API URI：<code>https://api.onji.cn/img/?url=&lt; 原图片的 URL&gt;</code> 加载图片。</li>
</ul>
<blockquote>
<p><del>这个图床的架构是，将用户的图片上传到贴吧或者新浪微博的图床（指第一种使用方法）、或者 </del> 用户自己将图片存储在安全可靠、外网可直接访问的地方，并把原图地址填入 API URL；后端会将图片抓取下来分发、缓存到 CDN 上。<br><del>由于第一种方法相当于将图片交到百度或者渣浪手里，所以也需要谨慎。</del></p>
</blockquote>
<p>由于这个图床被滥用，站长把第一种使用方式关闭了。目前图片抓取和分发的 API 还可以继续使用，大家且用且珍惜吧。</p>
<h2 id="VIM-CN- 图床（elimage）"><a href="#VIM-CN- 图床（elimage）" class="headerlink" title="VIM-CN 图床（elimage）"></a>VIM-CN 图床（elimage）</h2><ul>
<li>速度：国外速度挺快，国内就不行了</li>
<li>CDN：CloudFlare</li>
<li>HTTPS：支持（支持 HTTP2）</li>
<li>域名：<code>img.vim-cn.com</code></li>
</ul>
<p>这是 <a href="http://vim-cn.com" target="_blank" rel="external">vim-cn</a> 提供的图床服务，支持 API 和在线上传，所用程序开源。不过由于使用了 CloudFlare，国内速度就慢多了。图床官网颇有一些年久失修的历史沧桑感，希望不要挂掉。</p>
<h2 id="OOXX"><a href="#OOXX" class="headerlink" title="OOXX"></a>OOXX</h2><p>V2EX 上找到的一家老牌图床，2013 年就开始运营了，不过 2017 年年初才在 V2EX 上发帖。</p>
<ul>
<li>速度：CloudFlare 的网络特点，大家都懂</li>
<li>CDN：CloudFlare</li>
<li>HTTPS：支持（支持 HTTP2）</li>
<li>域名：<code>i.ooxx.ooo</code></li>
<li><a href="https://ooxx.ooo/" target="_blank" rel="external">上传地址</a></li>
</ul>
<p>V2EX 上的介绍说最早是为了收集一些网络图片作为大数据分析和机器学习用的，所以借用机器闲置的带宽搞了这个图床。运营了四年，看起来还会继续运营下去。</p>
<h2 id="PostImage"><a href="#PostImage" class="headerlink" title="PostImage"></a>PostImage</h2><ul>
<li>速度：国外速度杠杠的，国内别被墙就好</li>
<li>CDN：AdvancedHosted CDN</li>
<li>HTTPS：支持</li>
<li>域名：<code>s1.postimg.org</code> <code>s2.postimg.org</code> 等。</li>
<li><a href="https://postimages.org" target="_blank" rel="external">上传地址</a></li>
</ul>
<p>PostImage 图床的介绍说是为了方便用户在 Facebook 和 Twitter 上传图。这个图床用的 CDN 服务商不太有名。</p>
<h2 id="UPLOAD-CC"><a href="#UPLOAD-CC" class="headerlink" title="UPLOAD.CC"></a>UPLOAD.CC</h2><ul>
<li>速度：看下面一条用的 CDN</li>
<li>CDN：CloudFlare</li>
<li>HTTPS：支持</li>
<li>域名：<code>upload.cc</code>。</li>
<li><a href="https://upload.cc" target="_blank" rel="external">上传地址</a></li>
</ul>
<p>这个图床是香港人开的，TOS 写的挺详细的。提供了 Android 版 APP（Google Play 上可下载），还提供有 Chrome 和 Firefox 的插件，挺方便的。</p>
<h2 id="ImgSafe"><a href="#ImgSafe" class="headerlink" title="ImgSafe"></a>ImgSafe</h2><ul>
<li>速度：看下面一条用的 CDN</li>
<li>CDN：CloudFlare</li>
<li>HTTPS：支持</li>
<li>域名：<code>i.imgsafe.org</code>。</li>
<li><a href="https://imgsafe.org" target="_blank" rel="external">上传地址</a></li>
</ul>
<p>国外一家图床，网站首页有写着累计有图片托管在这个图床。不过 <em>据说</em> 偶尔会发生图片丢失的情况；大家自己权衡一下吧。还有要注意的就是这个图床仅能通过拖动的方式上传图片，所以手机上就没法传图了。</p>
<h2 id="ImgBox"><a href="#ImgBox" class="headerlink" title="ImgBox"></a>ImgBox</h2><ul>
<li>速度：实在不敢恭维，估计只有在北美地区的访客才能保证最快的速度</li>
<li>CDN：两台位于美国的 Leaseweb 的服务器</li>
<li>HTTPS：支持</li>
<li>域名：<code>i.imgbox.com</code>。</li>
<li><a href="https://imgbox.com" target="_blank" rel="external">上传地址</a></li>
</ul>
<p>虽然用的服务器挺一般，但是毕竟也是一家国外老牌图床了。自 2010 年起开始运营以来，已经托管了上百万张图片，看起来还是令人放心的。</p>
<h1 id="非“公共”的图床"><a href="# 非“公共”的图床" class="headerlink" title="非“公共”的图床"></a>非“公共”的图床</h1><blockquote>
<p>由于是“非公共”图床，被滥用的可能性比公共图床要小很多，服务质量自然也相对较高。不过正因为这种灰色地带，让你上传的图片的安全和稳定性得不到保证。自行权衡一下吧。</p>
</blockquote>
<h2 id="奇虎图床"><a href="# 奇虎图床" class="headerlink" title="奇虎图床"></a>奇虎图床 </h2><p> 发现这个“图床”纯属偶然，我打开 <code>firekylin.org</code> 以后习惯性的按下 F12。然后我发现页面的背景图片所在的域名是 <code>p3.ssl.qhimg.com</code><br>我知道 FireKylin 是奇虎 360 最大的前端团队 奇舞团 开发的博客系统，所以这可能是他们内部有的图床接口。<br>不过后来，我在 360 的其它网站，都看到了类似的域名，说明这个图床是也有对外接口的。</p>
<ul>
<li>速度：全球的速度都很好</li>
<li>CDN：奇虎自己的 CDN，部分节点和网宿合作</li>
<li>HTTPS：支持（支持 HTTP2）</li>
<li>域名：<ul>
<li><code>p1.qhimg.com</code> <code>p2.qhimg.com</code> <code>p3.qhimg.com</code> 等等</li>
<li><code>p1.qhmsg.com</code> <code>p2.qhmsg.com</code> <code>p3.qhmsg.com</code> 等等</li>
</ul>
</li>
</ul>
<blockquote>
<p>在这些域名的前端散列符和根域名之间加上 <code>ssl</code>，如 <code>p1.ssl.qhmsg.com</code>，即可支持 HTTPS 和 HTTP2。</p>
</blockquote>
<p>公开上传接口：位于 <code>wenda.so.com</code> <code>bbs.360.cn</code>。建议通过后者上传图片，一天只能上传 20 张图片，上传图片的方法就是在 360 论坛（Discuz 驱动）的发帖页面上传图片并插入帖子中，然后右键获得图片地址。</p>
<blockquote>
<p>你如果是坚持抵制奇虎 360，你大可以不用这个图床。奇虎的这个图床并不公开，没有像微博图床一样被滥用，所以无需担心有过于严格的审查；图片托管在奇虎图床的风险相比微博图床是要低的，也没有发生过图片丢失的情况。</p>
</blockquote>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>GitHub 一直拥有各种奇怪的用途，被发掘出来当图床也见怪不怪了。</p>
<ul>
<li>速度：国内可以接受，海外速度很快</li>
<li>CDN：Fastly CDN，几个节点在国内都解禁了的</li>
<li>HTTPS：支持（似乎不支持 HTTP2）</li>
<li>域名：<code>user-images.githubusercontent.com</code></li>
</ul>
<p>上传方式是新建一个 Repo，然后在 Issue 中传图（直接将图片拖动到 issue 输入框即可），GitHub 会将你的图片分发到 GitHub 用的 CDN 中。</p>
<blockquote>
<p>这和使用 GitHub Raw 需要 GitHub 的服务器动态生成文件不同，user-image 这个子域名是 GitHub 专门为静态文件准备的，不会让当年某某抢票助手 CC GitHub 的事情重现的。<br>当然，这个接口不是公开的。还有，请善待 GitHub。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 分享镜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 图床 </tag>
            
            <tag> 公共图床 </tag>
            
            <tag> 免费资源 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HexoKit——为国内环境优化的 Hexo 一键安装方案]]></title>
      <url>/archives/hexokit-intro.html</url>
      <content type="html"><![CDATA[<p>最早萌生这个想法，是因为 Material 主题的群里有人不会安装 Hexo，亦或者是因为卡在安装过程太久。所以，我决定解决 Hexo 安装过慢的问题，向大众“普及” Hexo。</p>
<a id="more"></a>
<p>首先让我们重新阅读 Hexo 的官方文档，重新了解如何安装 Hexo，就可以了解是哪一步出了问题。</p>
<h1 id="依赖下载太慢"><a href="# 依赖下载太慢" class="headerlink" title="依赖下载太慢"></a>依赖下载太慢 </h1><p> 安装 Hexo 的第一步自然是全套的依赖。Git 和 NodeJS 一个都不能少。在 Linux 上，实在不行直接换包管理器的源就可以解决 Git 的安装问题。不过对于异端的 Windows，就是另一个故事了。</p>
<p>对于 Git for Windows，现在 Hexo 官方文档是这么说的：</p>
<blockquote>
<p>由于众所周知的原因，从上面的链接下载 git for windows 最好挂上一个代理，否则下载速度十分缓慢。</p>
</blockquote>
<p>不过这个问题好解决。Github 上 <a href="https://github.com/waylau/git-for-win" target="_blank" rel="external"> 这个项目 </a> 有 Git for Windows 的国内镜像。</p>
<h1 id="NPM- 源半墙"><a href="#NPM- 源半墙" class="headerlink" title="NPM 源半墙"></a>NPM 源半墙 </h1><p><code>https://registry.npmjs.org/</code> 是 NPM 的官方源镜像，部署在 Fastly CDN 上。嗯，别看 Fastly CDN 的节点的超时过得去，实际上却时刻处于半墙状态。这也就是是为什么从 NPM 官方源下载并安装依赖非常缓慢了。<br> 当然解决方案就是使用国内的镜像源。淘宝或者 CNPM 的源都挺好；中科大的源次之。我们可以使用 <code>npm config set registry</code> 指令换源。</p>
<h1 id="GitHub- 半墙"><a href="#GitHub- 半墙" class="headerlink" title="GitHub 半墙"></a>GitHub 半墙 </h1><p> 据说在严重抗议下，Github 也算是解封了。不过，直连并使用 HTTPS 协议 <code>git clone</code> 时的速度依然让人难以忍受。<br>Hexo 默认主题 landscape 是托管在 Github 上的，clone 的指令是内置在 <code>hexo-cli</code> 的 <code>install.js</code> 中的。这个时候就算 npm 换源，这一步也绕不过去。看着 5kb/s 的 clone 速度也足够让我们对着 GFW 爆粗了。</p>
<h1 id="解决方案"><a href="# 解决方案" class="headerlink" title="解决方案"></a>解决方案 </h1><p> 所以，知道了是哪里出了问题，解决方案就很简单了。<br>对于 Git 下载服务器被墙的问题，我们可以用镜像站解决；NPM 源被墙的问题，我们可以通过换源的方法解决；但是从 Github Clone 默认主题倒是一个很难绕过去的坎。</p>
<p>所以，让我们分析下 <code>hexo init</code> 会执行哪些操作。<br>执行 <code>hexo init</code> 时，<code>hexo-cli</code> 会在指定目录生成 Hexo 工程文件所需要的目录，如 <code>scaffolds</code>、<code>drafts</code>、<code>public</code> 等目录、<code>.gitignore</code>、<code>db.json</code>、<code>_config.yml</code> 等文件，并生成依赖列表 <code>package.json</code>。然后会根据 <code>package.json</code> 安装 Hexo 自身、安装基本插件和其它依赖如 markdown 解析器、主题语言解析器、页面生成器等。然后就是 clone 主题到 <code>theme/landscape</code> 目录下，Hexo 初始化过程结束。</p>
<p>所以，根据之前改造 Hexo 的工程文件实现 CI 持续集成的经验，我们会发现之前生成目录到生成依赖列表 <code>package.json</code> 这些文件都是可以直接从 Repo 中拉下来直接用的。</p>
<blockquote>
<p>因为 <code>hexo init</code> 中 <code>install.js</code> 过程不能被介入，所以我们只能绕过 <code>hexo init</code>。</p>
</blockquote>
<p>我在本地执行完 <code>hexo init</code>，在初始化好了的 Hexo 工程文件目录下执行 <code>git init</code>，分别推送到 Github 和 OSChina 的公共 Repo 中。<br>所以，现在 <code>hexo init</code> 将会被下述指令替代：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://git.oschina.net/neoFelhz/hexokit.git
<span class="token function">npm</span> <span class="token function">install</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>现在我把所有步骤写进一个 shell 中，用户只需要在 Git Bash 中执行下述指令即可快速完成 Hexo 的全部安装：</p>
<pre class="line-numbers language-bash"><code class="language-bash">curl http://git.oschina.net/neoFelhz/hexokit/raw/master/install.sh <span class="token operator">|</span> sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个脚本中包含了了以下指令：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org
<span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g
<span class="token function">git</span> clone https://git.oschina.net/neoFelhz/hexokit.git
<span class="token function">rm</span> install.sh
<span class="token function">cd</span> hexokit
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org/
hexo version
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一步将完成 <code>hexo-cli</code> 的安装和初始化一个 Hexo 工程文件的操作。用户只需要安装好 NodeJS 和 Git 后即可在需要安装 Hexo 的目录下执行即可。</p>
<blockquote>
<p>HexoKit 项目 Repo 地址：</p>
<ul>
<li>Github：<a href="https://github.com/neoFelhz/HexoKit" target="_blank" rel="external">https://github.com/neoFelhz/HexoKit</a></li>
<li>OSChina：<a href="https://git.oschina.net/neoFelhz/hexokit" target="_blank" rel="external">https://git.oschina.net/neoFelhz/hexokit</a></li>
</ul>
</blockquote>
<p>HexoKit 需要我每月定时在本地执行一次 <code>hexo init</code>，以更新 Repo 中的目录结构和 <code>package.json</code>。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> HexoKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[真正的自由？——从杨舒平的演讲来谈中国和言论自由]]></title>
      <url>/archives/my-view-of-freedom.html</url>
      <content type="html"><![CDATA[<p> 在前天，也就是那个特殊的日子的前一天晚上，我和几个同学彻夜长谈。我们谈了很多东西，我思绪万千，所以我决定写点东西出来。</p>
<a id="more"></a>
<p> 让我先从端午节的辱华演讲说起吧。</p>
<blockquote>
<p> 顺便说一句，辱华演讲这个事情出来以后，很显然中国国内的媒体就这两个反应：要么洗白国内的空气，要么就是有组织有意识地引导舆论批判杨舒平。为了获得一个更客观的认知，我在 YouTube 上看了完整的视频，看了维基百科对该事件的介绍，甚至还浏览了一些著名反华势力的媒体的新闻。</p>
</blockquote>
<p> 杨舒平的演讲是以“国外的空气都是甜美的”一句话开场的，然后用美国的空气和中国的空气进行对比，然后比对了两国的“空气”：美国开放自由的环境和中国压抑的环境。<br> 不知为何，这个演讲被断章取义之后就成了“辱华演讲”。</p>
<p> 嗯，那就让我先从杨舒平口中的空气质量说起吧。</p>
<p> 首先，无论如何，你必须承认，中国国内现在的空气质量就是不如美国。因为，美国已经走过了这一段道路。</p>
<blockquote>
<p> 在几年前，我曾阅读过《洛杉矶烟雾启示录》一书，这本书详细的介绍和审视了自 1943 年出现在洛杉矶的雾霾、到 1963 年蓝色的有毒烟雾弥漫、到上个世纪 80 年代彻底解决空气质量问题这一段时间里，洛杉矶政府的政策和美国公民的生活。</p>
</blockquote>
<p> 最早出现严重空气污染的城市是第一次工业革命的发源地——“雾都”伦敦。直到 19 世纪末，伦敦才彻底摘掉“雾都”的帽子。美国的洛杉矶和丹佛治理空气也花了 30 年。我们必须承认，治理空气需要努力，但不是北京市政府拍拍胸脯说几年就可以搞定的。这个是一个艰苦卓绝的过程。我们要做的就是正视这个事实，然后坦然接受这个事实，然后开始努力。</p>
<blockquote>
<p> 而不是像清华的校长在演讲中说，“我就是觉得国内的空气甜美”。那是您运气不错，端午节前十天左右一场大风，把帝都的雾霾吹散了。</p>
</blockquote>
<p> 当然，我不仅仅只是谈空气的问题。杨舒平举这个例子，是为了谈美国的自由。在杨舒平眼里，美国是一个充斥着开放和自由的空气的国度，在美国你可以较为自由地发表一些观点。而在中国要处处拘谨，甚至要担心触动利益被迫离开中国。</p>
<blockquote>
<p> 柴静，著名的媒体人。《穹顶之下》这部纪录片揭露了山东临沂和国内其它“重灾区”的空气问题。如今，《穹顶之下》因为触动了多方利益，已经全部禁播。</p>
</blockquote>
<p> 对于我们这些生活在下层的人民，对于“言论自由”，可能领会的更深刻一些。<br> 首先是赵薇事件。我去年三月份是在新浪微博亲身经历过这个事件的。赵薇一人就敢买通百度搜索引擎，买通整个渣浪微博，严格压制全网的言论，连共青团中央发声的微博都会被屏蔽和删除（twice）。网民自然就要想了：上不了谷歌我认了，土共太强大；但是你个下九流都能控制言论，这可不能忍。</p>
<p> 这本是件无足挂齿的小事，一开始大家其实并不怎么在意，但是在事件发展的过程中赵薇团队却意外的向我们展示了资本的真实面目：赵薇背后势力庞大，我们本来就知道，但我们不知道的是这些势力在民意面前如此肆无忌惮。<br> 别人我不清楚，至少我感到了深深的恐惧。中国大陆言论自由的界限是政府画的，还好它画的很宽，就那么几条红线，所以我们平日里一般的言论是相对自由的。然而，资本家公然控制言论的行为还是令人震惊的。</p>
<p> 说到政府的红线，我们自然是想到搜索引擎的“根据相关法律法规”，著名的防火长城。嗯，当然现在还多了一条，今年六月一日开始生效的中国国家网络安全法。</p>
<blockquote>
<p> 现在的国家网络安全法就有那么几条，比如现在的网民必须实名，至少绑定手机号；经营博客、论坛类业务也必须备案。原因很简单，控制言论呗：谁造谣，谁搞事，就抓谁。当然我也必须承认，实名的好处是有的，至少微信朋友圈（著名造谣圈）里的类似于 水洗肉松 和 塑料粉丝 的言论将会受到制裁、基站辐射之类的谣言也有望得到整治。</p>
</blockquote>
<p> 之所以在这个日子感慨万千，原因很简单——二十几年前的那一天，可以是正式宣告中国的言论自由被压制。</p>
<p> 当然，对于网民来说，印象深刻的，还是防火长城。</p>
<blockquote>
<p> 那还是 2011 年， Google 暂时妥协了中国政府的要求，禁止用户搜索一些敏感词汇（甚至包括“胡萝卜”“学习”“温度计”），再后来就是 Google 拒绝妥协，并主动离开了中国。</p>
</blockquote>
<p> 政府压制言论自由是有他们的原因的，我们要客观理性的对待，这一点我之后会再谈我自己的看法。不过，政府造墙，一个副作用就是给反华势力提供了机会。</p>
<ul>
<li> 赛风，著名的翻墙软件，联通他们的境外服务器后会首先弹出一个境外反华势力的媒体网站。</li>
<li> 蓝灯，由国外反华势力赞助。</li>
<li>GreatFire 旗下的自由浏览器，其主页是一个充斥着反华媒体新闻的主页。</li>
<li>. . . . . .</li>
</ul>
<p> 反华势力热衷于不遗余力地对那些能够初级翻墙的中国国民进行洗脑。</p>
<blockquote>
<p> 比如我的生物老师竟然都相信活摘器官，当初听他讲选修课时提到这个令我胆战心惊。再比如被压制下来的广州高考模拟题中英语科目试卷七选五部分竟然出现介绍 神韵 的文章。不得不承认，反华势力为了颠覆中国，是不遗余力和不择手段的。</p>
</blockquote>
<p> 反华势力想搞翻中国，并不是单纯想看着好玩的。他们自然背后有他们的利益相关。至于那些欧美国家，则选择将这些反华势力作为和中国谈判的筹码（比如给达赖五世发个诺贝尔和平奖恶心中国一下）。反华势力背后更有势力和财力，赞助一些低级 FQ 工具来推广那些反华势力的信息，自然是可以理解的了。</p>
<blockquote>
<p> 我们当然也要认识到，欧美国家的这些举措不过是外交伎俩，并不能完整代表欧美国家的立场。中国是世界贸易中重要的一部分，是不可或缺的。</p>
</blockquote>
<p> 那么为什么中国政府需要一道长城来压制我们的获取外部信息的渠道？要知道，就连北邮前校长方滨兴曾经都发言承认说我们不应该墙一些学术类网站和 Play 商店之类的服务。</p>
<p> 我另外举一些例子来说明一下吧。</p>
<p> 为什么水洗肉松、塑料粉丝为什么会有人信？还有小区基站。多少小区的大爷大妈写联名信、拉横幅、搞游行要求拆除基站，宣称辐射？渣浪微博上甚至有人造谣说他所在的公司在基站附近工作，竟然一半的员工患上甲状腺癌。<br> 对了，还有变电站。天津一个小区要求不能在小区附近建设高压变电站，担心辐射。今年年初还有听说华北某地区正在计划要修新的核电站（微博上看到的，具体位置不记得了），甚至引发了闹事。我想，这个工程应该是已经被搁置了。<br> 还有 B 超。有人宣传给孕妇做 B 超会破坏水分子诱发癌症。微博上还有人说汽车尾部的车距激光定位装置的红光能割伤手，甚至有人信誓旦旦出来作证，“展示被激光割伤的伤口”。<br> 当然还有就在我写本文时刚刚被渣浪微博禁了 30 天的崔永元，他有一批忠实的粉丝坚持和他反转基因，那些粉丝还跟着崔化钠攻击微博大 V、渣浪微博的老总来去之间，连共青团和紫光阁都不放过， 崔永元甚至骂过上合组织是草台班子、还直面攻击网信办。</p>
<blockquote>
<p> 当然，我再提提我自己的亲身经历：我在 Google Play 商店的一个付费应用下面看到一条评论，那个人说他在吾爱破解上面花了两块钱买了个破解版，为此洋洋得意（我就不对这种行为做评论吧）；联想起曾经闹得沸沸扬扬的中国旅客在境外的不文明、低素质行为，我有时会这样感叹：“你国人民还是别翻出去丢人现眼比较好”。</p>
</blockquote>
<p> 当然，主要并不是丢脸的问题。丢脸事情小，丢命事情大。</p>
<p> 为什么法轮功能够影响巨大，让共产党和中国政府如此忌惮不已？因为有人相信。教徒们信法轮功，就像现在一些人相信转基因有毒、基站辐射能致癌一样。<br> 他们矢志不渝地相信这些、本来是高中甚至是初中课堂上学到的知识、就能解释和辟谣的言论，甚至为这些我们看起来很荒唐的言论进行辩护（可以看看崔永元的微博下面他的粉丝的为反转基因的无脑洗地，或者去关注一下最近微博上因武汉理工大学发生砍人事件而怼微博大 V 的那些“武理取闹”的学生们）。<br> 所以，这就是为什么邪教这么可怕。</p>
<p> 所以，GFW 之所以存在，是有他的意义和作用的。</p>
<blockquote>
<p> 现在的初高中义务教育实验是 2002 年开始的。让我们想一下，在 2002 年开始接受新课标改革后的学生是刚刚小学毕业步入初中的，那么他们现在也才 27、28 岁左右，暂时不能在这个社会上占据主导地位。你应该知道我说的是什么意思。</p>
</blockquote>
<p> 政府为言论自由划定红线、不惜高昂代价架设 GFW，其目的是为了维持中国的稳定、维护中国的安全。<br> 华夏民族是一个农耕民族。农耕民族的特点是偏安、保守、内敛的，不喜欢突破条条框框、不喜欢对外扩张，甚至对于创新都有些畏畏缩缩。而欧美国家的传统是开放而又自由的。中国是一个历来喜欢造墙的民族，这是两个国家的意识形态的不同、决定了中国和欧美国家的走向的不同导致的。这一不同从而又决定了国家的制度不同。中国有 13 至 14 亿人口，中国要发展，最需要的是稳定。中国的这种中央集权制度最适合中国目前的国情，因为这种制度不仅稳定，而且高效。</p>
<p> 中国不能长期与世隔绝。闭关锁国的后果已经成为了前车之鉴。随着中国经济的不断发展，随着国民精神文明素质和知识水平的不断提高，最终很多东西都会解封，很多东西会浮出水面。和治理空气污染一样，这需要我们的努力，这也是一个时间问题。</p>
<blockquote>
<p>MDN 和 Google 开发者网站已经回到中国了；Google 翻译在国内已经可以访问了；Google Analytics 和 Google 字体库也已经解封了。</p>
</blockquote>
<p> 最后，让我引用著名 FQHosts 维护者 racaljk 的项目 Wiki 中的那段话做结尾，也感谢诸位看官能耐住性子看到这里。</p>
<blockquote>
<p> 网络审查在各个国家都普遍存在着，它并不仅存在于中国。在全球的局势对中国都不利的当下，当局会过滤掉影响、危害到中国长远发展的信息，此时国家安全的意义更加重大。<br> 互联网上存在着大量终究不现实的、不客观的，甚至自相矛盾的抹黑当局政府言论，它们背后一般有西方政府或非政府组织资金支持。这些媒体包括但不限于一些港媒、境外网站。<br> 我们希望您能在遇到此类言论和见解时，不要不加思考地、情绪一度被煽动而不能克制地、盲目地相信这些片面或者歪曲事实的东西，而是要事实求是地思考，要摆脱情绪绑架的怪诞思维去理解。<br> 我们需要了解到，中国的发展总基调是“稳中求进”，中国社会的最核心问题就是稳定。失去稳定的中国将会是一盘散沙，面临分裂和肢解的危险。我们希望您了解当今中国发展的根本保证是什么，发展的过程中哪部分是主旋律，哪些是噪音；哪些是进取的，哪些是会开历史倒车的。<br> 我们应该清醒和全面地认识问题，偏信西方媒体的言论、缺乏对国家的信任是不可取的。您的数据安全和隐私对您尤为重要。若这些信息不应当被西方掌握时，它对国家和民族的命运更为重要。出于此原因，当局可能会限制您的行为，我们不会也无法干预当局的任何政策和决定。<br> 所以，我们希望您在使用此服务时，不要盲目地攻击当局的做法。</p>
</blockquote>
<p>——<a href="https://u.nu/e5j" target="_blank" rel="external">《关于中国的互联网》</a></p>
]]></content>
      
        <categories>
            
            <category> 自言语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一场向死而生的征程？——我是这么理解 「Green Android」的]]></title>
      <url>/archives/my-view-of-green-android.html</url>
      <content type="html"><![CDATA[<p>黑云蔽空，极夜将至，风雷涌动，没有雨。 在寂寞中奔驰的猛士啊，在暂时无人慰藉你之前，请不要惮于前驱。<br>——题记</p>
<a id="more"></a>
<p>什么是 Android 「绿色应用公约」？这是公约的内容：<a href="https://green-android.org/app-convention.html" target="_blank" rel="external">https://green-android.org/app-convention.html</a><br>还有，这是冯老师的 <a href="https://zhuanlan.zhihu.com/p/26689473" target="_blank" rel="external">《从守护到公约，向死而生的新征程》</a> 一文。这篇文章介绍了冯老师对他自己想要缔造的一个生态的理念。<br>显然，冯老师提出的「绿色应用公约」引发了很多人的讨论，也引发了很多争议。我身边的一些搞 Android 开发的人有的也已经开始准备接入冯老师的 <code>Condom</code> SDK，也有申请绿色应用认证的（其中一些应用已经通过认证了）。面对「绿色应用公约」、引爆 Android 开发界的“炸弹”，我来谈谈我自己的看法。</p>
<p>首先，可能到最后才轮到会有 BAT 这些老牌的毒瘤剧透遵守公约。这些巨头们辛辛苦苦开发出 XGPush（信鸽推送）、MiPush（小米推送）、HWPush（华为推送）、Umeng（友盟毒瘤 SDK）等等这些东西并让其它开发者接入，一时半会是不会抛弃的。</p>
<blockquote>
<p>当然，这是一套方案。这是手机厂商和应用厂商为统一推送接口做出的努力。可惜，最后到达用户手上的，却是链式唤醒的恶果。<br>我记得，工信部之前一直在搞有关的大新闻。比如搞什么“工信部评选六大安全应用商店”，还有华为、工信部共同牵头的“安卓绿色联盟”。我想，这样的绿色联盟，也不过是为了继续统一管理接口、管理厂商，最终改善用户体验。<br>为了防止这些组件造成的链式唤醒，冯老师也开发了 <code>Condom</code> SDK。</p>
</blockquote>
<p>然而，这并不妨碍本次呼吁是一次极具意义和价值的重要呼吁。公约的提出对于整个 Android 的生态如同一记重锤。公约提出了一个观点——就是如果应用规范自己的行为、合理利用 Android 系统的各种接口、框架，不用那些尽力让后台保活、注册一堆广播 Receiver 和 Service，转而去尊重用户的整体体验，是利大于弊的。</p>
<blockquote>
<p>现在一些开发者（主要是 BAT）往往觉得如果选择不“成为毒瘤”，自己的利益会受损。然而现在一个很显著的趋势，就是国内各家厂商定制系统对于后台的控制都越来越严格。要是你的应用费尽心思搞的“流氓行为”在这些系统上，如果不进白名单会死的很惨。更别提还有各种手机管家，对于折腾 Android 的人来说还有黑域、绿色守护这一些神器。是的，包括冯老师开发了的绿色守护。</p>
</blockquote>
<p>像 BAT 的这种流氓行为实际上是不受用户待见的。大多数用户是不了解 Android 机制的，但是用户会把手机的卡顿、耗电归结于毒瘤，导致卸载甚至差评等行为，这是应用开发者最不愿意看到的。<br>在用户和毒瘤的战斗中，手机厂商也是一个很重要的角色。比如微信和支付宝还有 QQ，大家都离不开。如果在手机上这些应用引起卡顿，用户会把锅丢给手机厂商的。这时候厂商不得不从自己定制的 UI 出发，不断加强对进程和后台的限制。</p>
<p>而「绿色应用公约」的提出，相当于向开发者们强调：你无论多么暴力地企图保活进程、无论多么试图自启和推送各种广告，最终只会换来用户的反感，得不偿失。</p>
<p>「绿色应用公约」提出最大的影响就是，让一部分有良知有担当的应用主动去除对体验的破坏，让自己的应用支持「绿色应用公约」，手机厂商内置的 OEM 的安全中心类优化功能会对支持公约的应用放宽限制，例如不再强杀进程、允许长周期的后台任务、放宽对某些合理事件的自启动限制。最后这是一场良性循环。<br>而对于用户而言，这样一种公约无疑成为了一种评判标准。追求设备使用体验的用户将会倾向于安装和使用已经支持了「绿色应用公约」的应用，最终将会为这些应用带来更大的利益，最后依然是一场良性循环。</p>
<blockquote>
<p>当然，这个趋势肯定不是从 BAT 开始的，毕竟他们的提供了用户无法割舍的服务。所以公约能带来的价值可能还不及对它们的束缚。但对于中小应用，以及行业其它阵线的挑战者就不同了。他们中作为行业中的先知先觉者的那一部分，就会意识到即将到来的问题并开始行动。当用户知晓并转投这些产品中，那么顶部的巨头就会受到撼动。</p>
</blockquote>
<p>目前，「绿色应用公约」推行非常顺利。冯老师和很多手机 OEM 厂商的开发者进行了沟通，很多开发者也表示支持，就连华为的“安卓绿色联盟”都对「绿色应用公约」表态支持。</p>
<blockquote>
<p>是的，这是一个信号。以各巨头统一推送渠道为基础的“安卓绿色联盟”和以“后台纯净<br>”为基础的「绿色应用公约」如果达成共识，这将会是国内 Android 生态的一场动荡，将会引发巨变。</p>
</blockquote>
<p>如果，「绿色应用公约」能够推行下去，从用户、神器的作者、手机厂商，再到 BAT 这样的巨头。如此良性循环地发展，最终国内令人诟病的 Android 生态将会得到改变。</p>
<hr>
<p>如何看待一些人对「绿色应用公约」的反对意见？<br>这不置可否。毕竟如今毒瘤横行的国内 Android 生态是一种僵局，打破这个僵局的确并不容易。单单靠一个公约，或许不能改变整个生态。但是，我们必须试着去努力，不是么？<br>所以，像 piebridge 这种继续试图魔高一尺、道高一丈地压制毒瘤，只会让毒瘤继续尝试突破。最终两败俱伤，国内 Android 生态只会继续恶化。<strong>是的，使用黑域这类软件，对改善国内 Android 生态毫无意义。</strong><br>对于 piebridge 唱衰通过破坏毒瘤的组件完整性的优化方案的行为，例如绿色守护基于 Intent Filter Wall 的处方，例如 MyAndroidTools。是的，很多开发者都不喜欢它们，而且，我也不喜欢它们。虽然我是 <a href="https://mat.letitfly.me" target="_blank" rel="external">MAT BBS</a> 的管理团队成员，MAT BBS 是一个讨论 MyAndroidTools 禁用方案的论坛。但是，如果我们能最终改善国内 Android 生态，让各种神器最终一无是处，此时，还需要诟病破坏组件之类的么？同样，你黑域破坏应用的国内推送渠道，相比绿色守护用“后台纯净”同时保障用户体验和厂商推送，不也是破坏应用的组件和功能完整性？</p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 省电 </tag>
            
            <tag> 生态 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[魅族系统截图被附上全屏二维码水印，其中包含设备信息·转载]]></title>
      <url>/archives/meizu-qrcode-screenshot.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>原作者：<a href="http://www.jianshu.com/u/f5f26e7f4133" target="_blank" rel="external">Pandaria98 - 简书</a></li>
<li>原文链接（发表于简书）：<a href="http://www.jianshu.com/p/a1119d547f3d" target="_blank" rel="external">魅族系统截图被附上全屏二维码水印，其中包含设备信息</a></li>
<li>原作者 · 知乎：<a href="https://www.zhihu.com/people/wu-ling-jiang-71/activities" target="_blank" rel="external">执夷 - 知乎</a></li>
<li>原作者 · MAT BBS：<a href="https://mat.letitfly.me/?4414" target="_blank" rel="external">Pandaria - MAT BBS</a></li>
</ul>
<blockquote>
<p>特殊注明：本文著作权和解释权由简书作者 Pandaria 所有，<strong>原作者保留一切权利 </strong>，本博客仅在接受授权后予以完整转载，并无二次演绎。<strong> 本文不受本博客 CC BY-NC-SA 3.0 Unported 协议的限制</strong>。</p>
</blockquote>
<hr>
<p>本人在使用魅族手机 (原生 Flyme 系统) 的过程中，发现偶尔在一些网站上发布自己的手机截图后，图片会出现奇怪的色块。同时，其他魅族手机发布的截图中，也有类似的情况 (<strong> 为保护隐私</strong>，本文所有二维码主体部分使用白色色块遮挡，可从四角的二维码定位点判断出这确实是二维码)：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9e41d3.png" style="width:50%" alt="0000100.png"></p>
<p>起初我以为这只是图片在上传过程中发生的压缩导致的一些画质损失，但最近在某消息的提醒下发现，实际上图片上的色块并不是画质损失导致的，而是图片实实在在的被打上 <strong>全屏二维码水印 </strong>，将以上的图片进行调色处理后，二维码的图像变得明显(<em> 具体的还原步骤在文末</em>)：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9c8f6c.png" style="width:50%" alt="0000101.png"></p>
<p>在 <strong> 反色 </strong> 之后，它就是一个实实在在的二维码了：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce99822b.png" style="width:50%" alt="0000102.png"></p>
<p>识别结果是(为保护隐私，本文字符串中部分字符用「*」号代替)：</p>
<pre><code>#192#168#0#115#,460013*****8248#A10ABN****3H#m1metal
</code></pre><p>稍加分析，可以容易的判断出：</p>
<ul>
<li>前四串字符是 IP 地址，这里是一个内网 IP</li>
<li>第五串字符是 IMSI 码，类似 IMEI，用于标识 SIM 卡</li>
<li>第六串字符是魅族设备的序列号</li>
<li>最后一串字符是魅族设备的型号</li>
<li>关于 IMSI</li>
</ul>
<p>我对于 IMSI 也是知之甚少，这里将我通过搜索引擎的来的结果列于下方(不保证准确)：</p>
<ul>
<li>IMSI 与 手机号码 没有必然的对应关系</li>
<li>IMSI 在到达运营商的交换机才可知道与 手机号码 相应的对应关系</li>
<li><strong>可能 </strong> 存在通过 IMSI 得到地域位置的算法</li>
</ul>
<p>另外，在探索过程中，在魅族社区找到了这样一张图：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9d096e.png" style="width:50%" alt="0000103.png"></p>
<p>经过同样的步骤还原之后，得到了这样一张二维码：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9c7046.png" style="width:50%" alt="0000104.png"></p>
<p>识别结果是：</p>
<pre><code>#---#---#---#---#460011*****2453#95AQACQ****M7#MX6#
</code></pre><p>结果完全类似，只是由于可能是断网截图，IP 信息被留空了。<br>那么问题就来了，这种现象到底是不是个例呢？</p>
<p><strong>不是，它是完全可以被复现的。</strong></p>
<p>复现的方法非常简单，只要截图的背景颜色较深，就会出现二维码水印。而浅色背景的截图则不会出现二维码。</p>
<blockquote>
<p>注：以下测试基于本人自己的手机</p>
</blockquote>
<ul>
<li>机型：魅族 PRO 6</li>
<li>固件版本：Flyme 6.0.2.0A</li>
<li>这是截至本文发布，魅族官网上 PRO 6 的稳定版固件的最新版本：</li>
</ul>
<p><img src="https://i.loli.net/2017/08/21/599afce9b9e17.png" alt="0000105.png"></p>
<hr>
<p>下面是我在 JuiceSSH 中截图以后得到的图片：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9e044a.png" style="width:50%" alt="0000106.png"></p>
<p>在手机上打开，肉眼几乎看不出上面有二维码(但还是能看见)，而在电脑上打开，由于图片解码库不同的缘故，可能导致完全看不到二维码，但是通过在网站上发布，经过服务端的压缩之后，二维码变得明显：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9e167e.png" style="width:50%" alt="0000107.png"></p>
<p>同样的步骤将二维码还原：</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9c7742.png" style="width:50%" alt="0000108.png"></p>
<p>识别的结果：</p>
<pre><code>#---#---#---#---#460023*****9130,460009*****0563#80QBC***JFY#PRO6#
</code></pre><p>由于我的手机是双卡，所以 IMSI 也有两个。经过在 OSBuild 这个应用中查看发现，与手机实际的 IMSI 吻合。<br>而下面是用 fooView 第三方截图获得的图片，没有任何的二维码水印。</p>
<p><img src="https://i.loli.net/2017/08/21/599afce9df937.png" style="width:50%" alt="0000109.png"></p>
<h3 id="还原步骤"><a href="# 还原步骤" class="headerlink" title="还原步骤"></a>还原步骤</h3><ul>
<li>使用魅族手机在 JuiceSSH 等背景颜色较深且为纯色的应用内进行系统截图，也可以对上方展示的没有二维码的图进行截图</li>
<li>此时用手机的图库查看图片，仔细看可以看到轻微的二维码</li>
<li>到酷安等发布图片将遭到压缩的网站上发布图片，获取压缩后的图片，如果直接用 Photo Editor 对原图进行还原，可能根本看不到二维码</li>
<li>使用 Photo Editor 调整<ul>
<li>打开图片，选择「色阶」，调整上方三个滑块至靠近波峰处，二维码将变得明显，点击右上角的勾保存操作(保存操作这一步下同)</li>
<li>选择「特效」-「自动对比度」，保存</li>
<li>选择「特效」-「负片」，保存</li>
<li>点击右上角的蓝色保存按钮，保存图片到指定的路径</li>
</ul>
</li>
<li>识别你获得的二维码图片</li>
</ul>
<p>本文只讲述事实，不作过多评价。<br>只是希望各位不要再用魅族的系统截图。<br>推荐使用第三方截图。</p>
<blockquote>
<p><strong>以下是目前为止与魅族官方人员对话的截图：</strong></p>
</blockquote>
<p><img src="https://i.loli.net/2017/08/21/599afd064d14d.png" alt="0000113.png"><br><img src="https://i.loli.net/2017/08/21/599afd065ccd5.png" alt="0000111.png"><br><img src="https://i.loli.net/2017/08/21/599afd064e116.png" alt="0000112.png"></p>
<hr>
<ul>
<li>原作者授权 <a href="https://akarin.moe" target="_blank" rel="external">RockyLo</a> 转载的知乎专栏：<a href="https://zhuanlan.zhihu.com/p/26936016" target="_blank" rel="external">转载：魅族系统截图被附上全屏二维码水印，其中包含设备信息 - 知乎专栏</a></li>
<li>与本文章相关的知乎问题在此处：<a href="https://www.zhihu.com/question/59919887" target="_blank" rel="external">如何评价魅族为系统截图添加水印的行为？ - 知乎</a></li>
<li>对于位于知乎专栏和原文简书评论区的疑问，原作者补充了发现此问题的系统版本截图：</li>
</ul>
<p><img src="https://i.loli.net/2017/08/21/599afd064ee7a.jpg" style="width:50%" alt="0000110.jpg"></p>
<blockquote>
<p>直到 <code>2017 年 /5 月 /16 日</code> 为止此版本依旧是魅族官方最新的稳定版。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安全 </tag>
            
            <tag> 魅族 </tag>
            
            <tag> 隐私 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 性能优化（4）——localstorage 存储静态文件的意义]]></title>
      <url>/archives/wpo-localstorage-css-js.html</url>
      <content type="html"><![CDATA[<p>localstorage 并不仅仅只是”狂拽酷炫吊炸天“的黑科技。在一些特殊场景下，甚至可能会有意想不到的收获。</p>
<a id="more"></a>
<h1 id="缘由"><a href="# 缘由" class="headerlink" title="缘由"></a>缘由 </h1><p> 之前阅读 JerryQu 的博客时，看到他在介绍他的博客的优化方案时提到说：</p>
<blockquote>
<p>我将常规外链转成了 inline 输出，同时存入 localStorage，之后不再输出。</p>
</blockquote>
<p>2015 年在知乎上时，localstorage 技术就已经被热烈地讨论过了（<a href="https://www.zhihu.com/question/28467444" target="_blank" rel="external">静态资源（JS/CSS）存储在 localStorage 有什么缺点？为什么没有被广泛应用？</a>）。在知乎上，很多前端大牛都对 localstorage “颇有微词”。所以，我决定简单地研究这一方案，并表达一下我个人的看法。</p>
<h1 id="localstorage- 的优点"><a href="#localstorage- 的优点" class="headerlink" title="localstorage 的优点"></a>localstorage 的优点 </h1><p> 在知乎对于该问题的回答中，最激烈的反对意见是这样的：</p>
<blockquote>
<p>浏览器都帮你缓存好了，干嘛多此一举缓存到 LS 里？</p>
</blockquote>
<p>很好，那就让我们从浏览器的缓存开始说起。</p>
<p>对于 css/js 传统的优化方法，最常见的便是将小的静态文件直接 inline 减少请求，大的文件、甚至全站都完整的接入 CDN，直接将文件就近推送以加快加载速度。</p>
<blockquote>
<p>相对于 inline，HTTP2 协议下的多路复用的特性和 Server Push 的支持（Server Push 即是将一些资源文件和 HTML 在同一请求内同时从服务端推送给浏览器），可以使 inline 变得不那么重要。</p>
</blockquote>
<p>CDN 除了可以就近分发，还可以设置缓存头提示浏览器缓存一些静态文件，这样当页面二次加载便不需要发起 HTTP 请求。但是，外链资源即使合理配置了强缓存头，<strong>浏览器依然会在用户主动刷新时发起协商请求（响应码通常是 304，虽无响应正文，但依然需要建立连接）</strong>；会在强刷时发起 <code>cache-control:no-cache</code> 和 <code>pragma:no-cache</code> 的 Request Header，忽略所有缓存，触发服务端的 200 响应。虽然用户不一定都会强制刷新，但在网络环境较差的环境下，使用 304 协商响应依然颇花费时间。</p>
<blockquote>
<p>微信内置的 X5 内核的 WebView 当中有其它的坑：WebView 退出 10 分钟后，js/css 缓存便会失效，触发 304；WebView 进程一旦退出和重新进入后，缓存便会作废，触发 200。</p>
</blockquote>
<p>所以，使用 localstorage 等效于无视用户主动刷新行为的本地强缓存，而且可以存储较大体积的数据（最小是 2M），而且永久有效。如果把 js 和 css 存储在 localstorage 中，可以省去发送 HTTP 请求从而改善用户的浏览体验。</p>
<h1 id="localstorage- 的缺点"><a href="#localstorage- 的缺点" class="headerlink" title="localstorage 的缺点"></a>localstorage 的缺点 </h1><p> 前端大牛们当时主要关心的时 localstorage 方案的响应速度：网络环境优秀时，localstorage 的响应速度会超过 304 响应的速度么？</p>
<p>理论上，使用 localstorage 和使用 <code>from disk cache</code> 和 <code>from memory cache</code> 的速度应该是不相上下的（当然，这需要进一步的验证和测试）。在较差的网络环境下，读取 localstorage 至少要快于 304。而且移动端由于存储大小问题，手机浏览器的缓存经常会被清理，但 localstorage 被清理的几率会低一些。</p>
<p>当然，使用 localstorage 最大的问题，在于 XSS 的安全问题。一旦用户的 localstorage 被篡改，那么危险将会是持久的，即使漏洞已经被修复。这是由 localstorage 的生命周期决定的。</p>
<blockquote>
<p>关于保护 localstorage 内代码的安全，可以阅读 JerryQu 的<a href="https://imququ.com/post/enhance-security-for-ls-code.html" target="_blank" rel="external">《使用 SRI 增强 localStorage 代码安全》</a></p>
</blockquote>
<p>除此以外，大面积使用 localstorage 还需要考虑其他的问题，比如版本控制。只要一个项目还在迭代开发，就难以避免需要更新资源文件。普通的资源请求，可以根据 md5 或者在资源链接后面加上后缀 query 做标识来判断是否需要更新资源。如果用 localStorage 做，则需要一套新的缓存更新机制。</p>
<h1 id="小结"><a href="# 小结" class="headerlink" title="小结"></a>小结</h1><p>CDN 方案是加速静态文件访问的一种优秀方式，但是必须要面临缓存刷新和 CDN 的压力、回源的压力的问题。<br>localstorage 是优秀的强缓存方案，因为 localstorage 被清空的概率不大。但是要专门注意安全问题。SRI 和 CSP 都是不错的保护 localstorage 里的代码的方案。</p>
<p>所以，localstorage 的方案适合以下情况：</p>
<ul>
<li>同域下的每个页面都会用到的、频繁请求的文件</li>
<li>文件本身不需要经常更新，如 jQuery、一些字体</li>
<li>为移动端或较差网络环境下的特殊加载优化</li>
<li>降低源站和 CDN 的压力</li>
<li>用 base64 存储一些小的图片减少请求并缓存</li>
</ul>
<h1 id="hexo-theme-material- 的应用方案"><a href="#hexo-theme-material- 的应用方案" class="headerlink" title="hexo-theme-material 的应用方案"></a>hexo-theme-material 的应用方案 </h1><p> 在 hexo-theme-material 的开发过程中，我们参考了 <a href="https://github.com/sexdevil/LSLoader" target="_blank" rel="external">LsLoader</a> 方案，设计了一套 localstorage 的使用方案，将项目的 css 和 js，以及 footer-sns-icon 的 svg 转换成 base64 储存在 localstorage 中，利用 localstorage 强缓存的特性加快页面加载速度，以及减少页面的 HTTP Request，达到页面优化的目的。<br>为了避免 css 加载先后出现页面抖动等问题，我们让页面默认 <code>display: none</code> 来阻止页面渲染，在 css 中写入 <code>display: block</code>，这样在 css 加载出来前，页面不会进行渲染，也不会抖动，改善了显示体验。不过在网络环境较差环境下 css 无法及时加载，就会导致页面持续白屏。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> localstorage </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随时随地 Hexo——我是如何使用 Hexo 的]]></title>
      <url>/archives/use-hexo-at-any-time-any-place.html</url>
      <content type="html"><![CDATA[<p>Hexo 是一个使用 Node.js 作为构建引擎的极速、简单且强大的静态博客架构。但 Hexo 只有在安装了 Hexo 的环境上才能运行。于是我设计了一套实现 Hexo 随时随地部署、随时随地发布的方案。</p>
<a id="more"></a>
<h1 id="同步 -Hexo- 工程"><a href="# 同步 -Hexo- 工程" class="headerlink" title="同步 Hexo 工程"></a>同步 Hexo 工程</h1><p>Hexo 和基于数据库的动态博客或者动静分离的博客不同，博客的文章等并不是储存在数据库中，而是由主题仓库、配置的 yml 文件，还有文章的 markdown 文件组成。这些我们称作是 Hexo 的工程文件。</p>
<h2 id="初始化 -Hexo- 工程文件"><a href="# 初始化 -Hexo- 工程文件" class="headerlink" title="初始化 Hexo 工程文件"></a>初始化 Hexo 工程文件 </h2><p> 安装完 Hexo 后，博客的目录中会包括以下内容：</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span> -la
total 2043
drwxr-xr-x 1 Admin 197121       0 5 月   1 09:28 ./
drwxr-xr-x 1 Admin 197121       0 4 月  30 19:45 <span class="token punctuation">..</span>/
drwxr-xr-x 1 Admin 197121       0 5 月   1 11:03 .git/
-rw-r--r-- 1 Admin 197121      65 4 月   5 03:16 .gitignore
-rw-r--r-- 1 Admin 197121    2124 4 月  30 23:03 _config.yml
-rw-r--r-- 1 Admin 197121 1725099 5 月   1 10:39 db.json
-rw-r--r-- 1 Admin 197121   45375 4 月  22 13:04 debug.log
drwxr-xr-x 1 Admin 197121       0 4 月  28 22:31 drafts/
drwxr-xr-x 1 Admin 197121       0 5 月   1 09:19 node_modules/
-rw-r--r-- 1 Admin 197121     796 5 月   1 09:27 package.json
drwxr-xr-x 1 Admin 197121       0 5 月   1 09:28 public/
drwxr-xr-x 1 Admin 197121       0 4 月   5 03:16 scaffolds/
drwxr-xr-x 1 Admin 197121       0 4 月  29 12:08 source/
drwxr-xr-x 1 Admin 197121       0 4 月  30 23:03 themes/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这就是博客工程文件了。</p>
<p>同步文件的方法有很多种，常见的就是通过 云盘 同步和通过 Git 管理。<br>在这里我介绍的是通过 Git 管理和同步博客的工程文件。</p>
<blockquote>
<p>当然，Git 是 Hexo 的 dependencies，如果你装好了 Hexo，你肯定也装好了 Git。</p>
</blockquote>
<p>在你的 Hexo 的目录下使用 <code>git init</code> 初始化一个 Git 仓库。并在 <code>.gitignore</code> 中填入以下内容来排除不需要同步的部分：</p>
<pre><code>.DS_Store
Thumbs.db
db.json
*.log
node_modules/
public/
.deploy*/
</code></pre><p>然后自然是 <code>git remote add</code> <code>git add .</code> <code>git commit -m</code> <code>git push</code> 将你的博客工程文件推送到远端 Repo 当中。我的博客工程文件托管在 Coding 和 Gitlab 的私有库中。</p>
<h2 id="同步 -Hexo- 到另一台设备"><a href="# 同步 -Hexo- 到另一台设备" class="headerlink" title="同步 Hexo 到另一台设备"></a>同步 Hexo 到另一台设备 </h2><p> 一般教程上介绍的都是需要在远端重新安装一遍完整的 Hexo 并也初始化一个 Git 仓库，还需要 <code>git reset --hard</code> 来重置。。。我介绍另一种办法。</p>
<p>首先，在另一台终端上，使用 <code>npm install hexo-cli -g</code> 安装 Hexo 的基本命令行。这个是需要全局安装的。</p>
<blockquote>
<p>如果你安装了其它辅助工具，如我使用了 gulp 压缩 html，这时候就又需要额外全局安装 gulp。</p>
</blockquote>
<p>新建一个目录，并使用 <code>git clone</code> 将你的博客远端文件拉下来。cd 到你 clone 下来的目录里，直接使用 <code>npm install</code> 安装依赖。</p>
<blockquote>
<p>这一步中 npm 会使用 <code>package.json</code> 安装依赖。<code>package.json</code> 里面已经保存了 Hexo 的必备资源包信息, 包括基本的 Hexo、你曾经安装过的插件等等。<code>npm install</code> 后 Hexo 环境就建立起来了。</p>
</blockquote>
<p>等安装完了以后，迁移就完成了。以后在不同的设备上管理 Hexo 就像和管理 Git Repo 一样，使用 <code>git pull</code> <code>git add</code> <code>git commit</code> <code>git push</code> 指令即可。</p>
<p>我后来编写了一个 shell 脚本，可以实现在任何安装了 Git、Nodejs 的终端上完成一键安装 <code>hexo-cli</code> <code>gulp</code> 和执行 <code>npm install</code>（懒喵）</p>
<hr>
<p>Hexo 有一个算不上坑的地方，<code>page.updated</code> 函数当没有在 <code>front-matter</code> 定义时，是会跟随本地文件的改动日期而变动的。所以在多设备间同步 Hexo 时，需要为每篇文章指定 <code>page.updated</code> 的 <code>front-matter</code>。</p>
<h2 id="在移动端使用 -Hexo"><a href="# 在移动端使用 -Hexo" class="headerlink" title="在移动端使用 Hexo"></a>在移动端使用 Hexo</h2><p>如果你想在移动端安装 Hexo，你可以读一读这篇文章：<a href="http://droid-max.github.io/2016/12/01/Share-1/" target="_blank" rel="external">《手机端部署 hexo 博客到 GithubPage》</a></p>
<p>但是，我并不建议这么做：手机端运行的速度远远不如电脑端，甚至不如 CI。我在手机端运行一次 <code>hexo g</code> 需要花费 37s，在 CI 只需要 11s，在我的电脑上是 2.7s。所以我在移动端依然是用 Git 管理 Hexo，然后，将页面生成的部分交给 CI 平台。这就是我接下来要讲的：</p>
<h1 id="用 -CI- 实现 -Hexo- 持续集成"><a href="# 用 -CI- 实现 -Hexo- 持续集成" class="headerlink" title="用 CI 实现 Hexo 持续集成"></a>用 CI 实现 Hexo 持续集成 </h1><p> 在一些情况下，你不能在某个设备上安装 Hexo，比如公共电脑之类的，有时你甚至只能在代码托管的网页端用 Web Editor 修改和发布博客。这样如何实现 Hexo 的发布呢？<br>你需要借助 CI，借助 CI 可以实现静态页面在远端生成和自动远端部署。</p>
<p>如何在 CI 平台上部署 Hexo，你可以阅读我的下列文章：</p>
<ul>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-daocloud.html">《Hexo 持续自动化部署》</a></li>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-flow-ci.html">《用 Flow.CI 让 Hexo 持续集成》</a></li>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-gitlab-ci.html">《使用 Gitlab CI 实现 Hexo 持续部署》</a></li>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-travis-ci.html">《使用 Travis CI 持续构建 Hexo》</a></li>
</ul>
<blockquote>
<p>你也可以将持续集成移植到 Travis CI 或者其它 CI 平台中。在 CI 安装 Hexo 和同步工程文件的过程可以参考本文之前的“同步 Hexo 到另一台设备”。</p>
</blockquote>
<h1 id="部署 -Hexo"><a href="# 部署 -Hexo" class="headerlink" title="部署 Hexo"></a>部署 Hexo</h1><p>如果你的博客是直接在部署到 Pages 服务上的话，那么就没什么需要担心的了。因为绝大部分 Pages 都支持 Git 部署。你只要根据文档配置 <code>hexo-deploy-git</code> 即可。<br>但是我的博客部署在自己独立的 WebServer 上，所以需要把生成的静态页面部署到我的 WebServer。为了安全，我没有直接在 WebServer 上部署 Repo，这样就不能直接一步到位地把静态页面 deploy 到 WebServer 上。</p>
<p>所以，这就是我的方案：<br>首先，我需要将我生成的页面部署到一个公开的 Git Repo 中，在这里我选择了 Github 新建一个 Repo。至于部署方式，我之前选择使用 SSH 连接 Github 的 Repo，后来改成使用 Github 的 <code>Personal access token</code> 来获得对 Repo 的写入权限。</p>
<p>通过 CI 的环境变量保管 SSH 或者 <code>Personal access token</code> 是最安全的选择。在 CI 的后台添加一个环境变量，将 <code>Personal access token</code> 写入其中。然后新建一个 <code>deploy.sh</code> 文件，写入以下内容：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ./public <span class="token comment" spellcheck="true">#生成的静态页面会存储在 public 目录下</span>
<span class="token function">git</span> init
<span class="token function">git</span> config --global push.default matching
<span class="token function">git</span> config --global user.email <span class="token string">"username@example.com"</span> <span class="token comment" spellcheck="true">#填入 GitHub 的邮箱地址</span>
<span class="token function">git</span> config --global user.name <span class="token string">"username"</span> <span class="token comment" spellcheck="true">#填入 GitHub 的用户名</span>
<span class="token function">git</span> add --all <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#提交所有内容</span>
<span class="token function">git</span> commit -m <span class="token string">"Site updated with CI"</span> <span class="token comment" spellcheck="true">#自动构建后的内容将全部以此信息提交</span>
<span class="token function">git</span> push --quiet --force https://<span class="token punctuation">{</span>设置的环境变量名<span class="token punctuation">}</span><span class="token punctuation">}</span>@github.com/ 你的 GitHub 用户名 / 你的代码仓库名.git master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>使用 SSH 也可以通过类似的方案实现。</p>
</blockquote>
<p>在 CI 的 workflow 中调用这个脚本即可实现 <code>hexo-deploy-git</code> 的效果。</p>
<blockquote>
<p>由于我在使用 Gitlab 的私有库保管工程文件，使用 Gitlab CI 持续集成。所以我直接“肆无忌惮”地直接 <code>hexo d</code> 的目标 <code>{Personal access token}@github.com/neoFelhz/MyBlog.git</code> 写进了 <code>hexo-deploy-git</code> 的配置中。严格来讲，这是非常不安全的。</p>
</blockquote>
<p>然后，在 WebServer 上部署一个 WebHook，然后在 Github 的 Repo 设定中添加该 WebHook，这样可以实现 Github 上 Repo 有更新时通知 WebServer 拉去静态页面的内容到 WebServer。</p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 性能优化（3）——探讨 data URI 的性能]]></title>
      <url>/archives/wpo-data-uri-performance.html</url>
      <content type="html"><![CDATA[<p>业内常会有 Data URI 的利与弊、用与不用的讨论，即使在最有经验的前端开发者眼中，也会形成对 data URI 截然不同的看法。</p>
<a id="more"></a>
<h1 id="什么是 -Data-URI"><a href="# 什么是 -Data-URI" class="headerlink" title="什么是 Data URI"></a>什么是 Data URI</h1><p>减少 Request，一直是业内公认的一项优化网站加载的方案。过去，对于众多图标类的小图片，通常都会采用雪碧图的方法合并多张小图片为一张大图片、来减少请求。现在，data URI 成为了新的选择。</p>
<p><a href="https://tools.ietf.org/html/rfc2397" target="_blank" rel="external">RFC2397</a> 中首次定义了 data URI 的规范和格式如下：</p>
<pre><code>data:[&lt;mime type&gt;][;charset=&lt;charset&gt;][;base64],&lt;encoded data&gt;
</code></pre><p>在这种格式中，data: 就是 URI 的协议，表明这是一个 data URI。<br><code>mime type</code>可能是 <code>image/png</code> 之类的，如果不填，默认是 <code>text/plain</code>。</p>
<h1 id="性能神器 - 还是弃之可惜的鸡肋"><a href="# 性能神器 - 还是弃之可惜的鸡肋" class="headerlink" title="性能神器 还是弃之可惜的鸡肋"></a>性能神器 还是弃之可惜的鸡肋 </h1><h2 id="节省请求全等于优化性能？"><a href="# 节省请求全等于优化性能？" class="headerlink" title="节省请求全等于优化性能？"></a> 节省请求全等于优化性能？</h2><p>首先，如果直接在 <code>&lt;img&gt;</code> 标签的 src 中使用 base64 时，图片出现很多次时就会需要把 base64 图片的文本内容重复很多次，导致 HTML 变大。虽然多次重复的内容很适合 Gzip，但对于浏览器来说，导入 HTML 并生成 DOM 则会被阻碍。而且多次重复的 data URI 浏览器会不断的暂停渲染和进行解码，如果使用 data URI 的文件过多过大，就会阻碍页面的渲染。<br>当然，你可以说，在 <code>style.css</code> 里写好 <code>background</code> 可以应对这个问题。<br>固然，将 data URI 写进 CSS 以后，似乎是减少了请求。但是这样做的缺点就没那么容易发现了。<strong>样式表会变得很大，从而阻塞关键下载和渲染</strong>。通俗地讲，图片文件的体积被转移到了 HTML 或 CSS 中，而后者的体积直接影响渲染，导致用户会长时间注视空白屏幕。HTML 和 CSS 阻塞渲染，图片不会。</p>
<blockquote>
<p>这是用户打开网页时浏览器加载页面的过程：</p>
<ul>
<li>下载 HTML 文档。HTML 内容准备就绪后，浏览器解析字节并构建 DOM 树。</li>
<li>在浏览器构建我们这个简单页面的 DOM 时，在文档的 head 部分遇到了一个 link 标签，该标记引用一个外部 CSS 样式表 <code>style.css</code>。由于预见到需要利用该资源来渲染页面，它立即发出了对该资源的请求。</li>
<li>与处理 HTML 时一样，我们需要将收到的 CSS 转换成浏览器能够理解和处理的东西。因此浏览器会重复解析过程，不过是为解析 CSS，而不是 HTML。它需要提取并解析 CSS 文件以构建页面。</li>
<li>在浏览器构建页面时，如果遇到了 <img> 标签，它意识到需要该资源来渲染页面，就会把该资源加入到请求队列。但是图片的暂时缺失不影响浏览器渲染其他部分。因此图片不会阻塞关键路径渲染。</li>
</ul>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000089.png" alt="0000089.png"></p>
<h2 id="Gzip- 能缓解这一切？"><a href="#Gzip- 能缓解这一切？" class="headerlink" title="Gzip 能缓解这一切？"></a>Gzip 能缓解这一切？</h2><p>Gzip 又是什么？</p>
<blockquote>
<p>Gzip 是在 Web 端最常用的一种压缩文本的方法。Gzip 压缩算法分两步。第一步，采用 LZ77 算法的一个变种替换字符串，第二步，使用 Huffman 树来储存出现的位置和长度。</p>
</blockquote>
<p>看不懂？我也看不懂。。不过我找到了下面这张图，这样就形象多了。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000090.png" alt="0000090.png"></p>
<p>HTML 中重复出现大量的 HTML 标签以及类名等，CSS 中重复出现大量的属性，JavaScript 中重复的函数调用等（即使经过混淆）。因此 HTML、CSS、JavaScript 的 Gzip 压缩率都是很高的。但是由于 base64 近乎于乱码的文本是无规律的，所以在 Gzip 中不达不到较高的压缩率。</p>
<h2 id="考虑考虑缓存？"><a href="# 考虑考虑缓存？" class="headerlink" title="考虑考虑缓存？"></a>考虑考虑缓存？</h2><p>如果我们把样式、图片文件合并到变成一个资源，我们就无法再分别为它们配置缓存时间，以及更新资源。而图片、HTML 和 CSS 的更新频率都是不一样的。<br>然而 CSS 文件的修改频率还算是较高的，图片其次。我们一般会为不同类型的文件利用缓存头设置不同的缓存失效时间，以及在更新某个文件之后单独更新这个文件的时间戳。但是混在一起之后，即使我们只是想更新 CSS 规则里面一个字号，整个巨大的文件就会重新生成。用户不得不在每次更新后重新下载整个大文件，这违背了基本的缓存原则。</p>
<hr>
<p>总结一下：</p>
<ul>
<li>base64 会让样式文件变得很大而阻塞关键下载和渲染</li>
<li>css 因 base64 增加的体积无法通过 Gzip 很好地压缩</li>
<li>浏览器渲染方面，增加了解析 css 的耗时</li>
<li>在 css 文件中过多使用 base64 会让首次渲染时间大幅增加，移动端影响可能更大</li>
</ul>
<h1 id="Data-URI- 的实践"><a href="#Data-URI- 的实践" class="headerlink" title="Data URI 的实践"></a>Data URI 的实践 </h1><p> 在 hexo-theme-material 1.4.0 版本的开发中为了优化页面加载，我们开始考虑应用 data URI。<br>由于 Material 主题 1.4.0 版本的前期开发中已经引进了一套基于 localstorage 的缓存方案，不怕强制刷新和禁用缓存，极大程度上优化了二次加载。<br>在这基础上，我将 footer sns 的 icon 独立了出来，使用 base64 加码，并独立存储在一个 css 当中。这个 css 便不需要经常更新。</p>
<p>Material 主题的 footer sns icon 是 svg。svg 的格式是：</p>
<pre class="line-numbers language-svg"><code class="language-svg">&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox= ...>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>不同的 svg 中，只有定义图像的 <code>&lt;path&gt;</code> 部分会有所不同，开头定义规范的部分之类的都完全相同，所以这一部分也是可以被 Gzip 压缩的，一定程度上缓解了传输文件大小的问题。</p>
<p>在实际测试中，直接加载外链的 svg，即使用了支持 HTTP2 的 CDN 可以连接多路复用，加载一个 svg 仍然需要 25ms，而且这一部分是最后加载的，直接影响了 DOMContentLoaded 的触发。采用该方案以后，DOMContentLoaded 提前了将近 15ms 左右触发，效果虽然不明显，但是说明这个方案毕竟是可行的。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> base64 </tag>
            
            <tag> data URI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[本博客的优化汇总]]></title>
      <url>/archives/optimization-of-my-blog.html</url>
      <content type="html"><![CDATA[<p><img src="https://bbs-static.nfz.yecdn.com/i/0000087.png" alt="0000087.png"></p>
<p>我一直在关注我的博客的浏览体验，其中，网站的加载速度对于浏览体验来说是非常重要的。<a id="more"></a>我见过很多菊苣的博客，他们的博客加载速度却很一般（偷笑）我现在也在写一些 WPO 方面的文章，我并不想在写如何做好优化性能的同时，自己的博客却十分缓慢。<br>除了 Pageseed、YSlow 常见提到的颇有些老生常谈的一些优化手段以外，我的博客也用了其它一些零散的优化点。我把它们列举在这里。</p>
<h2 id="静态资源优化"><a href="# 静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化 </h2><p> 如果你打开 Dev Tools，你会发现我的博客加载时 <del> 除了一个用于网站统计的 <code>piwik.js</code> 以外，</del> 没有 <del> 再</del>引用任何大段的 css、js。</p>
<blockquote>
<p>博客已经弃用 Piwik 统计服务，不再加载 <code>piwik.js</code>。</p>
</blockquote>
<p>这是 <code>hexo-theme-material</code> 的一个实验性特性，首次加载利用 XMLHttpRequest 从外部加载资源并异步执行，同时将其存入 localstorage，以后加载都通过 localstorage 加载，不再发起请求。<br>这样做的好处有：</p>
<ol>
<li>后续访问减少连接数</li>
<li>不怕刷新和强刷</li>
</ol>
<p>同时，我把这些文件部署在了又拍云的 CDN，这样在页面首次加载时也不会阻塞页面的加载。</p>
<blockquote>
<p>localstorage 这项特性在 <code>hexo-theme-material</code> 1.4.0 版本中发布。</p>
</blockquote>
<h2 id="图片优化"><a href="# 图片优化" class="headerlink" title="图片优化"></a>图片优化 </h2><p><code>hexo-theme-material</code> 是很漂亮的、图文并茂的主题，这就意味着主题需要加载大量图片资源。不加载用户看不见的图片是一项最基本的优化（图片采用 lazyload）。这是老生常谈的话题，<code>hexo-theme-material</code> 也已经实现，在这里略过不谈。<br> 除了 lazyload 博客首页的缩略图以外，博客很多小而碎的图片都使用了 <code>date URI</code> 的方式来减少小资源的引用，避免增加 Request。<del>比如博客侧边栏抽屉的又拍云的 svg 格式的 logo、</del> 比如页脚的 SNS 的几个图标（页脚的图标则是将 svg 格式 <del>转码成 base64</del> 直接 inline 在 css 予以输出）</p>
<h2 id="Piwik- 统计优化"><a href="#Piwik- 统计优化" class="headerlink" title="Piwik 统计优化"></a>Piwik 统计优化</h2><p>Piwik 的统计和一般的统计不同在于，他们的 JS 是剥离出来的，统计时 <code>piwik.js</code> 可以不和架设 Piwik 的 WebServer 同源加载。所以我将 JS 托管在了又拍云的 CDN 上，同时改造了我的站点统计代码部分，将 JS 改到了又拍云上的 URI。以下是我修改过的示例代码。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> _paq <span class="token operator">=</span> _paq <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
_paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setDomains"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">"*.example.com"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"enableCrossDomainLinking"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"trackPageView"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"enableLinkTracking"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>_paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setTrackerUrl"</span><span class="token punctuation">,</span> <span class="token string">"https://piwik.nfz.moe/piwik.php"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setSiteId"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">,</span>
        a <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>defer <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"//cdn.example.com/piwik/piwik.js"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>除此以外，和其它统计代码不同，我直接将其放在了页面底部。相比放在 <code>&lt;head&gt;</code> 标签之内，将 Piwik 统计代码放在页脚直接使 DOMContentLoaded 提前了 70ms 触发（大雾）</p>
<p><strong>注：博客已经撤掉了 Piwik 统计服务，转而使用 Google Analytics。优化方案参见《<a href="https://blog.nfz.moe/archives/google-analytics-optimize.html">Google Analytics 异步优化方案</a>》</strong></p>
</blockquote>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>静态内容非常适合做缓存，来加速页面的访问。我的博客使用了 Service Worker 技术，利用 sw-toolbox 获取和 “劫持” 请求，可以大大改善博客的二次加载的时长，还可以实现离线访问已经被缓存的页面，改善了用户的体验。</p>
<blockquote>
<p>我的博客已经在使用 sw-toolbox 代替原生 Service Worker。我在《<a href="https://blog.nfz.moe/archives/sw-toolbox-practice.html">本博客对 sw-toolbox 的实践</a>》一文中介绍了 sw-toolbox。我推荐无论是静态站还是动态站，都使用 sw-toolbox。</p>
</blockquote>
<hr>
<p>实际上，我的博客加载不逊于 BAT 主流网站，使用了 Hexo 静态博客框架也是一个很重要的原因。Hexo 是一款基于 NodeJS 的快速、简洁且高效的博客框架，能在几秒内渲染出上百个静态页面。静态博客相对于使用动态的博客，不需要查询数据库、动态生成页面等后端延迟，可以大大提升网站加载所需的时间。</p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为博客启用 PWA 支持]]></title>
      <url>/archives/pwa-support-for-my-blog.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于 native app 和 PWA 的纷争我不想发表太多看法，但是有一件事是确定的——PWA 极大改善了移动端用户的体验。</p>
</blockquote>
<a id="more"></a>
<p>好消息是改造你的网站为 Progressive Web Apps（PWAs）并不困难。这就是本文想介绍的——我是如何改造我的博客使之成为 PWA 的。</p>
<h1 id="启用全站 -HTTPS"><a href="# 启用全站 -HTTPS" class="headerlink" title="启用全站 HTTPS"></a>启用全站 HTTPS</h1><p>这是使用 PWA 的第一步。<br>这是由于一些显而易见的原因（其中，PWA 需要借助 ServiceWorker 是最主要的原因）<br>我旗下所有网站都已经启用了 HTTPS 支持。</p>
<h1 id="创建一个 -Service-Worker"><a href="# 创建一个 -Service-Worker" class="headerlink" title="创建一个 Service Worker"></a>创建一个 Service Worker</h1><p>ServiceWorker 是一个可以拦截和响应你的网络请求的编程接口，具备有可以高效的缓存、提供通知和离线访问的特性。<br>Service Worker 很复杂，你可以修改示例代码来达到自己的目的。<a href="https://gist.github.com/neoFelhz/50800b701d00dc6d874be95da2cd7655" target="_blank" rel="external">这里 </a> 是一个标准的 Web Worker，浏览器用一个单独的线程来下载和执行它。它没有调用 DOM 和其他页面 API 的能力，但它可以拦截网络请求，包括页面切换，静态资源下载。你要做的不过是启用它。<br>关于如何用上述示例代码启用一个最简单的 ServiceWorker，你可以阅读<a href="https://blog.nfz.moe/archives/wpo-by-service-worker.html">《Web 性能优化（2）——浅尝 Service Worker》</a>。</p>
<h1 id="创建 -Web-App-Manifest"><a href="# 创建 -Web-App-Manifest" class="headerlink" title="创建 Web App Manifest"></a>创建 Web App Manifest</h1><p>manifest 文件提供了一些我们网站的信息，例如 name，description 和需要在主屏使用的图标的图片，启动屏的图片等。<br>manifest 文件是一个 JSON 格式的文件，位于你项目的根目录。它必须用 <code>Content-Type: application/manifest+json</code> 或者 <code>Content-Type: application/json</code> 这样的 HTTP 头来请求。</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span>              <span class="token operator">:</span> <span class="token string">"PWA Website"</span><span class="token punctuation">,</span>
  <span class="token property">"short_name"</span>        <span class="token operator">:</span> <span class="token string">"PWA"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span>       <span class="token operator">:</span> <span class="token string">"An example PWA website"</span><span class="token punctuation">,</span>
  <span class="token property">"start_url"</span>         <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
  <span class="token property">"display"</span>           <span class="token operator">:</span> <span class="token string">"standalone"</span><span class="token punctuation">,</span>
  <span class="token property">"orientation"</span>       <span class="token operator">:</span> <span class="token string">"any"</span><span class="token punctuation">,</span>
  <span class="token property">"background_color"</span>  <span class="token operator">:</span> <span class="token string">"#ACE"</span><span class="token punctuation">,</span>
  <span class="token property">"theme_color"</span>       <span class="token operator">:</span> <span class="token string">"#ACE"</span><span class="token punctuation">,</span>
  <span class="token property">"icons"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo072.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"72x72"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo192.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo256.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"256x256"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo512.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是一个 PWA Manifest 的示例。你可以通过简单修改它后在自己的网站上启用。<br>可选的属性有：</p>
<ul>
<li>name —— 网页显示给用户的完整名称</li>
<li>short_name —— 当空间不足以显示全名时的网站缩写名称</li>
<li>description —— 关于网站的详细描述</li>
<li>start_url —— 网页的初始 相对 URL（比如 /）</li>
<li>scope —— 导航范围。比如，<code>`/app/</code>的 scope 就限制 <code>app</code> 在这个文件夹里。</li>
<li>background-color —— 启动屏和浏览器的背景颜色</li>
<li>theme_color —— 网站的主题颜色，一般都与背景颜色相同，它可以影响网站的显示</li>
<li>orientation —— 首选的显示方向：any, natural, landscape, landscape-primary, landscape-secondary, portrait, portrait-primary, 和 portrait-secondary。</li>
<li>display —— 首选的显示方式：fullscreen, standalone (看起来像是 native app)，minimal-ui (有简化的浏览器控制选项) 和 browser (常规的浏览器 tab)</li>
<li>icons —— 定义了 src URL, sizes 和 type 的图片对象数组，用来定义 PWA 的 icon。</li>
</ul>
<blockquote>
<p>你可以在 <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="external">MDN</a> 中找到对 <code>manifest</code> 详细说明。<br>另外，你也可以通过 <a href="https://app-manifest.firebaseapp.com" target="_blank" rel="external"> 这个网站 </a> 快速生成一个 <code>manifest.json</code> 和各种大小的图标。</p>
</blockquote>
<p>最后，在 HTML 内引用这个文件。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="调试"><a href="# 调试" class="headerlink" title="调试"></a>调试 </h1><p> 现代浏览器都提供了完善的调试工具。本文以 Chrome 为例。</p>
<h2 id="调试 -Manifest"><a href="# 调试 -Manifest" class="headerlink" title="调试 Manifest"></a>调试 Manifest</h2><p>在开发者工具中的 <code>Application</code> 选项卡左边有 <code>Manifest</code> 选项，你可以验证你的 manifest JSON 文件，并提供了 <code>Add to homescreen</code>。执行操作，检查控制台日志是否有报错。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000085.png" alt="0000085.png"></p>
<h2 id="调试 -ServiceWorker"><a href="# 调试 -ServiceWorker" class="headerlink" title="调试 ServiceWorker"></a>调试 ServiceWorker</h2><p>在开发者工具中的 <code>Application</code> 选项卡左边的 <code>Application</code> 选项中你可以轻松地调试你的 ServiceWorker。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000086.png" alt="0000086.png"></p>
<p>点击 <code>Offline</code>，检查你的离线页面是否正常工作。</p>
<blockquote>
<p>在 <code>Clear storage</code> 选项中你可以清除 ServiceWorker 的缓存。</p>
<p>技巧一：用 隐身窗口 来测试你的 PWA，这样在你关闭这个窗口之后缓存就不会保留下来。<br>技巧二：在 Chrome 新版本的开放人员面板中新增了功能 <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Lighthouse</a> 可以快速调试 PWA。Lighthouse 还内置了 <code>pagespeed</code> 可以测试页面的加载性能。</p>
</blockquote>
<h2 id="让 -PWA- 安装提示在首次访问时弹出"><a href="# 让 -PWA- 安装提示在首次访问时弹出" class="headerlink" title="让 PWA 安装提示在首次访问时弹出"></a>让 PWA 安装提示在首次访问时弹出 </h2><p> 你可以在页面中加入下述 JavaScript，可以让访客首次访问你的页面时弹出 PWA 安装下图所示的提示弹窗。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000156.jpg" alt="0000156.jpg" style="width:50%"></p>
<pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'beforeinstallprompt'</span><span class="token punctuation">,</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span>userChoice<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>outcome<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过我还是比较喜欢 Chrome 默认的做法，即首次访问并不一定弹出对话框，只有用户在 24 小时内多次访问页面（次数是根据会话数统计的）才弹出安装对话框。我认为，这样做也是对访客负责——固然安装 PWA 能吸引访客回访——但是不是所有人都愿意安装一个 PWA，尤其是不频繁访问网站的。</p>
<hr>
<p>上述调试都通过了？把你的网站部署上生产环境吧！</p>
<hr>
<blockquote>
<p>本文更新于 2017.7.7 日，根据 <a href="https://siyuanlau.github.io/2017/06/08/ 在博客上完全实现 PWA 支持 /" target="_blank" rel="external">《在博客上完全实现 PWA 支持》</a> 提到的细节进行了完善。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
            <tag> PWA </tag>
            
            <tag> Service Worker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[妄想 Paranoia 歌词 API 文档]]></title>
      <url>/archives/delasaka-paranoia-api.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>封面：β<br>取自 <a href="http://www.bilibili.com/video/av8264026/" target="_blank" rel="external">妄想症系列专辑预热宣传</a> 视频封面</p>
</blockquote>
<a id="more"></a>
<h1 id="妄想症 -Paranoia-API"><a href="# 妄想症 -Paranoia-API" class="headerlink" title="妄想症 Paranoia API"></a>妄想症 Paranoia API</h1><p>妄想症 Paranoia API 是一个类似于 Hitokoto 随机返回一句话的 API。</p>
<blockquote>
<p>API 内收录所有歌词，版权归 妄想症系列 策划 / 作词 <a href="http://weibo.com/sakacastle" target="_blank" rel="external">雨狸</a> 所有！</p>
</blockquote>
<ul>
<li>问题反馈：neofelhz@gmail.com</li>
<li>调用实例：数据获取</li>
<li>数据条数：242</li>
</ul>
<h1 id="数据获取方式"><a href="# 数据获取方式" class="headerlink" title="数据获取方式"></a>数据获取方式</h1><ul>
<li>请求地址：<a href="https://api.nfz.moe/paranoia/" target="_blank" rel="external">https://api.nfz.moe/paranoia/</a> （仅支持 HTTPS，HTTP 请求将会 301/307 强制跳转 HTTPS，域名已启用 HSTS 响应头）</li>
<li>请求方式：GET</li>
<li>请求参数：<ul>
<li><del>charset：字符集，支持 GBK/UTF-8</del> 现仅支持 UTF-8，该参数已被取消</li>
<li>encode：数据可返回函数名为 <code>paranoia</code> 的 JavaScript 脚本用于同步调用</li>
</ul>
</li>
</ul>
<h1 id="实例"><a href="# 实例" class="headerlink" title="实例"></a>实例 </h1><h2 id="直接请求"><a href="# 直接请求" class="headerlink" title="直接请求"></a> 直接请求</h2><ul>
<li>请求：<a href="https://api.nfz.moe/paranoia/" target="_blank" rel="external">https://api.nfz.moe/paranoia/</a></li>
<li>返回：<code>被抛弃的女孩 深渊中乞愿被爱 无法失去陪伴 被自己的愿望加害——《妄想·Reality》</code></li>
</ul>
<h2 id="Javascript-HTML"><a href="#Javascript-HTML" class="headerlink" title="Javascript + HTML"></a>Javascript + HTML</h2><p>脚本地址：<code>https://api.nfz.moe/paranoia/?encode=js</code></p>
<p>在 HTML 内引用 JavaScript，建议放在 <code>&lt;/head&gt;</code> 之前：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://api.nfz.moe/paranoia/?encode<span class="token punctuation">=</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>API 响应时间平均为 200ms，可对域名 <code>api.nfz.moe</code> 做 <code>preconnect</code> 提前完成 TCP 连接。</p>
</blockquote>
<p>在你需要展示一句话的地方加上：</p>
<h4 id="显示来源"><a href="# 显示来源" class="headerlink" title="显示来源"></a>显示来源</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paranoiaapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>paranoia(true)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="不显示来源"><a href="# 不显示来源" class="headerlink" title="不显示来源"></a>不显示来源</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paranoiaapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>paranoia(false)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>支持其它 CSS 样式。</p>
<blockquote>
<p><a href="https://api.nfz.moe/paranoia/example.html" target="_blank" rel="external">HTML 调用实例</a></p>
<p>返回的 JavaScript 会返回一个 <code>paranoia</code> 的函数，同步调用。该脚本实质为使用 document.write 的脚本。<br>是否显示来源取决于 <code>paranoia()</code> 传递的参数：<code>true</code> 为显示，<code>false</code> 为不显示。</p>
</blockquote>
<h1 id="更新日志"><a href="# 更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><ul>
<li>2017 年 4 月 4 日：正式上线</li>
<li>2017 年 6 月 2 日：第一次重构</li>
<li>2017 年 8 月 3 日：第二次重构、更新数据</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> API </tag>
            
            <tag> VOCALOID </tag>
            
            <tag> 妄想者系列 </tag>
            
            <tag> Hitokoto </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 性能优化（2）——分析 Prefetch]]></title>
      <url>/archives/wpo-by-prefetch.html</url>
      <content type="html"><![CDATA[<p>对于文件的预加载的作用并不是直接加快网站的加载速度。预加载是提前准备好你所需要的资源，然后当需要的时候即可直接调用、直接完成页面的渲染，不造成阻塞。</p>
<a id="more"></a>
<h1 id="常见 -Prefetch- 用法"><a href="# 常见 -Prefetch- 用法" class="headerlink" title="常见 Prefetch 用法"></a>常见 Prefetch 用法 </h1><p> 资源预加载是另一个性能优化技术，我们可以使用该技术来预先告知浏览器某些资源可能在将来会被使用到。如果我们正确使用这些预获取技术，可以显著提升用户的体验。</p>
<h2 id="DNS- 预解析 -Prefetch"><a href="#DNS- 预解析 -Prefetch" class="headerlink" title="DNS 预解析 Prefetch"></a>DNS 预解析 Prefetch</h2><p>DNS 预解析告诉浏览器将来我们可能会从哪里获取文件，从而提前完成 <code>DNS Look Up</code> 的操作。这意味着当浏览器真正请求该域中的某个资源时，DNS 的解析就已经完成了。<br>实现 DNS-Prefetch 只需要在 <code>&lt;head&gt;</code> 内加入：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>实际上，单纯执行 DNS-Prefetch 只能够微小的提升浏览性能，因为大部分现代浏览器也都内置了预解析的功能，<del>甚至在你在地址栏输入域名时就完成了预解析。开启这个优化算是聊胜于无吧。</del><br>更正一下，后来我阅读了 Chormium 的文档，得到以下信息：</p>
<ul>
<li>不用对超链接做手动 dns prefetching，因为 chrome 会自动做 dns prefetching</li>
<li>chrome 会自动把当前页面的所有带 href 的 link 的 dns 都 prefetch 一遍</li>
<li>但是。对于一些需要跳转的域名做好预解析，最多可以减少 300~500ms 的加载时间<br>2017.09.01 更新：查了一些有关文档，Chrome 在一个域下最多只会对 8 个域名做预解析。</li>
</ul>
</blockquote>
<h2 id="预连接 -Preconnect"><a href="# 预连接 -Preconnect" class="headerlink" title="预连接 Preconnect"></a>预连接 Preconnect</h2><p>和 DNS 预解析有些类似，不过 Preconnect 的预连接的特点在于不仅完成 DNS 预解析，同时还将进行 TCP 握手和建立传输层协议，预先建立 socket 连接，从而消除昂贵的 DNS 查找、TCP 握手和 TLS 往返开销。<br>实现 <code>Preconnect</code> 只需要在 <code>&lt;head&gt;</code> 中加入：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preconnect<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>2017.09.01 更新：在最近的测试中，Chrome 似乎不会对 Chrome 预先完成 TLS 握手。</p>
</blockquote>
<h2 id="预获取 -Prefetching"><a href="# 预获取 -Prefetching" class="headerlink" title="预获取 Prefetching"></a>预获取 Prefetching</h2><p>如果我们确定某个资源将来一定会被使用到，我们可以让浏览器预先请求并下载该资源并放入浏览器缓存中。<br>Prefetching 有两种用法。其中 <code>prefetch</code> 为将来的页面提供了一种低优先级的资源预加载方式，而 <code>subresource</code> 为当前页面提供了一种高优先级的资源预加载。所以，如果资源是当前页面必须的，或者资源需要尽快可用，那么最好使用 <code>subresource</code>。用法如下：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subresource<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use?"></a>Can I Use?</h1><ul>
<li>DNS Prefetch</li>
</ul>
<p><a href="http://caniuse.com/#feat=link-rel-dns-prefetch" target="_blank" rel="external">http://caniuse.com/#feat=link-rel-dns-prefetch</a></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000074.png" alt="0000074.png"></p>
<ul>
<li>Preconnect</li>
</ul>
<p><a href="http://caniuse.com/#feat=link-rel-preconnect" target="_blank" rel="external">http://caniuse.com/#feat=link-rel-preconnect</a></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000075.png" alt="0000075.png"></p>
<ul>
<li>Prefetching</li>
</ul>
<p><a href="http://caniuse.com/#feat=link-rel-prefetch" target="_blank" rel="external">http://caniuse.com/#feat=link-rel-prefetch</a></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000076.png" alt="0000076.png"></p>
<blockquote>
<p>连 IE 都支持了，Safari 和 iOS 你个辣鸡~</p>
</blockquote>
<ul>
<li>Subrecource</li>
</ul>
<p><a href="http://caniuse.com/#feat=subresource-integrity" target="_blank" rel="external">http://caniuse.com/#feat=subresource-integrity</a></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000077.png" alt="0000077.png"></p>
<h1 id="实际意义"><a href="# 实际意义" class="headerlink" title="实际意义"></a>实际意义 </h1><p> 介绍了这么多，预加载和预解析有什么用呢？</p>
<p>首先，大家通常知道 <code>&lt;script&gt;</code> 标签有必要放在 <code>&lt;body&gt;</code> 的尾部，css 要尽可能早的加载，这已经是“业界规范”了。</p>
<p>但无论如何不可否认，CSS 严重影响网站的渲染，所有 CSS 尽早加载是减少首屏时间的最关键。那么在浏览器加载 DOM 树时预加载 CSS 文件可以加快网站加载速度。<br>既然 Web 性能优化的手段并不是非黑即白的，对于 JS 的意见不一，预加载也不是什么坏事，尤其是使用了 CDN 从引用 JS。</p>
<p>还有 Fonts。Fonts 大部分都是 DOMLoad 以后才会开始加载的。所以我们可以通过预加载的方式获取到字体，这样 DOMLoad 完用字体对页面进行重新渲染时就不需要再发起请求加载字体。</p>
<blockquote>
<p>在 Preload 草案提出和得到支持以前，WebView 优化的各种奇技淫巧中中有专门在首次加载时建立一个 1px 的 iframe 专门用于放置 Prefetch 标签的，服务端通过 cookie 进行判断。</p>
</blockquote>
<p>实际运用时，要根据实际情况使用预加载和预解析的技巧，可以有效加快网站访问速度。</p>
<hr>
<p>本文参考资料</p>
<ul>
<li><a href="http://bubkoo.com/2015/11/19/prefetching-preloading-prebrowsing/" target="_blank" rel="external">前端性能优化 - 资源预加载</a></li>
<li><a href="http://delai.me/code/dns-prefetching/" target="_blank" rel="external">预加载系列一：DNS Prefetching 的正确使用姿势</a></li>
<li><a href="https://developers.google.com/web/fundamentals/" target="_blank" rel="external">Google Web Fundamentals</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> Resource Hint </tag>
            
            <tag> Prefetch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 性能优化（1）——浅尝 Service Worker]]></title>
      <url>/archives/wpo-by-service-worker.html</url>
      <content type="html"><![CDATA[<p>静态内容非常适合做缓存来加速页面的访问，除了使用 CDN 实现加速之外，通过客户端也可以实现更好的访问体验。本文就利用 Service Worker 来探讨基于静态资源的加速方案。</p>
<a id="more"></a>
<blockquote>
<p><del>ServiceWorker 对动态页面依然有效，但是效果不如静态站效果显著。</del><br>对于动态页面，Google 推出了 sw-toolbox，借助 Service Worker 的一系列接口实现了更强的缓存 API 和网络加载请求处理，使其能适合动态页面缓存。我也在《<a href="https://blog.nfz.moe/archives/sw-toolbox-practice.html">本博客对 sw-toolbox 的实践</a>》一文中介绍了 sw-toolbox。我推荐无论是静态站还是动态站，都使用 sw-toolbox。</p>
</blockquote>
<p>Service worker 是 PWA 这类 WebApp 的重要支持，因为可以使 web 支持离线体验。除此以外，Service Worker 还支持通知推送和后台同步。当然这里我们用的是它离线加载的特性来优化网站体验。</p>
<h1 id="启用 -Service-Worker- 支持"><a href="# 启用 -Service-Worker- 支持" class="headerlink" title="启用 Service Worker 支持"></a>启用 Service Worker 支持 </h1><h2 id="在首页添加 -Service-Worker- 注册代码"><a href="# 在首页添加 -Service-Worker- 注册代码" class="headerlink" title="在首页添加 Service Worker 注册代码"></a> 在首页添加 Service Worker 注册代码</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
if ('serviceWorker' in navigator) {navigator.serviceWorker.register('/sw.js');
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码向下兼容 Service Worker，检测浏览器是否支持 Service Workers。如果支持就会根据 <code>sw.js</code> 注册 Service Workers 服务。如果浏览器不支持就不会注册。</p>
<h2 id="添加 -Service-Workers- 所需文件"><a href="# 添加 -Service-Workers- 所需文件" class="headerlink" title="添加 Service Workers 所需文件"></a>添加 Service Workers 所需文件 </h2><p> 你可以从 <a href="https://gist.github.com/neoFelhz/50800b701d00dc6d874be95da2cd7655" target="_blank" rel="external"> 这里 </a> 下载到所需的文件，将其放在网站根目录下。</p>
<ul>
<li><code>sw.js</code></li>
<li><code>offline.svg</code></li>
<li><code>offline.html</code> 你可以用 Hexo 生成一个独立页面，也可以自己写一个。</li>
</ul>
<blockquote>
<p>由于 Service Worker 的离线加载特性，在浏览者离线以后依然可以访问已经缓存了的页面。但是对于没有缓存的页面和图片，你可以通过 <code>offline.svg</code> 和 <code>offline.html</code> 加以提示。</p>
</blockquote>
<p>修改 <code>sw.js</code> 中的下述内容。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ignoreFetch <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token regex">/https?:\/\/cdn.bootcss.com\//</span><span class="token punctuation">,</span>
  <span class="token regex">/https?:\/\/www.google-analytics.com\//</span><span class="token punctuation">,</span>
  <span class="token regex">/chrome-extension:\/\//</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这部分定义了你不需要缓存的资源，用的是正则表达式对资源进行匹配。这里给出了按域名进行排除的例子。如果你无法判断哪些资源不需要缓存，请用 F12 打开 Dev Tools 的 Source 选项卡逐个加以筛选；如果还不会，就把你看到的所有不是源站的域名统统输进去。</p>
<h1 id="加速效果"><a href="# 加速效果" class="headerlink" title="加速效果"></a>加速效果 </h1><p> 这是第一次访问的效果。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000071.png" alt="0000071.png"></p>
<p>可以看到，第一次访问不能算太理想，花费 1.39s 才完成了 DOMLoad，所需资源全部加载完实际上花了 1.69s。</p>
<blockquote>
<p>可以看到，实际上网络资源花费了 3.11s 才加载完。我特意截图了最后加载的几个有齿轮标识的资源。<del>这些是 ServiceWorker 在 <code>sw.js</code> 里加载的资源——offline.svg 和 offline.html。</del>博客更新以后，离线提示页面被下线，不会再加载 offline.svg 和 offline.html。</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000072.png" alt="0000072.png"></p>
<p>这是第二次访问的效果。DOMLoad 只花费了 571ms，全部资源加载只需要 608ms。可以看到，很多资源 <code>from  ServiceWorker</code>。说明 ServiceWorker 拦截了请求，直接从 ServiceWorker 获得资源。</p>
<blockquote>
<p>看见没有？连 <code>blog.nfz.moe</code> 都被 ServiceWorker 拦截了，现在你知道为什么可以离线加载了吧。</p>
</blockquote>
<h1 id="先决条件"><a href="# 先决条件" class="headerlink" title="先决条件"></a>先决条件 </h1><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p> 你的网站必须 <strong>完整使用  HTTPS 进行加密</strong>！ServiceWorker 一旦被注册，除非有进行定义、或者访问者手动在 Dev Tools 内 Unregister 了 ServiceWorker，否则你的资源都将被 ServiceWorker 接管，一旦访问者第一次加载资源时被攻击或者被劫持，后果则不堪设想。在开发过程中，可以通过 <code>localhost</code> 予以调试，但是生产环境必须高度可靠。</p>
<h2 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use?"></a>Can I Use?</h2><p><a href="http://caniuse.com/#feat=serviceworkers" target="_blank" rel="external">http://caniuse.com/#feat=serviceworkers</a></p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000073.png" alt="0000073.png"></p>
<p>根据 Google 的文档表明，Chorme、Firefox 和 Opera 都支持；Microsoft Edge 现在表示公开支持。Safari 也暗示未来会进行相关开发。</p>
<hr>
<p>参考文章：</p>
<ul>
<li><a href="https://yangbo.tech/2017/01/15/2017-01-15-speedy-and-offline-site-by-service-worker/" target="_blank" rel="external">使用 Service worker 实现加速 / 离线访问静态 blog 网站</a></li>
<li><a href="https://www.anotherhome.net/2954" target="_blank" rel="external">Service Workers 实现网站加速和离线缓存</a></li>
<li><a href="https://segmentfault.com/a/1190000008491458" target="_blank" rel="external">Service Workers 与离线缓存</a></li>
</ul>
<p>以及 Google 的 <a href="https://developer.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">ServiceWorker</a> 有关文档。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端优化 </tag>
            
            <tag> Web </tag>
            
            <tag> Service Worker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为 Hexo 博客添加评论系统]]></title>
      <url>/archives/add-comment-system-to-hexo.html</url>
      <content type="html"><![CDATA[<blockquote>
<p> 由于 Hexo 本身已经弃用了 swig 支持，所以本文教程是根据 ejs 语言来写的。如果使用了如 NexT 等基于 swig 的 Hexo 主题，请自行切换。</p>
</blockquote>
<p>Hexo 是一款静态博客，所以不像 WordPress 或者 Typecho 这类动态博客一样支持原生评论系统，所以一般需要引入第三方评论系统。国内常见的评论系统有多说、友言、畅言等，国外的有 Disqus 和 Moss。</p>
<blockquote>
<p>在写作本文的时候，多说已经宣布即将暂停服务，很多使用多说的人都在寻找解决方案；加上网络上找到的解决方案大多都不具备通用性，而且也不具备太多指导意义，这也是为什么我写作本文的原因。</p>
<p><strong>强烈建议：</strong>在阅读本文并根据本文进行操作前，请仔细阅读 Hexo 的 API 和主题开发的有关文档！</p>
</blockquote>
<h1 id="修改主题配置文件"><a href="# 修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件 </h1><p> 在主题文件夹下的 <code>_config.yml</code> （以下简称主题配置文件）合适位置中加入以下内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">comment</span><span class="token punctuation">:</span> 
    <span class="token key atrule">use</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">shortname</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>YOUR_SHORTNAME<span class="token punctuation">}</span>
    <span class="token key atrule">thread_key</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>IDENTIFIER<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，这些评论系统的配置内容仅供参考。有的评论系统可能需要配置更多信息或者不需要配置某些信息（如友言需要配置 conf、appid 而不是 shortname），请自行根据需求进行修改。</p>
<blockquote>
<p>如果你的修改只是给你一个人使用，这一步可以忽略。但是如果你想把你的成果分享出去或提交给上游，建议通过主题配置文件的方法配置这些属性，这样可以方便更多人使用。</p>
</blockquote>
<h1 id="添加评论 -ejs"><a href="# 添加评论 -ejs" class="headerlink" title="添加评论 ejs"></a>添加评论 ejs</h1><p>在主题内的合适位置新建一个 ejs 文件，命名如 <code>comment.ejs</code>，填入评论框的公共代码（即包括引用有关 js 文件等的代码）加上评论框的代码。</p>
<blockquote>
<p>对于评论系统的公共代码，你也可以插入在其它位置。以 Material 主题为例，typecho-theme-material 的评论公共代码在侧边栏，hexo-theme-material 的评论公共代码在 footer。</p>
</blockquote>
<p>然后，替换提供的代码中的有关变量。常见的变量有 shortname、page_identifier 等。这些变量可以通过 Hexo 的 API 进行调用。比如你可以使用 <code>&lt;%= theme.comment.shortname %&gt;</code> 这样的 API  即可调用你在主题配置文件中的 <code>comment.hortname</code> 属性中赋的值。</p>
<blockquote>
<p>当然，正如我在上一步所说，如果你的修改只是供你一个人使用，你可以直接将你的变量值替换到这段代码中，而不需要额外通过主题配置文件进行调用。</p>
</blockquote>
<h1 id="在文章页面添加评论"><a href="# 在文章页面添加评论" class="headerlink" title="在文章页面添加评论"></a>在文章页面添加评论 </h1><p> 在类似于 <code>post.ejs</code> 的文件中，在文章结尾处插入<code>&lt;%- partial(&#39;/THE_PATH_TO/comment&#39;) %&gt;</code> 来调用 <code>/YOUR PATH/comment.ejs</code> 文件。这样在 Hexo 生成静态页面时就会把评论部分插入进去。</p>
<h1 id="实践"><a href="# 实践" class="headerlink" title="实践"></a>实践 </h1><p> 以上内容是 Hexo 主题加入评论系统的方法。现在介绍一下 <a href="https://material.viosey.com" target="_blank" rel="external">Material</a> 主题的评论系统是如何添加的。</p>
<p>Material 主题涉及到评论系统的组件有：</p>
<ul>
<li>post.ejs（文章页面，引用评论系统）</li>
<li>layout/_partial/comment.ejs（评论框）</li>
<li>layout/_partial/footer-option.ejs（评论系统公共代码）</li>
<li>layout/_widget/disqus.ejs（Disqus 评论框组件）</li>
<li>layout/_widget/duoshuo.ejs（多说评论框组件）</li>
</ul>
<p>首先，我们在主题配置文件中，写入以下内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Comment Systems</span>
<span class="token comment" spellcheck="true"># Available value of "use":</span>
<span class="token comment" spellcheck="true">#     duoshuo | disqus</span>
<span class="token key atrule">comment</span><span class="token punctuation">:</span>
    <span class="token key atrule">use</span><span class="token punctuation">:</span>
    <span class="token key atrule">shortname</span><span class="token punctuation">:</span>
    <span class="token key atrule">duoshuo_thread_key_type</span><span class="token punctuation">:</span> path
    <span class="token key atrule">duoshuo_embed_js_url</span><span class="token punctuation">:</span> <span class="token string">"https://static.duoshuo.com/embed.js"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这些用来定义评论系统在主题配置文件中的变量。</p>
</blockquote>
<p>然后，在 <code>footer-options.ejs</code> 加入下述代码：</p>
<pre class="line-numbers language-html"><code class="language-html">&lt;% if(theme.comment.use === 'duoshuo') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 多说公共 js 代码 start --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        queue.offer(function(){
            var duoshuoQuery = {short_name: '&lt;%= theme.comment.shortname %>'};
            (function() {var ds = document.createElement('script');
                ds.type = 'text/javascript';
                ds.async = true;
                ds.src = '&lt;%= theme.comment.duoshuo_embed_js_url %>';
                ds.charset = 'UTF-8';
                (document.getElementsByTagName('head')[0]
                 || document.getElementsByTagName('body')[0]).appendChild(ds);
            })();});
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 多说公共 js 代码 end --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

&lt;% if(theme.comment.use === 'disqus') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用 DISQUS js 代码 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dsq-count-scr<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//&lt;%<span class="token punctuation">=</span> theme.comment.shortname %<span class="token punctuation">></span>.disqus.com/count.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这一段包括了一个判断，那就是通过判断用户在主题配置文件里配置的值来判断用户选择的评论系统，并选择加载哪一段代码。</p>
</blockquote>
<p>接下来是创建 <a href="https://github.com/viosey/hexo-theme-material/blob/master/layout/_widget/disqus.ejs" target="_blank" rel="external"><code>duoshuo.ejs</code></a> 和 <a href="https://github.com/viosey/hexo-theme-material/blob/master/layout/_widget/duoshuo.ejs" target="_blank" rel="external"><code>disqus.ejs</code></a>。这个是评论框的组件。里面的一些变量换成了由 Hexo 的主题配置文件里的变量。</p>
<blockquote>
<p>下面这个是 <code>duoshuo.ejs</code> 的内容。</p>
</blockquote>
<pre class="line-numbers language-html"><code class="language-html">&lt;%- css('css/duoshuo.min') %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#ds-thread</span> <span class="token id">#ds-reset</span> <span class="token class">.ds-post-button</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= theme<span class="token number">.</span>uiux<span class="token number">.</span>theme_color <span class="token number">%</span>> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#ds-wrapper</span> <span class="token id">#ds-reset</span> <span class="token class">.ds-icons-32</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= theme<span class="token number">.</span>uiux<span class="token number">.</span>theme_color <span class="token number">%</span>> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#ds-reset</span> <span class="token class">.ds-highlight</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= theme<span class="token number">.</span>uiux<span class="token number">.</span>theme_color <span class="token number">%</span>> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 多说评论框 start --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds-thread<span class="token punctuation">"</span></span>
        <span class="token attr-name">data-thread-key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.comment.duoshuo_thread_key_type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>id<span class="token punctuation">'</span> ? page.id : page.path %<span class="token punctuation">></span><span class="token punctuation">"</span></span>
        <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- config.url + config.root + page.path %<span class="token punctuation">></span><span class="token punctuation">"</span></span>
        <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> page.title %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 多说评论框 end --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>下面这个是 <code>disqus.ejs</code> 的内容。</p>
</blockquote>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disqus_thread<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    queue.offer(function() {var disqus_config = function () {this.page.url = '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">config.url</span> <span class="token attr-name">+</span> <span class="token attr-name">url_for(path)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>';  // Replace PAGE_URL with your page's canonical URL variable
                this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
            };
            (function() { // DON'T EDIT BELOW THIS LINE
                var d = document;
                var s = d.createElement('script');
                s.src = '//&lt;%= theme.comment.shortname %>.disqus.com/embed.js';
                s.setAttribute('data-timestamp', + new Date());
                (d.head || d.body).appendChild(s);
            })();});
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>本文给了这两个文件在 Github 的链接。大家可以直接参考。</p>
</blockquote>
<p>然后我们创建了 <code>comment.ejs</code>，根据用户的配置，判断加载哪一个评论框。</p>
<pre class="line-numbers language-html"><code class="language-html">&lt;% if(theme.comment.use === 'duoshuo') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用多说评论 --></span>
    &lt;%- partial('_widget/duoshuo') %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

&lt;% if(theme.comment.use === 'disqus') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用 DISQUS --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disqus-comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &lt;%- partial('_widget/disqus') %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#disqus-comment</span></span><span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>pc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

&lt;% if(theme.comment.use === 'disqus_click') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用 DISQUS_CLICK --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disqus-comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
        &lt;%- partial('_widget/disqus_click') %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#disqus-comment</span></span><span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>pc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是在 <code>post.ejs</code> 里引用这个模块加载评论。</p>
<pre class="line-numbers language-ejs"><code class="language-ejs"><%- partial('_partial/comment') %>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>在 Material 主题现有的框架基础上添加评论系统可以参考 Material 主题的 <a href="https://github.com/viosey/hexo-theme-material/pull/247" target="_blank" rel="external">Pull Request #247</a>，这是一位 Contributer 为 Material 主题添加了畅言评论系统的支持。</p>
</blockquote>
<p>由于多说的关闭，Material 主题接下来也会去除对多说评论系统的支持。 大家可以根据本文的思路自己更换为新的评论系统。我们也欢迎大家把你的改动贡献到给 Material 主题，来 Open a new pull request 吧！</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 评论 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 多说 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 GitLab CI 实现 Hexo 持续部署]]></title>
      <url>/archives/hexo-auto-deploy-with-gitlab-ci.html</url>
      <content type="html"><![CDATA[<p>自从使用 Hexo 博客以来，我一直在研究如何实现在任何平台上自由编写和发布 Hexo 博客。<a id="more"></a>之前我在 <a href="https://blog.neofelhz.space/archives/hexo-auto-deploy-with-daocloud.html" target="_blank" rel="external">《Hexo 持续自动化部署》</a> 和<a href="https://blog.neofelhz.space/archives/hexo-auto-deploy-with-flow-ci.html" target="_blank" rel="external">《用 Flow.CI 让 Hexo 持续集成》</a>两篇文章中分别讲述了使用 DaoCloud 的 Docker 和 Flow.CI 的 Sass 平台部署持续集成的 Hexo，但是如今 DaoCloud 部署越来越慢，Flow.CI 也已经转向收费；所以我不得不寻找新的替代方案。</p>
<p>很早就听说了 GitLab。</p>
<blockquote>
<p>就是那个最近因为不小心使用 <code>rm rf</code> 把自家数据库删光、还在 YouTube 上直播修库、让失误的程序员看了 10 小时的 <em>nyancat</em> 的那个 GitLab。</p>
</blockquote>
<p>GitLab 有面向企业的计划、有开发独立的服务端程序，所以和主要面向平民化的码农天堂 Github 一口气亏损 6600 亿美元不同，GitLab 至少并没有亏损。这一点和 Coding 颇为类似——无论是运营方式还是盈利方式，甚至是网站 UI 交互层面。</p>
<p>接下来事情就很简单了。</p>
<h1 id="准备工作"><a href="# 准备工作" class="headerlink" title="准备工作"></a>准备工作 </h1><p> 首先，在 GitLab 创建一个新的私有库，用来存储我的博客工程文件；在我的本地的 Hexo 博客工程文件中的 Repository 里添加一个新的 Remote 到 GitLab。然后从原来的 repo 上 <code>git pull</code>，并 <code>git push</code> 到 GitLab。<br>现在我在 Coding 和 GitLab 上都有了 Hexo 博客的工程文件。接下来就是直接部署 CI 平台了。</p>
<h1 id="编写 -workflow"><a href="# 编写 -workflow" class="headerlink" title="编写 workflow"></a>编写 workflow</h1><p>和 Github 的 Travis.CI 类似，你只需要在 Repository 的根目录上新建一个 <code>.gitlab-ci.yml</code> 你就可以实现 GitLab 的 CI 平台执行自动部署。</p>
<blockquote>
<p>在 GitLab，CI 和 Repository 是高度集成的。你可以在 <code>pipeline</code> 里看到你的 CI 运行信息。</p>
</blockquote>
<p>在 <code>.gitlab-ci.yml</code> 中填入下述内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> neoFelhz/hexo<span class="token punctuation">-</span>docker
<span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> node_modules/

  <span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> hexo clean &amp;&amp; hexo g
  <span class="token punctuation">-</span> hexo d
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>上述脚本会自动在每次 push 后帮你生成 Hexo 静态文件。至于 <code>hexo d</code>，你需要事先部署好 Deploy 方式。<br>如果需要部署到 GitLab Pages，请把上面 <code>build</code> 节点更名为 <code>pages</code> 并在 <code>pages</code> 节点中添加下述子层级内容：</p>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml">  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> public
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>同时需要去掉 <code>hexo d</code>。</p>
<blockquote>
<p>至于这些脚本的原理，你可以直接参考我之前那两篇关于 CI 部署 Hexo 的博客。</p>
</blockquote>
<h1 id="SSH- 有关"><a href="#SSH- 有关" class="headerlink" title="SSH 有关"></a>SSH 有关 </h1><p> 一些人可能在用 Github Pages 或者 Coding Pages，或者是使用的自己的 VPS（git 部署）。这样一来你就可能需要使用 SSH 连接你的 webserver 仓库。（当然，用 Caddy 做 webserver 和定时 git pull 那个算是异类）。这些你可以在 GitLab CI 的 wiki 上查看到 <a href="https://docs.gitlab.com/ee/ci/ssh_keys/README.html" target="_blank" rel="external">GitLab CI SSH 配置的相关内容</a>。</p>
<blockquote>
<p>值得一提的是，和 DaoCloud 和 Flow.CI 不同，GitLab CI 可以通过设置 <strong>环境变量</strong> 的方式加载你的 SSH 的私钥，这样子就不需要把你的私钥放在你的项目仓库里，有效防止私钥泄露到第三方。这种环境变量的方式不仅安全，而且灵活。<br>GitLab CI 配置环境变量的位置是 <code>Setting -&gt; Pipelines -&gt; Secret variables</code>，如下图所示：</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000157.png" alt="0000157.png"></p>
<h1 id="小结"><a href="# 小结" class="headerlink" title="小结"></a>小结</h1><blockquote>
<p>本文就是由 GitLab CI 生成并发布的。</p>
</blockquote>
<p>本文介绍了利用 GitLab CI 进行持续集成 / 部署，今后的使用和之前的方式一样，向仓库提交 push 就可以触发自动部署。<br>和 Daocloud 和 Flow.CI 的代码构建相比，GitLab CI 为持续集成 / 部署优点如下：</p>
<ul>
<li>目前私有库完全免费</li>
<li>可以和 GitLab 的 Repository 无缝兼容，无需第三方 CI 平台接入。</li>
<li>支持在 <code>hexo deploy</code> 的同时自动发布到 GitLab Pages</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI </tag>
            
            <tag> GitLab CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不仅仅只是锦上添花——谈启用 HTTPS 的重要性]]></title>
      <url>/archives/the-importance-of-using-https.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>HTTPS 早就不是锦上添花的可有可无项，它已经逐渐成为 WEB 服务的标配。——JerryQu</p>
</blockquote>
<a id="more"></a>
<h1 id="HTTPS- 是什么"><a href="#HTTPS- 是什么" class="headerlink" title="HTTPS 是什么"></a>HTTPS 是什么</h1><p>HTTPS 是 <code>Hypertext Transfer Protocol Secure</code> 的缩写。HTTPS 利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。</p>
<h1 id="HTTP- 的安全性问题"><a href="#HTTP- 的安全性问题" class="headerlink" title="HTTP 的安全性问题"></a>HTTP 的安全性问题 </h1><p> 众所周知，对 web 服务启用 HTTPS 普遍地比 HTTP 安全。HTTP 协议固然简单方便，易于部署，但是在设计之初也没有考虑安全性，所有内容都是使用明文传输，也就为现在的安全问题埋下了隐患。用户在基于 HTTP 协议的 web 应用上的传输内容都可以被中间者轻易查看和修改。</p>
<blockquote>
<p>这里所谓的中间者是指网络传输内容需要经过的网络节点，既有硬件也有软件，比如代理服务器、DNS、路由、通信基站 . . . . . . 这里面最容易拿到用户内容的就是各种通信服务运营商和二级网络带宽提供商。</p>
</blockquote>
<p>我们身边就时常发生中间人攻击，比如：</p>
<ul>
<li>使用移动数据浏览网页时运营商添加的流量球</li>
<li>浏览网页时底部莫名冒出来的广告</li>
<li>在下载文件时却得到了另外别的文件</li>
<li>等等等等 . . . .</li>
</ul>
<h1 id="HTTPS- 为什么更加安全"><a href="#HTTPS- 为什么更加安全" class="headerlink" title="HTTPS 为什么更加安全"></a>HTTPS 为什么更加安全 </h1><p> 通俗一点讲，HTTPS 有以下一些安全方面的优势。</p>
<ul>
<li>内容在传输过程中使用了对称加密，所以不会被第三方查看到。就像快递员运输的包裹都进行了封装，别人无法知道里面装了什么东西。</li>
<li>数据完整性。及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收。</li>
<li>身份校验。保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方。</li>
</ul>
<h1 id="HTTPS- 的劣 -wu- 势 -qu"><a href="#HTTPS- 的劣 -wu- 势 -qu" class="headerlink" title="HTTPS 的劣 (wu) 势(qu)"></a>HTTPS 的劣 (wu) 势(qu)</h1><p>在种种反对 HTTPS 的呼声中，我挑选了一些具有代表性的看法列举在这里，并加以讨论——</p>
<h2 id="HTTPS- 导致性能下降？"><a href="#HTTPS- 导致性能下降？" class="headerlink" title="HTTPS 导致性能下降？"></a>HTTPS 导致性能下降？</h2><p>HTTPS 链接和 HTTP 链接都建立在 TCP 协议之上。HTTP 链接比较单纯，使用三个握手数据包建立连接之后，就可以发送内容数据了。但是 HTTPS 链接在这三步结束以后，它还有一个 SSL/TLS 握手的环节，再加上 HTTPS 应用数据传输需要经过对称加密。所以使用 HTTPS 连接的过程的确会比 HTTP 复杂。<br>但是，随着服务器、浏览器在性能上的大幅提升，经过良好优化后 HTTPS 带来的性能损耗完全可以接受。更何况，部署 HTTPS 便可以启用 HTTP/2，大大提升 WEB 性能。所有浏览器都只支持 HTTP/2 Over TLS。也就是说，<strong>浏览器可以使用的 HTTP/2 必须基于 HTTPS 部署</strong>。</p>
<h2 id="HTTPS- 并不非常可靠？"><a href="#HTTPS- 并不非常可靠？" class="headerlink" title="HTTPS 并不非常可靠？"></a>HTTPS 并不非常可靠？</h2><p>是的。但是，并没有任何一种协议和加密方式是彻底安全的。HTTPS 在一定程度上，依旧可以保证用户传输数据的安全。</p>
<p><strong>HTTPS 的几个常见安全问题</strong>：</p>
<ul>
<li>web 服务提供商没有做自动从 HTTP 跳转到 HTTPS，所以用户可能还是会通过不安全的 HTTP 访问提供的 web 服务。</li>
<li>就算 web 服务提供商设置了从 HTTP 用 301 或者 302 跳转到 HTTPS，首次连接也需要使用 HTTP，中间人依然可以在第一次连接时发起攻击。</li>
<li>就算启用了 HSTS，让浏览器在以后访问该站点时都默认永久在浏览器本地预先用 307 做好从 HTTP 跳转到 HTTPS，并杜绝不安全的 HTTPS 链接，但第一次访问时浏览器才可能得到 HSTS 响应头，中间人甚至可以在第一次连接时入侵并劫持和替换成攻击者自己的证书（心血漏洞）。</li>
</ul>
<blockquote>
<p>心血漏洞的一个典型案例就是，在今日头条的官网下载手机客户端，就算已使用 HTTPS 访问，每次按下下载按钮下载下来的安装包的 MD5 检验都是不一样的（由 WJXXBSH 发现）</p>
<p>目前我的域名已经加入了 HSTS Preload List，内置在现代的浏览器内，通过浏览器更新分发到全球各地。这是目前唯一可以避免心血漏洞的办法。</p>
</blockquote>
<h2 id="启用 -HTTPS- 很复杂？"><a href="# 启用 -HTTPS- 很复杂？" class="headerlink" title="启用 HTTPS 很复杂？"></a>启用 HTTPS 很复杂？</h2><p>从 HTTP 切换成 HTTPS 确实会引入很多新工作，例如生成 CSR 和获取证书、SSL 配置、全站资源替换、配置 web 服务端环境，等等等等。从 HTTP 切换到 HTTPS 的过程是比较麻烦，但是一旦完成了所有工作，之后就不需要投入太多精力在这上面。<br>我切换 HTTP 到 HTTPS 花了我一晚上，我觉得是绝对值得的。</p>
<h2 id="HTTPS- 成本很高？"><a href="#HTTPS- 成本很高？" class="headerlink" title="HTTPS 成本很高？"></a>HTTPS 成本很高？</h2><p>为了让浏览器确认你的 HTTPS 安全，你的证书必须要从根证书颁发机构购买浏览器和客户端能够识别的 SSL 证书。但是对于个人来说，有很多零费用的证书方案可供选择，比如 Let’s Encrypt。而对于中大型企业来说，HTTPS 证书采购成本基本可以忽略不计。</p>
<blockquote>
<p>我的博客就采用了 Let’s Encrypt 的 SSL 证书，<del>我的个人主页则是用 TrustAsia 的 SSL 证书</del>（个人主页更换主机商，已经主动将 TrustAsia 的免费 SSL 吊销。现在旗下所有网站都在用 Let’s Encrypt）。我用的这些证书都是免费的。</p>
</blockquote>
<h2 id="我的网站没有敏感内容，所以不需要 -HTTPS"><a href="# 我的网站没有敏感内容，所以不需要 -HTTPS" class="headerlink" title="我的网站没有敏感内容，所以不需要 HTTPS"></a>我的网站没有敏感内容，所以不需要 HTTPS</h2><blockquote>
<p>这就是 “一句” 的开发者所坚持的 “HTTPS 无用论” 观点的核心内容。</p>
</blockquote>
<p>实际上，并不是只有银行、电商等跟钱打交道的网站才需要部署 HTTPS。首先正如我之前列举和说明的，非 HTTPS 网站很容易被劫持和攻击、插入广告，严重影响用户体验。再比如，一些流量很大的热门网站，如果不部署 HTTPS 很容易被别有用心的人利用，例如 2015 年国内某著名大型网站的 JS 就被某些“自己人”主动劫持，用来 DDoS 攻击 Github。</p>
<blockquote>
<p>在 2017 年，再一次出现了百度统计的 JS 被劫持后用来攻击法轮功境内镜像网站的事件，详情可看 <a href="https://www.v2ex.com/t/384241" target="_blank" rel="external">V2EX</a> 这篇帖子。<br>当然，如果你的站点根本不在乎用户体验，当然我们也无话可说。</p>
</blockquote>
<hr>
<p>当然，并不是说部署了 HTTPS 就可以高枕无忧。HTTPS 解决的只是数据传输过程的安全性和保密性。用户客户端被病毒感染、服务端被入侵、使用有漏洞的证书签发商签发的 SSL 证书（如 <a href="https://blog.viosey.com/2016/11/06/Change-SSL-license-to-AlphaSSL" target="_blank" rel="external"> 沃通漏洞事件 </a> 和 CNNIC 滥签事件），SSL 证书过期或者失效，都会引起 HTTPS 环境的不安全。<br>简而言之，HTTPS 页面 <strong> 不一定是 </strong> 安全环境。但是无论如何，HTTP 页面 <strong> 一定不是 </strong> 安全环境。</p>
<p>如今，Chrome 已经 <del>开始 </del> 主动把 HTTP 页面标记为 <strong> 不安全</strong>， Safari 也开始推进 HTTPS。现在的 HTTPS，正如 JerryQu 所说，HTTPS 已经不再是锦上添花的可有可无项，它已经逐渐成为 WEB 服务的标配。</p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> HSTS </tag>
            
            <tag> SSL </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Disqus 评论加载模式思路分析]]></title>
      <url>/archives/how-to-show-disqus-comment-in-gfw.html</url>
      <content type="html"><![CDATA[<p>Disqus 因为一些显而易见的问题，所以无法在一些 公正、平等、有序 的网络环境直接加载。</p>
<a id="more"></a>
<blockquote>
<p>为什么要使用 Disqus 而不使用多说，可以阅读我的另一篇博客——<a href="https://blog.neofelhz.space/archives/hello-disqus-and-goodbye-duoshuo.html" target="_blank" rel="external">《你好 Disqus，再见多说》</a></p>
<p>现在为了博客的加载速度，你可以看到我博客底部评论区新增加了一个按钮，点击按钮以后才能加载评论。由于这个不主动加载 Disqus 的设计，我博客的 DOM Load 成功减少了 0.4s。这个功能在 hexo-theme-material 主题 1.3.0 时发布。</p>
</blockquote>
<p>但是为了解决浏览者看评论的问题，由于 Disqus 的跨域加载限制，在中国国内的互联网环境下加载 Disqus，不得不另辟蹊径。</p>
<p>Disqus 提供了一套完整的 API，可以调用很多类型的数据，比如评论数量、评论内容等等数据。调用地址是 disqus.com/api，这里是 <a href="https://disqus.com/api/docs" target="_blank" rel="external">Disqus API 的文档 </a>。<br> 由于 API 返回的是字符或者 json 文件，所以这时我们就可以通过反代 API 的地址就可以成功地获取到 json 数据。接下来只需要通过 JS 解析 json，转义成列表，展现出来即可。</p>
<p>对于指定页面加载指定评论，可以在调用 API 时用参数加以限制。Disqus 的 shortname 和文章标识符可以不需要动态生成，用 Hexo 的函数和 ejs 调用即可。例如通过 <code>&lt;%= theme.comment.shortname %&gt;</code> 可以调用主题配置文件里的 Disqus Shortname，用 <code>&lt;%- page.path %&gt;</code> 获取当前页面的标识。</p>
<blockquote>
<p>以下就是你可以获取到评论列表 json 的地址。</p>
</blockquote>
<pre><code>https://YOUR.DOMAIN/api/3.0/threads/list.json?forum=&quot; + YOUR DISQUS SHORTNAME + &quot;&amp;thread=ident:&quot; + &quot;&lt;%- page.path %&gt;&quot; + &quot;&amp;api_key= YOUR API KEY&quot;
</code></pre><p>那么，什么时候用评论浏览模式，什么时候加载 Disqus，我们需要做一个判断。可以判断 Disqus 下的一些特定元素能不能加载（比如那个加载动画），一旦加载超时了，就切换到评论浏览模式。当然为了避免误判，我们可以保留那个按钮，做好切换功能。</p>
<p>当然，Disqus 的 API 的功能非常完善，除了可以加载评论列表，还可以回传评论。<a href="https://imququ.com" target="_blank" rel="external">屈哥（前端大菊苣）的博客 </a> 的 Disqus 评论就可以支持本地评论，然后服务器异步回传给 Disqus。</p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 评论 </tag>
            
            <tag> Disqus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从 Material 主题学习开源项目管理的一点技巧]]></title>
      <url>/archives/how-to-manage-a-open-source-project-from-material.html</url>
      <content type="html"><![CDATA[<p>我是我博客用的 Material 主题的 <code>collaborater</code> 之一。<a href="https://material.viosey.com" target="_blank" rel="external">hexo-theme-material</a> 现在在 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">Github</a> 有 <a href="https://github.com/viosey/hexo-theme-material/stargazers" target="_blank" rel="external"><img src="https://img.shields.io/github/stars/viosey/hexo-theme-material.svg?style=flat-square" alt="GitHub stars"></a> 和 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external"><img src="https://img.shields.io/github/contributors/viosey/hexo-theme-material.svg?style=flat-square" alt="GitHub contributors"></a>，即将成为 Hexo 上 star 数前三的主题。<br>现在我把我从参与这个主题里学到的开源项目的管理技巧分享出来给大家作为参考。</p>
<a id="more"></a>
<blockquote>
<p>本文的缩略图分别包含了 Material 主题的项目分支网络、图标，以及用主要贡献者的名字拼出来的 Material 字样。</p>
</blockquote>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>首先，Material 主题是在 Github 上开源的，所以 Material 主题的版本管理系统自然是 Git 。<br>目前公认的是，Git 是目前、也是未来很长一段时间、甚至有可能永远的是世界上最先进的分布式版本管理系统。</p>
<blockquote>
<p>另一种著名的版本管理系统，SVN，世界上著名的集中式版本管理系统，也在向分布式发展。但可以预见的是，在未来的很长一段时间，SVN 依然不能撼动 Git 的分布式版本管理的地位。</p>
</blockquote>
<p>Git 的几大特点包括使用于分布式模式、可以记录每次文件的改动、可以实现协同开发、无需管理不同版本的不同文件。如果想查看某次改动，只需要检索日志即可。<br>下面提到的这些项目管理的技巧全部基于 Git 的特点。</p>
<h1 id="Commit- 信息格式"><a href="#Commit- 信息格式" class="headerlink" title="Commit 信息格式"></a>Commit 信息格式</h1><p>Git 的特点是可以记录你文件的往期动态改动记录。对于代码进行版本管理、代码追溯、质量管理时，检索 commit 日志是非常重要的。所以，如果你的 commit 信息是整齐和有条理的，那么就会方便很多。</p>
<p>（而且，如果你的 commit 信息记录整齐，那么别人对你的项目印象也会好很多。新来的人参与开发时，也能很快理清楚你过去的开发脉络，更好地融入开发）</p>
<p>我们的 commit 记录分别记录了提交的类型（新特性、修复还是重构）、改动部分（侧边栏、页脚、图标还是文章页面）和改动和目的。所以我们可以现在很轻松的进行 Code Review（以及精准地抓人来背锅），在发布新版本时也明确知道这个版本都干了什么。</p>
<blockquote>
<p>这是 <a href="https://github.com/viosey/typecho-theme-material" target="_blank" rel="external">typecho-theme-material</a> 的 commit 日志记录。</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000067.png" alt="000067.png"></p>
<blockquote>
<p>之前只有 viosey 在开发，所有 commit 日志记录只有版本号，根本无法追溯哪一版本干了什么。后来我接坑了这个主题的开发，所以 commit 日志里简单写了这个提交干了什么。</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000065.png" alt="000065.png"></p>
<blockquote>
<p>到了开发 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">hexo-theme-material</a> 时，我们从 <a href="https://github.com/viosey/hexo-theme-material/commit/40278ed1292e782cabaaec76b6d88d7a2ce8ac12" target="_blank" rel="external"><code>40278ed1292e782cabaaec76b6d88d7a2ce8ac12</code></a> 开始使用了新的 commit 信息规范。这是之后的 commit 记录。</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000066.png" alt="000066.PNG"></p>
<p>想要知道我们的 commit 信息规范，可以阅读 <a href="https://github.com/viosey/hexo-theme-material/wiki/Commit-message-format" target="_blank" rel="external">hexo-theme-material - Contributing Wiki - Commit message format</a>，了解我们每一次 commit 记录的详细含义和规范。</p>
<h1 id="Branches- 管理"><a href="#Branches- 管理" class="headerlink" title="Branches 管理"></a>Branches 管理 </h1><p> 有的时候，我们不得不面临一点“危机”——新加的功能或者特性实在太过冒险，最后出了严重的问题。<br>虽然 Git 提供了 Revert 功能，可以方便的直接回归某条 commit 时的代码状态。但是有一点问题就是你之前的成果都被推倒。<br>如果不 Revert，那么在你一条条 commit 来修复 Bug 和 push 到远程仓库之前你云端的仓库上的代码都是有问题的，而且对别人的协同开发造成不必要的麻烦。</p>
<p>正确做法是把有风险和较大的改动都要新建一个分支进行管理，在新的分支里进行提交。当功能已经完善以后，把分支 Pull Rquest 合并回主分支。这样，就算其它分支改残了，主分支依然是合理和完美的。而且，不同的人协同开发时，可以尽量用不同的分支，互不冲突。</p>
<blockquote>
<p>从 <a href="https://github.com/viosey/hexo-theme-material/commit/7cd11ad840317991bdee7997bf66157634b17950" target="_blank" rel="external"><code>7cd11ad840317991bdee7997bf66157634b17950</code></a> 开始，Material 主题的开发中，我们学习谷歌 Chrome，引入了 <code>canary</code> 的概念。在 Material 主题的仓库中，<code>master</code> 分支被高度保护，所有 PR 都必须经过 两个以上的项目参与者 Review 后才能入库，所以 <code>master</code> 分支是高度稳定的正式版本。以 <code>master</code> 为基础，我们 fork 出一份 <code>canary</code> 分支，用来存放所有未经过完善测试的代码。然后当需要作出较大改动或者重做一个新功能时，再以 <code>canary</code> 分支为基础 fork 一份新的分支进行开发，开发完毕以后再 Pull Request 合并回 <code>canary</code> 分支。当一定阶段的开发结束以后，会有项目参与者参与对 <code>canary</code> 分支的代码进行功能性测试。当验收完毕以后，<code>canary</code> 分支最后再会合并回 <code>master</code>。</p>
</blockquote>
<p>想要知道我们的 Branch 命名的含义，可以阅读 <a href="https://github.com/viosey/hexo-theme-material/wiki/Branch-Name-Format" target="_blank" rel="external">hexo-theme-material - Contributing Wiki - Branch Name Format</a>。</p>
<h1 id="更新日志"><a href="# 更新日志" class="headerlink" title="更新日志"></a>更新日志 </h1><p> 当一个阶段的开发以后，我们就会推出更新日志。对于开发者，这是对过去一段时间自己开发的总结；对于用户，更新日志是他们了解你开发成果的渠道。<br>一个好的更新日志可以清楚地展现你这一段时间的成果，应该包括你修复的 Bug、你新增的 Feature、你做的改动。如果有必要，你还需要列出你的突破性变更（Breaking Changes，一般这类改动会改变用户过去的操作习惯、或者需要用户对其作出新的配置，以及其它包含不向下兼容的改动）。</p>
<blockquote>
<p>从 <a href="https://github.com/viosey/hexo-theme-material/releases/tag/1.2.5" target="_blank" rel="external">1.2.5</a> 开始，Material 主题开始采用新的更新日志格式（灵感来自于我过去制作 ROM 写发包帖的经验）。然后 viosey 参考 <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md" target="_blank" rel="external">Angular Changelog</a> 完善了更新日志格式。我们用成熟了的更新日志格式发布了 <a href="https://github.com/viosey/hexo-theme-material/releases/tag/1.2.6" target="_blank" rel="external">1.2.6</a>。</p>
</blockquote>
<p>如果想学习 Material 的更新日志规范，你可以阅读 <a href="https://github.com/viosey/hexo-theme-material/wiki/Change-log-format" target="_blank" rel="external">hexo-theme-material - Contributing Wiki - Change log format</a>。</p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 项目管理 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[是时候离开了——我眼中的酷安]]></title>
      <url>/archives/coolapk-in-my-mind.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>酷安曾经是一个很 Geek 的地方——至少过去是这样子的。酷安一开始就没有考虑做单纯的应用下载市场。<br>本来酷安在我眼里是一个大家可以自由交流的地方。大家都是高质量的 Android 玩家，人人都有两把刷子；用户可以和开发者自由互动，酷友可以和管理层相互玩笑，大家一起交流心得或者有 dalao 出来普及知识。。。</p>
<p>而如今呢？</p>
<p>一知半解的小白不懂装懂，深谙技巧的机油遭到排挤；开发者开始浮躁地追逐名利，在进步和在努力的却已经潜水不见；热心分享的酷友被迫删帖，打包党和病毒开始招摇过市；抄袭蔚然成风还受到庇护，维护开源和版权却遭到批判；当年叱咤风云的酷安大 V 逐渐离开，猖狂的小学生开始涌进酷安；用户对捐赠嗤之以鼻，对公益和慈善不屑一顾；使用盗版和破解版的人高高在上，坚持入正的酷友却遭到攻击；不负责任的开发者装着委屈，拒绝 HTTPS 的开发者傲然表示无所谓；收购神器拿来作恶的公司被打脸，没经历过历练的商业“团队”辱骂用户、主动下架了自己的作品。</p>
<blockquote>
<p>这一段概括了我经历过的酷安最近的几件大事，包括 <code>没有密码找回 </code>、<code> 柯震恶 </code>、<code>feemo</code> 等大 V 离开酷安，冰箱的开发者和破解者撕逼后潜水，美化版 QQ 分享被迫全部删帖，<code> 夜之浪子 </code> 暂停了他的搬运，<code> 绿色守护 </code> 被打包病毒，<code> 妮乎 </code> 不遵守开源协议抄袭，<code> 酷安小编 </code> 批判维护开源的酷友“过年吃饱了闲的”，几个宣称会黑服务器和抓包的“小学生”给妮哩招黑，<code> 奇葩小超 </code> 的 <code> 奇葩云 </code> 公益捐款被攻击，<code>xMIUI</code> 和 <code> 拾乐 </code> 发生的正版盗版之争，<code> 妮哩萌萌 </code> 用明文传输用户名和密码，<code> 一句 </code> 的开发者坚持 “HTTPS 无用论”，<code> 阻止运行 </code> 被 <code> 猎鹰网络 </code> 收购后种种丑态，<code> 花</code> 的开发团队辱骂用户、最后主动下架。</p>
</blockquote>
<p>不记得是阿酷还是小编说过，酷安就像一个社会，社会百态都会出现，所以管理层一直看淡撕逼。是的，酷安的确像一个小的社会。<br>去过隔壁乐园吗？去过葫芦侠三楼吗？我在那两个里面都逛过一圈。隔壁乐园被自欺欺人的用户和毫无意义的评论填满；葫芦侠三楼被不懂装懂、打包抄袭的猖狂小学生充斥。似乎任何一个社区，最终都会不可避免地要走这个道路，最后堕入深渊，比如现在的知乎和贴吧，比如葫芦侠和手机乐园，比如酷安。<br>酷安小编说过，“酷安一天产生上万条动态”、“难道酷安需要你们撕逼来拉流量？” 是的，酷安的确不需要；同样的，葫芦侠和乐园它们也都不需要。</p>
<p>不记得是哪位酷友说过，酷安本身没有变，是酷友们变了。然而，酷安的灵魂就在于那足够令酷安自豪的高质量的用户。现在用户和开发者像逃离沉船一样，从酷安流失出去。不知道会不会继续有高质量的用户加入酷友的大家庭，为酷安补充新鲜的血液。</p>
<p>我也无所谓再做所谓的普及和分享了。过去一个月以来我进行了两次清理、累计清理了 1100 多条动态；现在留下来 31 条动态，用来告诉大家，我至少在酷安存在过。</p>
<p>酷安其实在转变，酷安的用户也在转变。有的用户不适合新的酷安，就会离开，大家没必要太放在心上。</p>
<hr>
<p>联系我的方式并没有改变。你们依旧可以在我的微博、我的博客、MAT BBS 上找得到我；我的 E-Mail、我的 Telegram、我的 QQ 也没有改变。我并不是从此杳无音信、无处可寻。<br>或许有那么一天，我还会回酷安看看，看看那个改变了我的 2016 年，也改变了我人生方向的那个酷安。</p>
]]></content>
      
        <categories>
            
            <category> 自言语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么安装 Xposed 以后会导致卡顿]]></title>
      <url>/archives/why-xposed-cause-unsmooth-exprience.html</url>
      <content type="html"><![CDATA[<p>经常有人说 Xposed 会带来卡顿的操作体验，甚至会引起掉帧等糟糕的后果。所以我再一次阅读完 Xposed  的文档以后，希望能用 <strong> 通俗的方式 </strong> 做一个回答。</p>
<a id="more"></a>
<p>Xposed 的工作原理我在 <a href="https://blog.neofelhz.space/archives/forcestopgb-lieying-brevent.html" target="_blank" rel="external">《阻止运行、猎鹰网络、黑域 始末》</a> 一文中介绍 Xposed Moudule 的权限时做了简单介绍。这里我再详细地说一遍：</p>
<blockquote>
<p>Xposed 的工作原理是通过替换或劫持 <code>/system/bin/app_process</code> 控制 <code>zygote</code>（而 <code>zygote</code> 孵化了所有应用的进程，可以形象地称之为“进程之母”），使 <code>app_process</code> 在启动过程中加载 Xposed 的重要部分 <code>XposedBridge.jar</code>，这一段 Java 包含了所有的劫持方法，从而完成对 <code>Zygote</code> 进程及其创建的 <code>Dalvik 虚拟机</code> 的劫持，Xposed 在开机的时候利用 <code>XposedBridge.jar</code> 完成在原 Function 执行的前后加上自定义代码的操作，从而完成所有的 Hook Functions。</p>
</blockquote>
<p>在 Android L 时，Xposed 是通过劫持 <code>app_process</code> 来达到 hook 的目的。到了 Android M，谷歌再一次加强了系统安全性，加强了对系统底层（主要是框架 framework）的封装。所以为了实现 hook，就不得不修改 ART（Android Run Time，Android 虚拟机执行进程的方式），从而对 app_process 提供接口。这就是为什么当时 Android L 和 M 的 Xposed 憋了老久才放出来的原因。当然这一次 Android N 的 Xposed 迟迟不出来原因主要是系统安全性的增强和由于系统分区加固而可能需要另辟蹊径 Systemless 的缘故。</p>
<p>说了这么多，还没有说 <code>hook</code> 是什么东西。<code>hook</code>，钩子的意思。那么这个钩子拿来钩什么东西？（反正不是鱼）实际上，钩子钩的是资源，进程调用的资源。让系统本来从 APP 中读取的资源重定向到第三方的模块，这样就实现了在不修改 APP 的情况下实现了对系统资源、APP 资源的替换！从 Zygote 产生出进程开始就已经完成了劫持。这里就和模块有关了。Xposed 提供了一系列钩子，这些钩子就是接口。开发 Xposed 模块的开发者只需要找到需要替换的资源、框架，用 Xposed 的钩子实现替换即可。</p>
<blockquote>
<p>为什么钩子可以实现这个？因为 APK 在运行时会进入虚拟机（Dalvik 或者 ART），然而你在虚拟机里面劫持了原本的 Java API，制作了一个新的可供操作的 API，当然可以实现资源替换、字节码替换了。</p>
</blockquote>
<p>那么 Xposed 到底消耗不消耗系统的性能？</p>
<p>Android L 以后，Xposed 会在标准的运行 <code>zygote</code> 进程的基础上制作一个新的 带有 Xpsed API 的 运行环境。所以在没有用到 Xposed 的地方，原来怎么运行的程序依然按原来的方式运行。Xposed 只有在应用启动时会根据钩子执行一些替换工作。这部分执行得是非常快的，所以你是不会意识到应用启动速度的差别的，而且这部分占用的内存是很少的。这就是为什么一些改动需要重启才能生效的原因了。所以说，单纯刷入 Xposed，是并不会引起系统卡顿的。</p>
<p>那么为什么 Xposed 会使用户觉得卡顿了呢？当 hook 没有启用时，系统是几乎无影响的。但是你一旦安装了模块以后，hook 开始发挥作用，然后开始替换系统资源为模块自己的代码（排除流氓终结者、核心破解、XPrivacy 这类仅仅篡改了返回值的模块），比如重力工具箱要 hook 系统 Framework 和 SystemUI 的资源。而且，重力工具箱要修改的地方要更底层一些，这样才能实现不重启实时完成切换切换并生效（XnubiaUI 模块，相当于 nubiaUI 上的重力工具箱，也是对 nubiaUI 的功能、界面进行调整的 Xposed 模块，它就没有做实时生效）。在这样的设计中，相当于一次要启用大量钩子随时调用，那么在 UI 层面就有大量改动需要用到钩子。于是在这些调用中，执行速度受到了一些影响。</p>
<hr>
<p>总结：单单安装 Xposed 是不会引起卡顿的，影响运行速度的并不是完全在于模块多少。是否影响卡顿取决于模块的功能本身，越需要经常 hook 替换资源的模块、需要替换大量资源的模块、hook 越接近系统底层的模块，最容易拖慢运行速度。此外，模块的功能实现设计、代码写得是否优雅等，都会影响到运行速度。此外，在目前富余的性能配置面前，Xposed 带来的系统卡顿固然不可忽略，但是一般人感觉是不会太明显的。更何况，在国内 BAT 毒瘤滥用广播接收器、毒瘤后台服务面前，我们还是使用 Xposed 模块来镇压毒瘤显得更为合适——不然造成的卡顿不是 Xposed Hook 所能够比拟的。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Xposed </tag>
            
            <tag> 卡顿 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从应用“妮乎”不遵守开源协议谈谈我国开源的现状]]></title>
      <url>/archives/open-source-in-china.html</url>
      <content type="html"><![CDATA[<p>身在这个奇怪的地方，被迫做着奇怪的事情，来获取本该轻易获取的东西。然而就算这样，也不能避开一群被害不浅的人，来帮他们洗地。</p>
<a id="more"></a>
<p>我本以为我应该对这种事情是睁一只眼闭一只眼的。但发生了一些事情以后，我还是选择了站出来。或许我把自己看得太高，不过，谨慎一点好。</p>
<hr>
<p>在酷安“妮乎”这个应用中因为开发者不负责任的举动、不遵守开源协议的行为的撕逼中，我可能不是最积极的，但的确是很活跃的一个存在。</p>
<p>“妮乎” 具体都干了什么，我大概列举一下就行：</p>
<ul>
<li>其开发的工具箱 “妮哩萌萌” 提供类似交流社区的服务，但是却使用明文传输用户名和密码；</li>
<li>其开发的工具箱 “妮乎” 功能不华也不实（什么振动 1 次、振动 2 次），部分功能（如抢 TIM 红包，网易云音乐 VIP 破解功能）甚至盗用了开源项目的源码。之所以称为盗用，是因为使用了开源项目的源码却不遵守开源协议。</li>
</ul>
<blockquote>
<p>具体的可以去看知乎 <a href="https://www.zhihu.com/question/55263859" target="_blank" rel="external">“如何看待“妮哩萌萌”开发出的《妮乎 ARE YOUOK》不遵守开源协议？” </a> 的回答。我的回答是 <a href="https://www.zhihu.com/question/55263859/answer/143661495" target="_blank" rel="external">https://www.zhihu.com/question/55263859/answer/143661495</a></p>
</blockquote>
<hr>
<p>当然我这篇文章不能只单纯批判妮乎，不然就没有什么意义了。</p>
<p>现在国内的开源现状是什么样的呢？用 Shadowsocks 的开发功臣 <a href="https://github.com/clowwindy" target="_blank" rel="external">clowwindy</a> 的话来讲，叫做“社会人人都围着官转，人人都巴不得当官”。</p>
<blockquote>
<p>这个是另外一个事件了，破娃酱的事情，也许经常翻越 <code>The Girl Friend Wall</code> 的人可能会知道。<br>破娃酱（Breakwa11）开发了 ShadowsocksR ，实现了 TCP 协议头混淆，但是拒绝开源，而 SSR 本来是在 SS 的基础上开发的、而后者是根据开源协议 GPL 开源的。后来那些纠葛我无需再提。最后 clowwindy 被 <code>你懂得那啥 </code> 请去喝茶了，所有 Github 的动态被冻结在 2015 年 11 月；破娃酱最后还是把 SSR 开源了；现在 SS 和 SSR 项目依然在蓬勃而富有生机地继续发展着。对于用户方面，现在服务商卖 SS 的也有，SSR 的也有。<br> 我本人对这件往事不置可否。我的个人看法是：BreakWa11 再怎么圈粉也好，最后他还算有贡献的——他至少开发了个 SSR，<strong>至少最后开源了 </strong>；他还有一个用爬虫构建的项目 gfw_whitelist，PAC 用的。这和<strong> 妮乎直接盗用、不尊重他人成果</strong>、毫无贡献，还是有一些区别的。 </p>
</blockquote>
<p>现在国内的各个手机厂商，不尊重 GPL 就算了，“把名字换成自己的”，还加点什么功能，然后加上 “官方、独家” 之类的字样。<br>比如小米的内核。众所周知，Android 内核是基于 Linux 内核的，然而 Linux 的内核是根据 GPL 协议开源的，所以各大厂商使用了 Android，就必须第一时间开源内核源码；但是小米宣称自家内核用了什么黑科技，所以拒绝开源。。。</p>
<blockquote>
<p>在国内使用 Linux 内核的手机厂商有数十家，然而遵守 GPLv2 的仅几家而已，某些个人开发者更将自己修改后的内核作为私有财产，不仅不开源，还在代码中加入诸多限制，绞尽脑汁使内核只在自己指定的环境正常工作。用户并不懂什么是开源协议，所以这些人就会去拉拢用户攻击其他试图使他遵守开源协议的开发者。<br>在国内厂商中，开源这一块做的最好的是一加。虽然做得不好——氢 OS 发布 3.0 一个月以后基于 Android N 的内核才开源出来。但是，这 <strong> 总比其它厂商做得好 </strong>——比如吧一加还开源了 device tree。看看传说中的蓝绿大厂 OPPO VIVO，连谷歌发布的 Android 安全补丁都不更新，还宣称安全，结果<strong> 被 wuxianlin 这样的真大神吊着打</strong>。呃，跑偏了。</p>
</blockquote>
<p>当然啦，大部分用户才不会管这些（不然为什么线下 OV 做的这么欢快）。<br>享受成果的人是不会去花时间去研究你是不是盗用的、有没有遵守开源协议，也不会去做道德判断，大部分人都是只要觉得好用就行。所以可以看到，这种环境下开源其实并没有什么优势，只不过为一些人抄袭提供了便利。在这种环境下最后留下来的都是这些，比如妮乎。</p>
<blockquote>
<p>clowwindy 说过，他一直想象的那种大家一起来维护一个项目的景象始终没有出现，也没有出现的迹象。他在维护 SS 时，遇到的主动分享的贡献者并不多。</p>
</blockquote>
<p>与 clowwindy 所想是不同的是，他被喝茶一年以后，SS 项目现在是活跃的，Fork 数我最近去看了一下已经 2.7k 了，全球都有人参与这个项目，为了各种目的（比如翻越限制，比如躲避审查，比如内网穿透）。<br>我认为我自己也是 Github 开源社区的受益者。我参与了我现在使用的博客主题的开发（这个主题的开源地址可以在 Footer 和侧边栏看到）——虽然贡献是微小的，但是项目老大 viosey 依然给了我 <code>collabrator</code> 的权限，我也很幸运能加入到这个项目的开发：我学到的不仅仅是如何用 ejs 开发 hexo 博客的主题，我学到的东西更多，比如如何管理一个多人协同开发的项目，比如 commit 信息怎么写符合规范便于追踪，甚至在和来自法国的小哥共同开发时略微提升了自己英语水平。<br>当然现在年轻的开发者都愿意开源的（比如我认识的 dalao 们，Aviraxp、Omico、iACN、PeterCxy、Trumeet . . . 等等）。但是 Github issue 却并不是那么景气——很多来报 bug 的人是以一种小白求大大解决问题，解决完就走人的方式来的。他们既不愿提供足够的信息（我们也不奢求日志，但是有的 issuer 提供了日志，我们找问题真的会简单很多），也不愿写一些自己尝试的过程供后人参考。他们很多连文档都不仔细阅读，所以弄出不少问题。</p>
<blockquote>
<p>事实上，就以 Material 主题为例——老大 vio 喵是建立了挺完善的文档供大家参考的（而且我们参与者都是谁开发的功能就由谁写文档~）——但是依旧有很多小白进来提问题，而其中有的问题真的可以看文档就能解决的。我又不好意思留个 <code>Please read [docs](https://material.viosey.com)</code> 作为回答然后就 close issue（至少我觉得我和其它外国项目维护者不同，他们真的会这么回答然后 close 掉 issue 的）。<br>我以前做 ROM 时，发包帖会带上一句——“请仔细阅读这个帖子的每一个字，避免错过重要信息。如果做不到，就请大声朗读本帖”。我不希望任何文档需要带上这个。</p>
</blockquote>
<p>不是我贬低什么，也不是我看不起什么，我真的是觉得最适合这个民族的其实是一群小白围着大大转，大大通过小白的夸奖获得自我满足，小白通过大大的幽默挑逗获得参与感。被迫闭源主代码库的魔趣就是这样，龙猪在贴吧和微博和用户们打情骂俏，在自己的 <a href="https://bbs.mfunz.com" target="_blank" rel="external"> 魔趣社区 </a> 搞社区经营。当然龙猪自己也和他带领的团队也是为魔趣写了不少东西的。现在魔趣 <strong> 暂时</strong>（希望以后永远是）是世界第一大安卓开源项目，希望国人能够争气一点。</p>
<blockquote>
<p>像月光这种打包他人 device tree 和开源的内核源码，还恶意诋毁他人、污言秽语人身攻击的，的确又是中国扭曲的开源现状上的又一大块污点。<br>像月光这种打包别人东西搞什么 MOS，这和 RR、AICP、DU、SultanCM 之类的 ROM 性质不同。后者的上游代码也的确都是 CM，他们的项目会严格地附上 credits，甚至是 reference ，它们是互相促进的。大家都知道，少了谁都不行。这就是为什么 CM 解散以后 Android 会有这么大动荡的原因，不过这是另一个故事了。<br>跑偏了，回来继续说。大部分开发者是很低调的，他们愿意去自己潜心做一个项目，就算被侵权被抄袭也不会说什么。他们会觉得很难受，但是不会停止开发。。也有开发者受到用户攻击和诋毁的——Nubia Z11 社区的那几个喷子那次搞起来的就是——但是说实话，几个卷入的 romer 当时其实是在那里把这个当笑话看的。</p>
</blockquote>
<p>在这种用户的群体存在，中国的开源现状就是玩笑。</p>
<p>我已经有一些明白到这个民族的前面为什么会有一堵墙了。国内的论坛和社区到处都是什么附件回帖可见，等级多少用户组可见，一个论坛一个大大供小白跪舔。不需要造墙，网民也已经地自发造墙——这些回帖可见、等级不足啥的不就是墙么？</p>
<blockquote>
<p>当然，国内清流的论坛也有，比如 <a href="https://mat.letitfly.me" target="_blank" rel="external">MAT BBS</a>，近乎于无偿地让大家一起平等地分享 MyAndroidTools 的使用经验。这样的参见蠢喵大佬的<a href="https://blackyau.cc/guozixi.html" target="_blank" rel="external">《良心不易》</a>）。</p>
</blockquote>
<p>当然，正如我所说的，“大部分用户才不会管这些”，小白跪舔时也不会选人的，他们不会判断。不然就没法理解月光打包党的微博下面为什么会有这么多评论在那里跪舔了。</p>
<p>这和国外社区是不一样的，国外社区哪有这样的环境？重新提我之前写的那一段，在国外，遇到 bug 和 issue，会有人发帖挖坑，然后很多人参与研究和造轮子，造出来以后会有自己的经历分享。我觉得这才是一个技术向的社区应该有的气氛，比如 xda-developer fourm 就是这样的一个社区。在这个全球最大的智能设备交流社区，不论技术多高，任何不遵守开源协议的开发者都会被删帖封号。国内哪个论坛会这么干？也就一加论坛和 MIUI 论坛封过臭名昭著的月光的号罢了。</p>
<hr>
<p>我自己也是华夏民族的后人，但我也知道，我的民族是一个造了几千年墙的保守的农耕民族。我不得不承认我自己的劣根性（鲁迅说过，也是整个民族都有的劣根性），也不得不承认我们有时候的确缺乏对别人的基本尊重，我们不愿意分享、喜欢遮遮掩掩，喜欢小圈子抱团，需要通过闭关锁国来获得自己需要的优越感。</p>
<blockquote>
<p>也许我颇有些数典忘祖的感觉，但是不得不承认的确是这样。</p>
</blockquote>
<p>国内的开源环境到底是什么样呢？大量开发者使用现成的开源的成果，却很少有人遵守开源协议。他们从上游 merge，却并不将自己的成果反馈回去，然后大言不惭地宣称自己的项目有多么多么强大，比事实上的上游（他们往往并不承认）牛掰多少，这与开源社区的精神背道而驰。更有甚者，如我文首提到的，毫无贡献、拿来就用，然后宣称是自己的成果（即使不是公开说出来，也是暗示性的影响。为数不多的人遵守 GPL ，更别提哪怕在 Credit 注明一下来源的了）。</p>
<hr>
<p>尾声：在我写到国外社区那一段时，妮哩萌萌找到我，告诉我侵权的网易云和谐功能已经去除。所以我把我在酷安的那条动态删掉了。更新日志说是功能“已经失效”，Aviraxp 说是“因为你抄错了”。是不是这样，我也已经不想深究，人的确是会累的，但是在做自己喜欢做的事情和自己有义务要去做的事情，我希望我会继续坚持乐此不疲。写完一篇博客，梳理自己大脑里混乱的思路，其实真的能看开很多东西。<br>最后，推荐大家读一读 <a href="https://github.com/beijinglug/fsfs-zh" target="_blank" rel="external">《自由软件，自由社会》</a>（<em>Free Software,Free Society</em>）。这本书的中文翻译在 Github 开源。</p>
<p>=========================</p>
<p>2017.08.14 更新：</p>
<p>昨天下午我在知乎看到妮哩萌萌开发者对 <a href="https://www.zhihu.com/question/55263859/answer/143661495" target="_blank" rel="external"> 我的回答 </a> 下评论做出「表态」如下：</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000141.png" style="width:50%" alt="0000141.png"></p>
<p>既然作为妮乎的开发者「表态」，我在看到以后很快对「表态」做出「回应」：</p>
<blockquote>
<p>针对「表态」的第二条：妮乎使用的 Unblock163Netease 模块的源代码根据 GPLv3 开源，妮乎最早开源出来的源码使用 Apache 开源，不符合 GPL License。<br>针对「表态」的第三条：开发者不允许将 GPL 代码用于商业，QQ 进群收费是一种商业行为。<br>针对「表态」的第四条：妮乎之前开源的代码为混淆过的代码，并非软件源代码，违反了 GPL。而且，现在 stytool 开源的 Repo <a href="https://github.com/stytooldex/stytool" target="_blank" rel="external">stytooldex/stytool</a> 里面都是些啥？</p>
</blockquote>
<p>实际上，我很早就没有关注这个事件了，甚至不知道这个声明最早诞生于今年四月。<br>不管怎么说，我的回应是针对「表态」本身，而不是针对开发者本人。所以，虽然今天下午我在知乎上的回答收到了评论，不过还是让这件事算了吧。<br>开发者既然已经发了声明，应该是已经端正了态度、正视这个问题。如果这样的话，对开源协议本身不完全了解和不懂得如何用 Git 在 GitHub 上提交代码是可以原谅的。。。</p>
<p>就这样吧，希望国内开源环境能好。以上。</p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 生态 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阻止运行、猎鹰网络、黑域 始末]]></title>
      <url>/archives/forcestopgb-lieying-brevent.html</url>
      <content type="html"><![CDATA[<p>SuperSU 和阻止运行被收购和商业化无疑是一场巨变。因为 Root 和 Xposed 都是对 Android 安全、稳定运行非常重要的一部分，一旦商业化和作恶，后果不可预料。</p>
<a id="more"></a>
<h1 id="ForceStopGB（阻止运行）"><a href="#ForceStopGB（阻止运行）" class="headerlink" title="ForceStopGB（阻止运行）"></a>ForceStopGB（阻止运行）</h1><p>我来首先介绍一下阻止运行是什么。<br>阻止运行项目最早开始于 2015 年，原作者 liudongmiao 表示是写给他女朋友的一款作品，目的是为了遏制 Android 的众多毒瘤，通过 Xposed 或 Hook 系统 Framework 实现。项目完整地在 Github 上使用 WTFPL 协议完整开源并高度自由。截止到 2.3.2 版本，阻止运行已经是一款较完善的应用，名声广为流传，在酷安尤为口碑良好，甚至一度超过绿色守护。</p>
<h1 id="被收购后的阻止运行"><a href="# 被收购后的阻止运行" class="headerlink" title="被收购后的阻止运行"></a>被收购后的阻止运行</h1><p>2016 年 3 月，liudongmiao 在酷安发表一条动态称，魔趣开源项目的发起人 Martincz 发现 ForceStopGB 项目在 Github 被删库，liudongmiao 表示阻止运行项目被卖给一家叫做“猎鹰工作室”的公司，并表示阻止运行即使被收购后依然不会作恶，并且 liudongmiao 表示阻止运行依然在他可控的范围之内。</p>
<blockquote>
<p>后面大家可以看到，这一切并不是如 liudongmiao 所想的那样。</p>
</blockquote>
<h2 id="联网权限"><a href="# 联网权限" class="headerlink" title="联网权限"></a>联网权限 </h2><p> 猎鹰网络在收购发布的第一个版本 <code>2.3.3</code> 立刻就加入了联网权限，以及一个“立刻阻止”和“无法阻止？立刻上报程序猿”两个功能。猎鹰表示这个是必要权限。</p>
<blockquote>
<p>2.3.3 的阻止运行的联网权限是否必要这里我已经不想深究。不然我备用机装一个 Xposed 再装一个抓包就全部找出来了。大家如果愿意的可以去尝试一下。</p>
</blockquote>
<p>对于联网权限我想说一下，Xposed 是一把非常锋利的双刃剑，它的原理是通过替换 <code>/system/bin/app_process</code> 控制<code>zygote</code>，使 <code>app_process</code> 在启动过程中加载 <code>XposedBridge.jar</code>，从而完成对 <code>Zygote</code> 进程及其创建的 <code>Dalvik 虚拟机</code> ` 的劫持，Xposed 在开机的时候完成对所有的 Hook Function，在原 Function 执行的前后加上自定义代码。所以说，一般的权限管理软件对 Xposed Module 是毫无作用的，Xposed 无疑拥有系统的最高权限。</p>
<h2 id="百度定位 -SDK"><a href="# 百度定位 -SDK" class="headerlink" title="百度定位 SDK"></a>百度定位 SDK</h2><p>这个猎鹰工作室的高振刚（即酷安中的 ksana2016）——猎鹰老大表示是上头公司要求内置的 sdk。至于上头公司是啥我后面会讲到。<br>最早发现这个的是因为一些酷友发现阻止运行 2.3.6 版开始莫名耗电，使用写轮眼一查看可以发现里面竟然内置了百度定位的 sdk <code>com.baidu.location.f</code> 。大家结合上面我介绍的 Xposed 的介绍，以及联系 Xposed 的后台保活能力，可以联想一下这个的后果。</p>
<blockquote>
<p>其实大家想一下要定位权限有什么用？如果真的只是为了统计，为什么并没有在 <code>AndroidManiFest.xml</code> 内发现定义的其它统计有关的组件？而且，在酷友的强烈要求下，2.3.7 立刻就去掉了百度定位 sdk，说明这个组件对于应用运行是毫无影响的。</p>
</blockquote>
<p><img src="https://i.loli.net/2017/10/08/59d9d855da8df.png" alt="0000056.png" style="width:50%"><br><img src="https://i.loli.net/2017/10/08/59d9d855d96b7.png" alt="0000055.png" style="width:50%"></p>
<blockquote>
<p>2.3.6 版本还可以在手机乐园上下载到，大家可以自取。</p>
</blockquote>
<h2 id="盗用 -UI- 设计"><a href="# 盗用 -UI- 设计" class="headerlink" title="盗用 UI 设计"></a>盗用 UI 设计 </h2><p> 在 2.3.6，阻止运行使用了一个新的 UI 设计，包括一个 <code>listviewer</code> 和一个 <code>drawer</code>。然而很快，一名 ID 为 twroc 的酷友在酷安声称该 UI 设计所有权应归他所有，并且得到了 liudongmiao 的证实。然而猎鹰工作室对于此却宣称因为该酷友不肯加入猎鹰工作室的团队、不能接受“外包私活”等理由推诿。</p>
<blockquote>
<p>这是酷友 tworc 的声明</p>
</blockquote>
<p><img src="https://i.loli.net/2017/10/08/59d9d855de0a0.png" alt="0000063.png" style="width:50%"><br><img src="https://p0.ssl.qhmsg.com/t01df8a9cef7e204fd3.jpg" alt="0000051.jpg" style="width:75%"></p>
<p>最后这件事情是这样不了了之的。</p>
<p><img src="https://i.loli.net/2017/10/08/59d9d855d7f85.png" alt="0000064.png" style="width:50%"></p>
<blockquote>
<p>具体情况可以看下面</p>
</blockquote>
<h2 id="微阻止"><a href="# 微阻止" class="headerlink" title="微阻止"></a>微阻止 </h2><p> 这项功能当时 ksana2016 是这么介绍的：</p>
<p><img src="https://i.loli.net/2017/10/08/59d9d855dbacf.png" alt="0000053.png" style="width:50%"></p>
<p>这项功能当时在酷安被大部分酷友抨击和反对。并且该功能在 2.4.0 版本终于推出以后，我们可以发现，所谓去除开屏广告不过是使广告不显示，实际上带有启动屏的广告应用启动时会有 2s 的黑屏。</p>
<h1 id="猎鹰网络"><a href="# 猎鹰网络" class="headerlink" title="猎鹰网络"></a>猎鹰网络 </h1><p> 猎鹰工作室到底是何方神圣？于是我上网进行了一番调查，结果很快就出来了。</p>
<p>这是搜狐新闻网的一篇 <a href="http://mt.sohu.com/20150928/n422296570.shtml" target="_blank" rel="external"> 报道</a>，里面介绍了一个名叫“智度投资”的投资公司全资收购了猎鹰网络和半数“应用汇”的股份。</p>
<p>这是 <a href="http://www.falconnect.cn" target="_blank" rel="external">猎鹰网络的官网</a> ，可以在公司介绍里看到这样的内容：</p>
<blockquote>
<p>猎鹰网络已成为国内领先的以大数据、机器学习、人工智能为技术驱动的新兴移动广告技术公司。</p>
</blockquote>
<p>哦，一个有着“闭环生态链”的移动广告技术公司，要收购阻止运行这种对抗毒瘤的”安卓优化神器”，还要开发广告阻止功能？一旦借助 Xposed Hook 系统底层的优势投放广告、窃取用户隐私，是颇有些令人不寒而栗的，大家联想一下百度定位 SDK、联网权限应该也就明白了。</p>
<h2 id="工作室成员行为和态度"><a href="# 工作室成员行为和态度" class="headerlink" title="工作室成员行为和态度"></a>工作室成员行为和态度 </h2><h3 id="面对盗用 -UI- 行为的态度"><a href="# 面对盗用 -UI- 行为的态度" class="headerlink" title="面对盗用 UI 行为的态度"></a> 面对盗用 UI 行为的态度</h3><p><img src="https://i.loli.net/2017/10/08/59d9d855dee2a.png" alt="0000057.png" style="width:50%"><br><img src="https://i.loli.net/2017/10/08/59d9d855dc8a5.png" alt="0000052.png" style="width:50%"></p>
<blockquote>
<p>这脸打的 pia pia 的响。</p>
</blockquote>
<p><img src="https://i.loli.net/2017/10/08/59d9d855d6409.png" alt="00000059.png" style="width:50%"></p>
<p>对于猎鹰高振刚和酷友 twroc 在微信的对话可以在 <a href="https://ooo.0o0.ooo/2017/01/26/5889fb945e96e.jpg" target="_blank" rel="external"> 这里 </a> 看。</p>
<h3 id="对于定位 -SDK- 的态度"><a href="# 对于定位 -SDK- 的态度" class="headerlink" title="对于定位 SDK 的态度"></a>对于定位 SDK 的态度</h3><p><img src="https://i.loli.net/2017/10/08/59d9d855da883.png" alt="00000054.png" style="width:50%"></p>
<blockquote>
<p>我不置可否，不过把质疑用户称为嘴脸也真是没谁了。</p>
</blockquote>
<h3 id="面对质疑的态度"><a href="# 面对质疑的态度" class="headerlink" title="面对质疑的态度"></a>面对质疑的态度</h3><blockquote>
<p>如果你们的阻止运行的底线是这样，那么请问还有谁放心用？</p>
</blockquote>
<p><img src="https://i.loli.net/2017/10/08/59d9d855db6b1.png" alt="0000062.png" style="width:50%"></p>
<h1 id="补丁版黑域"><a href="# 补丁版黑域" class="headerlink" title="补丁版黑域"></a>补丁版黑域 </h1><p> 大概是这样的，liudongmiao 找到高振刚高总，申请开发基于 Android N 的补丁版“阻止运行”，即补丁版黑域项目。liudongmiao 表示新的项目只能用于 Android N、部分开源，并且不采用 Xposed 模式，于是高振刚同意了。后来补丁版黑域可以成功用于 Android 4.4-7.1 的任何版本，于是猎鹰网络威胁 liudongmiao 要起诉他。于是补丁版黑域被迫在酷安网下架，liudongmiao 被迫停更、去转向开发非补丁版黑域。</p>
<p><img src="https://p0.ssl.qhmsg.com/t0183573cc14a98e378.jpg" alt="0000050.png"></p>
<p>幸运的是猎鹰网络没有（<strong>实际上也没有能力</strong>）封杀补丁版黑域，所以一键黑域打补丁项目和补丁版黑域依然可以继续使用。为了避免纠纷，酷安网页版隐藏了有关的项目，大家可以使用酷安手机客户端下载使用。</p>
<blockquote>
<p>对我而言，我认为猎鹰网络起诉 liudongmiao 是无稽之谈。补丁版黑域仅仅使用了阻止运行闭源前 2.3.2 的源码（我自己也有一份，也开源在 Github 和 Coding 上），而且那份源码是根据 WTFPL 的协议开源的，是完全自由的。补丁版黑域的实现原理和阻止运行完全不同，无论是否支持 Android N 以下都无所谓。<br>猎鹰把一个本来开源的项目弄成闭源，还彻底毁了阻止运行，这样一个优秀开源项目的名声，谁的罪过更大一清二楚。</p>
</blockquote>
<h1 id="非补丁版黑域"><a href="# 非补丁版黑域" class="headerlink" title="非补丁版黑域"></a>非补丁版黑域 </h1><p> 现在非补丁版黑域使用了全新的实现方法，通过一定的权限（如 Priv 权限或者 ADB 权限）来监听 Android 的运行日志，获取应用自启、唤醒的情况，配合 Android N 的后台机制一起对付应用毒瘤。当然，这种方法并不是那么强力。</p>
<hr>
<p>如果说，现在最终的结果绿色守护依然在不断完善，方便的 非补丁版黑域依然可以继续吊打毒瘤，补丁版黑域虽然不再提供支持、也依然可以使用，所以广大 Android 机油面对 BAT 毒瘤并不是没有方法。但是要说有什么损失，那么就是基于 Xposed 的一款开源自由的神器被迫闭源、走向了另一端，给大家留下一个商业化以后的反例。</p>
<hr>
<h1 id="黑域后续 - 更新于 -2017-08-18"><a href="# 黑域后续 - 更新于 -2017-08-18" class="headerlink" title="黑域后续 (更新于 2017.08.18)"></a> 黑域后续(更新于 2017.08.18)</h1><blockquote>
<p>这部分最早发布于 <a href="https://t.me/neoFelhzW" target="_blank" rel="external"> 个人的 Telegram 频道</a></p>
</blockquote>
<p>黑域本身到底几宗罪？</p>
<p>最早宣称是为了自己的 Pixel 开发，不想 Root 和解锁，开发了基于 ADB 的黑域，然后开发了 Root 功能。<br>曾经宣称不对 Root 用户提供技术支持，然而 Root 模式需要捐赠才能使用（可惜我丢了那张 liudongmiao 骂捐赠用户是猪的截图，不然就太劲爆了）<br>认为绿色应用公约是没有意义的，认为只有比流氓技高一筹才能打败流氓。<br>liudongmiao 多次和绿色守护开发者冯老师针锋相对，多次恶意攻击 MyAndroidTools 和绿色守护的处方（你可以在他知乎上对“你如何看待绿色应用公约”问题的回答，含沙射影在攻击绿色守护的处方功能）<br>使用 WTFPL 开源了部分代码，但是却宣称任何人都无权分发第三方版本，甚至因为 Rikka 的 Shizuku Manager 参考了 Brevent Server 部分代码而大动肝火、在酷安怼人。如今又因为有人分发社区版而大动肝火，甚至拒绝开源部分代码；彻底违背了 WTFPL 的理念和意义，也玷污了开源这个名词。</p>
<p>liudongmiao 和冯老师之间的故事现在很像 SSR 和 SS，一个在努力宣称自己所谓的能力、对另一个针锋相对，另一个却在默默开发、努力提倡公约推动国内安卓生态的改变。<br>你国安卓生态会死于内讧，而不是死于 BAT。你国开源生态死于 liudongmiao 这样的人，而不是死于 妮哩萌萌 这样的人。</p>
<hr>
<h1 id="阻止运行后续 - 更新于 -2017-08-25"><a href="# 阻止运行后续 - 更新于 -2017-08-25" class="headerlink" title="阻止运行后续 (更新于 2017.08.25)"></a> 阻止运行后续 (更新于 2017.08.25)</h1><p> 阻止运行已经被猎鹰工作室离职员工 “园子” 更名为 <code>绿色运行</code>，添加了所谓“游戏模式”——王者荣耀不卡顿。之前阻止运行多个版本均曝光了阻止运行劫持用户淘宝、强制给用户使用返利券、从而使工作室盈利的行为。为了自己的安全，请不要继续使用任何阻止运行（同样不推荐使用旧版本阻止运行）和绿色运行 Xposed 模块，也不要使用由猎鹰工作室或者推出的 Xposed 商店。当然，欢迎不怕死的人来作死。</p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 省电 </tag>
            
            <tag> 黑域 </tag>
            
            <tag> 阻止运行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你好 Disqus，再见多说]]></title>
      <url>/archives/hello-disqus-and-goodbye-duoshuo.html</url>
      <content type="html"><![CDATA[<p>多说又双叒叕爆炸了！——这是我看到 <code>多说评论系统故障(9900015)，请联系客服人员</code> 报错信息时的想法。</p>
<a id="more"></a>
<blockquote>
<p>终于，多说关闭了。</p>
</blockquote>
<h1 id="多说"><a href="# 多说" class="headerlink" title="多说"></a>多说 </h1><p> 多说是国内一款常见的社会化评论系统，常用于给没有自带评论服务的如 Hexo、Jeykll、MediaWiki 等提供评论服务，或者是为自带评论服务的如 WordPress、Typecho 等提供社会化评论服务。多说最大的优点可提供 QQ、微博、人人网、开心网、豆瓣、谷歌等一干社交媒体账号的登陆服务。但是作为国内一大评论系统，多说还是有许多不足：</p>
<ul>
<li>多说默认的样式实在太 $^[-@#(&amp;^9{ . . .</li>
<li>多说的垃圾评论拦截功能形同虚设，广告、色情评论实在泛滥</li>
<li>一段时间以来多说的服务很不稳定，经常崩坏</li>
<li>多说已经停止开发，最后一次更新停步于 2016 年 5 月</li>
<li>社交媒体的头像不支持 HTTPS（虽然这个锅应该归 BAT 毒瘤背）</li>
</ul>
<blockquote>
<p>虽然多说头像 HTTPS 可以用七牛或者 PHP 反代得以实现，但是毕竟是多说一大黑点。</p>
</blockquote>
<h1 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h1><p>如果说国内有一家独大的评论系统多说，那么国外对应的就是 Disqus。与多说单纯仅提供评论服务不同，Disqus 提供一套完整的社区服务和推广功能（或许这是 Disqus 没有像多说一样面临困境的最大原因）。但是 Disqus 也有它的不足：</p>
<ul>
<li>Disqus 与多说不同，并不支持自定义样式（但是说实话，Disqus 的样式比多说的默认样式不知道高到哪里去了）</li>
<li>Disqus 不建议游客参加评论——Disqus 会引导游客注册 Disqus 账户，除非评论者勾选<code>I&#39;d rather post as a guest</code></li>
<li>Disqus 仅提供 Facebook、Twitter 等国外社交媒体的社会化登陆方式</li>
<li>由于 <code>The Girl Friend Wall</code> 的存在，Disqus 在国内 <strong>开放、自由、有序</strong> 的网络环境下是不能访问的。</li>
</ul>
<h1 id="duoshuo2Disqus"><a href="#duoshuo2Disqus" class="headerlink" title="duoshuo2Disqus"></a>duoshuo2Disqus</h1><p>尽管多说有丰富的国内社交登陆方式以及无访问障碍，但是 Disqus 服务毕竟稳定可靠（没办法，洋大人的东西确实是好），而且有一整套完善的垃圾评论屏蔽功能（不会像多说一样极其容易被垃圾评论攻陷。而且国内也没有针对 Disqus 设计的垃圾评论机器人），所以我依旧决定迁移到 Disqus。<br>这里我直接用了现成的轮子 <a href="https://github.com/JamesPan/duoshuo-migrator" target="_blank" rel="external">duoshuo-migrator</a> 转换的。这个 Python 程序可以把多说导出的备份文件转换成 Disqus 支持的 WXR 格式。具体使用方法在项目的 README 里写的很清楚了。<br>不过对之前评论过的小伙伴们表示很遗憾，你们的头像都没了. . .</p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 评论 </tag>
            
            <tag> 多说 </tag>
            
            <tag> Disqus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[拨开云雾见天明——解析酷安新出现的微信盗号木马]]></title>
      <url>/archives/lets-check-and-study-wechat-trojan.html</url>
      <content type="html"><![CDATA[<p>一日，某不安好心者在酷安的 Xposed 模块 “App Setting” 的评论区发布了一条评论——“APP Setting 专业版”。一位用户下载使用后中招——微信密码泄露，账户被盗刷。</p>
<a id="more"></a>
<p>随后，酷友反应，在著名 Android 优化应用 “绿色守护” 的评论区同一个人发布了所谓 “绿色守护绿色版” 同样有涉嫌病毒的嫌疑。一时间酷安疑云四起，甚至引起了酷安的多位小编对各类修改版应用的抵制，对 QQ 美化版影响尤为巨大。<br>本人有幸在那个居心叵测的人被酷安的小编们删帖之前成功地下载到了两个样本。现在我将通过逆向这个病毒，来弄清楚这个里面到底有多少猫腻。</p>
<blockquote>
<p>另外，感谢酷友 <a href="http://www.coolapk.com/u/523048" target="_blank" rel="external">DBin_K</a> 以身试毒、安装“体验”并抓包，获得了宝贵的截图和数据。</p>
</blockquote>
<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><blockquote>
<p>工欲善其事必先利其器。这是本人使用的工具。</p>
</blockquote>
<ul>
<li>ROM IDE+</li>
<li>MT 管理器</li>
<li>Packet Capture</li>
<li>Beyond Compare</li>
<li>安装包解析工具</li>
</ul>
<blockquote>
<p><del>这些是病毒的样本。本人已经混淆了这些 Apk 资源，确保不会再被其它不法分子反编译、用于其它非法用途！</del>不再提供病毒样本。</p>
</blockquote>
<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>以下是受害者酷友“阿光正传”的经历。</p>
<p><img src="https://p0.ssl.qhmsg.com/t0159884911e5267ba0.png" alt="0000012.min.png" style="width:50%"></p>
<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>以被打包过的 App Setting 为例。<br>首先使用 ROM IDE+（核心是 APkTool）对正常的 APP Setting 和被打包多的 APK Setting 进行反编译，然后使用 Beyond Compare 比对反编译出来的东西有什么区别。<br>首先可以看到 <code>AndroidManiFest.xml</code> 的区别，可以看到被打包过的 App Setting 多申请了这些权限。</p>
<ul>
<li>读取设备信息</li>
<li>读写短信</li>
<li>读取联系人</li>
<li>开机自动启动</li>
<li>震动权限</li>
<li>挂载文件系统</li>
<li>读取存储</li>
<li><strong>在其它应用上层显示内容</strong></li>
</ul>
<p><img src="https://p0.ssl.qhmsg.com/t01ba8b33f27c3f33a8.png" alt="0000014.png"></p>
<blockquote>
<p>上图中左边是被打包应用的 <code>AndroidManiFest.xml</code>，右边是正常应用的 <code>AndroidManiFest.xml</code>。</p>
</blockquote>
<p><img src="https://p0.ssl.qhmsg.com/t01637910869c61b169.png" alt="0000015.png"></p>
<p>除此以外还可以从第二张图里看到，被打包过的应用还额外内置了两个 Activity，分别是 <code>com.android.append.MainActivity</code> 和 <code>com.android.append.MainActivity2</code>。这两个活动所包含的包名和应用本身的包名 <code>de.robv.android.xposed.mods.appsettings</code> 并不相符。所以意味着这两个活动并没有写进打包的应用中，而是额外的独立应用。</p>
<blockquote>
<p>而且，这个应用伪装成了系统组件（这个额外的应用的包名为 com.android.append）</p>
</blockquote>
<h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p><img src="https://p0.ssl.qhmsg.com/t015703142c2235d4b5.png" alt="0000016.png"></p>
<p>这张图可以看到被打包的应用还新增了一个 <code>drawable</code> 文件夹，内建了一个假的微信悬浮窗和微信登陆界面的样式，可以看到微信的 icon 和登陆的界面图片，以及定义界面的 xml。随便摘录一段给大家看看。</p>
<pre class="line-numbers language-xml"><code class="language-xml">&lt;shapexmlns:android="http://schemas.android.com/apk/res/android">
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#e5fafafa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span> <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5.0dip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://p0.ssl.qhmsg.com/t018e52590d13737e9a.png" alt="0000009.png" style="width:50%"></p>
<p><img src="https://p0.ssl.qhmsg.com/t01cedd34ff12d84b79.png" alt="0000018.png"></p>
<p>实际效果像这样（由 DBIn_K 提供截图）：</p>
<p><img src="https://p0.ssl.qhmsg.com/t01f5daef1a87c16500.png" alt="0000013.min.png" style="width:50%"></p>
<blockquote>
<p>还有模有样的，不是么？</p>
</blockquote>
<h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>从那张图里还可以看到，除了一些 smali 的不同，还有一个显著区别就是 <code>asset</code> 目录下竟然内置了一个小的 timesync.apk！<br>将它提取出来，用 MT 管理器和安装包解析工具加以分析：</p>
<p><img src="https://p0.ssl.qhmsg.com/t01260c077679d0f412.png" alt="0000021.png"></p>
<blockquote>
<p>原来这个就是那个 <code>com.android.append</code>。伪装应用名为 SuperSU,，以便瞒天过海。</p>
</blockquote>
<p>再对其进行反编译，查看里面到底有什么猫腻。</p>
<p><img src="https://p0.ssl.qhmsg.com/t01b9d49c27efa8be60.png" alt="0000019.png"></p>
<p>查看里面的文件目录树可以看出来同样是内置了一套悬浮窗的样式，除此以外还内置了一套微信登录界面的样式。<br>同样只摘录一段给大家看看就行：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff393a3f<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/wx_top<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fitStart<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00000000<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnBack_onClick<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffffffff<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 解除登录限制 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff999999<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>26.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 微信安全支付 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff999999<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 请输入支付密码，以验证身份 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有这一段：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>69.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 账  号 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColorHint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffdddddd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/ed_wx_account<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>220.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 微信号 / 手机号 /Email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/vw_wx_line1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff45c01a<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>69.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 密  码 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColorHint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffdddddd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/ed_wx_password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 密码 <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textPassword<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/vw_wx_line2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffd8d8d8<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>17.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/login_button_textcolor<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/btn_wx_login<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/login_button_background<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>47.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 登录 <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Button_onClick<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15.0sp<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff576b95<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 登录遇到问题 ?<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际效果就像这样（由以身试毒的酷友 DBin_K 提供截图）：</p>
<p><img src="https://p0.ssl.qhmsg.com/t018a883c93490df05d.png" alt="0000010.png" style="width:50%"><br><img src="https://p0.ssl.qhmsg.com/t01cb2c2bd143f42e74.png" alt="0000005.min.png" style="width:50%"></p>
<blockquote>
<p>“解除登录限制”、“微信安全支付”、“请输入支付密码，以验证身份”、“登录遇到问题？” ，真的很具有迷惑性。</p>
</blockquote>
<h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p>酷友 DBin_K 还发现病毒的核心组件还申请了 root 权限，他把 su 权限以后 SuperSU 抓到些日志。这些日志都是满满的 <code>cat</code> 指令，从微信的数据文件夹 <code>/data/data/com.tencent.mm</code> 合并了很多文件到它自己的数据目录 <code>/data/user/0/com.android.append</code> 下面。具体要这些数据是为了什么还不清楚（我自己没有微信，所以没法知道它获取的这些是什么数据）</p>
<blockquote>
<p>更新：获取这些数据是为了微信跨设备登陆，具体参见 0x07。</p>
</blockquote>
<p><img src="https://p0.ssl.qhmsg.com/t01109f670d2a9cc50f.png" alt="0000020.png"></p>
<p>现在来看他病毒核心的 smali，粗略一看，里面值得我们关注的主要是三个部分，一个是基于 google 开发的解析 json 的框架 gson，一个是由 Jakewharton 开发的 DiskLruCache 缓存，一个是 loopj 开发的 android-async-http。这几个就是用来把获取到的数据传回作者的服务器。<br>本来我可以直接一个一个看 smali ，直到找到他数据回源的域名，但是后来 DBin_K 直接开了抓包，拿到了数据回源的地址：<code>uu636.com/update.aspx</code>。所以我就没有继续看下去。</p>
<p><img src="https://p0.ssl.qhmsg.com/t019658d7479f316065.png" alt="0000007.min.png" style="width:50%"></p>
<h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>现在这个病毒的原理很明显了：始作俑者专找 Xposed 和 Root 类应用下手，因为这类应用有很好的后台存活性，以便随时出来作案；然后是病毒的核心组件伪装成 SuperSU 向受害者申请 root 权限，把病毒核心注入 system/app ，并收集用户的微信的数据库；接着是由于 <code>ANdroidManiFest.xml</code> 中定义了在在其它应用显示的权限，每十分钟会弹出一个假的弹窗提示你“微信登陆已过期，需要重新登陆”，从而把受害者骗进他们那个做的非常逼真的登陆界面，直到套出用户的用户名和密码；最后这些信息会被回传给始作俑者的服务器，然后很快就会用这些信息盗刷受害者的微信钱包。同时，root 权限帮助病毒核心组件长期存活，就算受害者使用 RE 管理器删除了组件，也会不断复活。</p>
<h1 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h1><blockquote>
<p>2017-01-23 更新：</p>
</blockquote>
<ol>
<li>根据学习软件工程的逆向大佬 iKirby 分析，获取微信的数据文件是为了实现跨设备微信登陆；</li>
<li>从百度贴吧可以获得的公开的资料得知，这个团伙从今年年初就已经开始作案（几次病毒的行为都高度相似），已经有将近十名受害者被骗。</li>
<li>查询一下这个域名的 Whois 信息可以看到，这个域名是在国内购买的，同时启用了域名 Whois 隐私保护，所以查不到域名所有人的信息。</li>
</ol>
<p><img src="https://p0.ssl.qhmsg.com/t017b12d98429a8f566.png" alt="0000025.png"><br><img src="https://p0.ssl.qhmsg.com/t01a7f1983c05285152.png" alt="0000026.png"></p>
<p>根据全网 ping 的响应速度，的确应该是靠近国内地区的服务器。但是又找不到备案信息，所以这个服务器应该是在香港（我用我朋友在香港沙田机房的 VPS ping 了一下发现耗时是 0ms，结果不言而喻）</p>
<ol>
<li>在酷友 <a href="http://www.coolapk.com/u/554126" target="_blank" rel="external">llllllllllll666</a> 和酷安的开发组成员 <a href="http://www.coolapk.com/u/346976" target="_blank" rel="external">liubaoyua</a> 对病毒的逆向下获得了 java 部分。详见 0x08。</li>
</ol>
<h1 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h1><p>在酷友 llllllllllll666 和酷安开发组成员 liubaoyua 的反编译下发现了几个类，大概就是这些作用：</p>
<ul>
<li>劫持微信快捷方式</li>
</ul>
<p><img src="https://p0.ssl.qhmsg.com/t01523dd061f0de1d1c.png" alt="0000043.png"></p>
<p>代码如图，当获取到 root 权限以后木马核心会开始寻找启动器下的微信的快捷方式劫持到自己的桌面活动 <code>com.android.append.Launcher.Activity</code>，这样受害者点击微信你图标也会触发打开伪造的登陆界面。</p>
<ul>
<li>卸载微信</li>
</ul>
<p><img src="https://p0.ssl.qhmsg.com/t011ca4ad52b42e5395.jpg" alt="0000044.jpg"></p>
<p>这个就简单了，仅仅只是卸载微信而已。</p>
<ul>
<li>一键变砖</li>
</ul>
<p><img src="https://p0.ssl.qhmsg.com/t014d63e46069ea4d0e.png" alt="0000042.png"></p>
<p>这个是挂载 system 分区，然后删除 <code>system/framework/</code> 文件夹，也就是删除了系统框架，可以导致手机变砖。</p>
<blockquote>
<p>后面两个是服务端远程控制实现的，所以请各位“以身试毒”的大无畏者务必小心，小心 <strong> 被远端遥控一键变砖</strong>！！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安全 </tag>
            
            <tag> 病毒 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Goodbye,2016]]></title>
      <url>/archives/good-bye-2016.html</url>
      <content type="html"><![CDATA[<p>怎么说呢，过去的这一年发生了很多事情，无论是好事还是坏事。我摘出那些对我很重要的事情吧，也许其中一些甚至改变了我的人生。</p>
<a id="more"></a>
<hr>
<p>对我来说今年最重要事情的是莫过于我拥有了自己的个人网站和自己的独立博客，从此我有了一个可以写属于我自己的文字的地方。<br>同时借助这个机会认识了不少技术 dalao 和菊苣。比如我博客这个主题的作者 <a href="https://viosey.com" target="_blank" rel="external">Viosey</a>；建站方面给了我很多建议和帮助的 <a href="https://letitfly.me" target="_blank" rel="external">guozixi</a> 和 <a href="https://blackyau.cc" target="_blank" rel="external">蠢黑通行</a>；等等等等。</p>
<p>不得不承认因为这个我学会了很多，比如我因此学了如何 <del>正确地</del> 使用 Git 和 Github，还简单自学了一点点的 php 和 ejs，甚至还为 Material 主题的开发做了一点微小的贡献。</p>
<p>另一个重要的事件就是我来到了酷安。<br>不得不承认酷安的确像是一个社交平台而不是纯粹的应用市场。在这里可以和独立的个人开发者面对面平等谈话，也可以和其它折腾的 Android 爱好者交换心得，可以和酷安的小编们和开发团队 <del>PY 交易 </del> <del> 打情骂俏 </del> 友好交流，也可以发现很多深藏不露的 dalao。不得不承认，来酷安以后我的玩机水平和知识大有增长，获得了很多 Android 的资源，认识了很多搞<del> 基</del>机的 <del> 酷安基佬 </del> 酷友们，学会了如何更加彻底的对付 BAT 毒瘤。<br>我是 2016 年初来的酷安，也分享了一些自己的玩机技巧和资源，如今也把自己培养成了一个酷安小 V（500 出头的粉丝数，以及一堆活跃的、互粉的 <del> 酷安基佬 </del> 酷友们；仰望那些千粉的 dalao 中~）。</p>
<p>对我而言还有两件重要的事情，一件是我认识了网易云音乐（当初可能是为了找歌而且网易云的曲库比较完整吧），于是我没有像现在这样喜欢听音乐。。。音乐的确会引起人的共鸣，也是一个人与人交流的契机，而网易云和酷安一样都很看重社交。<br>还有就是我成为了中文 VOCALOID 的粉丝，自从听了那首《风中飞散的回忆》以后，就再也离不开中文 VOCALOID 了，从此我的网易云的每日推荐中就只剩下中 V 和纯音乐了。</p>
<p>还有就是有了一个自己微博（当初是我还在做 ROM 时用来和机油交流的，然后在微博上也认识了搞 Android 开发的菊苣们）。虽然渣浪微博吃枣药丸，但渣浪也好歹是一大社交媒体吧。现在在微博上也有了 500 粉丝，也能经常和一堆 dalao 们谈笑风生。</p>
<hr>
<p>突然就变成碎碎念了。。。不论怎么说，我希望我的新的一年更好吧。</p>
]]></content>
      
        <categories>
            
            <category> 自言语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[A Fork in the Road — CM's last blog]]></title>
      <url>/archives/a-fork-in-the-road-cyangenmod.html</url>
      <content type="html"><![CDATA[<p>Cyanogenmod 在他们的官网发布了最后一篇博客 <em>A Fork in the Road</em> 后，Cyanogenmod 官网和博客域名的 DNS 解析就被停了。</p>
<a id="more"></a>
<p> 所以仅有少数人读了 Cyanogenmod 这篇告别的博客。于是我将 CM 的这一篇博客转载到这里，同时衷心祝愿 Lineage OS 能够凤凰涅槃。</p>
<hr>
<p>Last week, we released the final CM-13.0 releases, updated to the latest security patches, in anticipation of what follows.</p>
<p>Yesterday, Cyanogen Inc (Cyngn) announced that they were shutting down the infrastructure behind CyanogenMod (CM). This is an action that was not unpredictable given the public departure of Kondik (cyanogen himself) from the company, and with him our last remaining advocate inside Cyngn’s leadership.</p>
<p>In addition to infrastructure being retired, we in the CM community have lost our voice in the future direction of CM – the brand could be sold to a third party entity as it was an asset that Kondik risked to start his business and dream. Even if we were to regroup and rebuild our own infrastructure, continuing development of CM would mean to operate with the threat of sale of the brand looming over our heads. Then there is the stigma that has grown to be attached to anything named ‘Cyanogen’. Many of you reading this have been champions of clarifying that the CM product and CyngnOS were distinct, yet the stain of many PR actions from Cyngn is a hard one to remove from CM. Given CM’s reliance on Cyngn for monetary support and the shared source base, it’s not hard to understand why the confusion remains.</p>
<p>It will come as no surprise that this most recent action from Cyngn is definitely a death blow for CyanogenMod.</p>
<p>However, CM has always been more than the name and more than the infrastructure. CM has been a success based on the spirit, ingenuity and effort of its individual contributors – back when it was Kondik in his home, to the now thousands of contributors past and present.</p>
<p>Embracing that spirit, we the community of developers, designers, device maintainers and translators have taken the steps necessary to produce a fork of the CM source code and pending patches. This is more than just a ‘rebrand’. This fork will return to the grassroots community effort that used to define CM while maintaining the professional quality and reliability you have come to expect more recently.</p>
<p>CM has served the community well over its 8 long years. It has been our home, bringing together friends from all over the world to celebrate our joy of building and giving. Its apt then that on this Eve of a holiday we pay our respects. We will take pride in our Lineage as we move forward and continue to build on its legacy.</p>
<p>Thank you &amp; Goodbye,<br>The CyanogenMod Team</p>
<p><a href="https://www.cyanogenmod.org/blog/a-fork-in-the-road" target="_blank" rel="external">https://www.cyanogenmod.org/blog/a-fork-in-the-road</a></p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CM </tag>
            
            <tag> ROM </tag>
            
            <tag> Android </tag>
            
            <tag> Cyangenmod </tag>
            
            <tag> LineageOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Interative 调速器有关参数分析]]></title>
      <url>/archives/cpu-governer-interative-core-ctl.html</url>
      <content type="html"><![CDATA[<p><code>Interative</code>是目前常用的一种 CPU 调速器，其特点是 CPU 频率是根据负载实现交互式反应。但是与 <code>ondemand</code> 和<code>conserative</code>不同的是，<code>interative</code>拥有一些不同的参数配置方式。</p>
<a id="more"></a>
<blockquote>
<p>所以并不像一些人说的，什么 <code>ondemand</code> 非常敏感升频降频都快、<code>interative</code>升频快降频慢、<code>conserative</code>升频慢降频快。</p>
</blockquote>
<p>Interative 可用的调速器参数有以下内容：</p>
<h1 id="负载 - 频率机制"><a href="# 负载 - 频率机制" class="headerlink" title="负载 - 频率机制"></a>负载 - 频率机制 </h1><h2 id="target-loads"><a href="#target-loads" class="headerlink" title="target_loads"></a>target_loads</h2><p> 这个参数的目的是根据 CPU 负载来调整频率：当 CPU 负载升高到该参数时，内核就会升高 CPU 的运行频率以便降低 CPU 负载。该参数的默认值为 90。</p>
<p>该参数的格式是单个固定数值，或者是频率和负载值成对出现用冒号隔开。</p>
<blockquote>
<p>比如 <code>85 1000000:90 1700000:99</code> 表示负载在 85% 以下时，CPU 频率要运行在 1GHz 以下；负载达到 90% 时，CPU 频率要运行在 1.0GHz~1.7GHz，直到 CPU 负载达到 99% 时，频率才会升到 1.7GHz 以上。</p>
</blockquote>
<p>一般地，该参数设置的越低，CPU 升频就会越快、越频繁。</p>
<h2 id="min-sample-time"><a href="#min-sample-time" class="headerlink" title="min_sample_time"></a>min_sample_time</h2><p>CPU 开始降低频率前的最小时间。也就是当负载下降到达较低的区间时还需要再经过多少时间 CPU 才开始降频（也可以简单理解成 CPU 两次降频之间的间隔值）。该值越小，对降频的反应就越敏感。该参数的默认值是 80000uS.</p>
<h2 id="timer-rate- 和 -timer-slack"><a href="#timer-rate- 和 -timer-slack" class="headerlink" title="timer_rate 和 timer_slack"></a>timer_rate 和 timer_slack</h2><p>CPU 负载采样率。 和 <code>min_sample_time</code> 不同，<code>timer_rate</code>单纯仅仅只规定采样间隔。该设定值越小，负载采样越敏感，频率调整更为敏感，但受限于 <code>min_sample_time</code> <code>above_hispeed_delay</code> 等延迟参数。但是实际上的采样间隔可能会比设定值更长，最长时间为 <code>timer_rate</code> 和 <code>timer_slack</code> 之和。当 <code>timer_clack</code> 值为 -1 时则无上限。</p>
<p>调节这个参数一般不能使手机省电。比如将该值设置的较长，固然可以降低内核探看 CPU 负载的频率，节省电量，但是内核就不能及时感知到负载的下降而及时降频。这个参数的设置取决于你手机对于长线程进程的需求。</p>
<hr>
<h1 id="应急反应机制"><a href="# 应急反应机制" class="headerlink" title="应急反应机制"></a>应急反应机制 </h1><h2 id="hispeed-freq"><a href="#hispeed-freq" class="headerlink" title="hispeed_freq"></a>hispeed_freq</h2><p> 这个参数的目的是指定面对突发的大负载做出应急的反应操作。也就是说当负载突然升高到 <code>go_hispeed_load</code> 且该核心正在运行在较低的频率时，CPU 运行频率会瞬间升高到这个参数指定的频率。这种情况一般都发生在暂时处于闲置的核心上。<code>hispeed_freq</code> 是一个理想的高性能工作频率, 假定该频率足以应对大多数高负载工作。当 CPU 运行在这个频率超过一段时间（即 <code>above_hispeed_delay</code>），CPU 才会继续升高频率。</p>
<p>这个参数如果设置得较低，那么应对突发的大负荷，CPU 的运行频率可能会较低而引起卡顿；如果该值设置的太高则比较容易引起发热。</p>
<h2 id="go-hispeed-load"><a href="#go-hispeed-load" class="headerlink" title="go_hispeed_load"></a>go_hispeed_load</h2><p>这个参数就是规定当 CPU 负载突然到达该值时且当前 CPU 处于闲置状态（离线亦或者是运行在较低频率），CPU 就会瞬间将频率升到 <code>hispeed_freq</code> 以便应对突发状况。该参数的默认值是 99。</p>
<p>一般地，这个值越低，对于突发的大负荷工作，CPU 的反应就会越敏感。如果该值设置的太高则比较容易面对一些突发负载无法立刻升频做出反应引起卡顿，设置的太低则会出现过于频繁的升频导致发热和耗电。</p>
<h2 id="above-hispeed-delay"><a href="#above-hispeed-delay" class="headerlink" title="above_hispeed_delay"></a>above_hispeed_delay</h2><p>这个参数是设置成当 CPU 频率运行在 <code>hispeed_freq</code> 甚至更高以后，突发的负载并没有立刻降低。当 CPU 运行在该频率的时间超过该参数的指定值后，CPU 就会进一步进行升频，以便应对大长线程的大负荷。该参数的默认值是 20000us。设置该参数时可以根据 CPU 所在的不同频率设置不同的延迟。</p>
<p>该参数的格式是单个固定数值，或者是频率和频率区间成对出现用冒号隔开。当参数中涉及到频率时，频率必须采用升序数列。</p>
<blockquote>
<p>比如 <code>19000 1400000:39000 1700000:19000</code> 表示当 CPU 频率在 1.4GHz 以下时 CPU 要在 <code>go_hispeed_load</code> 甚至更高的负载下运行超过 19000 us 才会进一步升频；运行频率在 1.4Ghz~1.7GHz 时延时设置为 39000us；超过 1.7GHz 时则采用 19000us 。</p>
</blockquote>
<p>当该参数设置得较小时 CPU 则会较快地升频（可能会引起卡顿），设置得较大时 CPU 可能会因为不能及时升频而引起卡顿。</p>
<hr>
<h1 id="鸡血模式"><a href="# 鸡血模式" class="headerlink" title="鸡血模式"></a>鸡血模式</h1><h2 id="boost- 和 -boostpulse-duration"><a href="#boost- 和 -boostpulse-duration" class="headerlink" title="boost 和 boostpulse_duration"></a>boost 和 boostpulse_duration</h2><p><code>boost</code> 这个参数由内核写入。如果非零，立即提高所有 CPU 的频率到该 CPU 的 <code>hispeed_freq</code> 甚至更高，直到零被写入此属性，期间无论负载是否降低都不会引起频率的改变。如果为零，则会允许 CPU 频率根据负载而降低到低于 <code>hispeed_freq</code> 设定的频率。默认值为零。<br><code>boostpulse_duration</code> 指在每次 <code>boost</code> 被写入后，CPU 的频率被提升到 <code>hispeed_freq</code> 后在该频率下运行的最低间隔。在该间隔之内，就算 <code>boost</code> 值重新设为零，CPU 仍不会降频。</p>
<hr>
<h1 id="其它参数"><a href="# 其它参数" class="headerlink" title="其它参数"></a>其它参数 </h1><h2 id="io-is-busy"><a href="#io-is-busy" class="headerlink" title="io_is_busy"></a>io_is_busy</h2><p> 这个参数决定是否根据设备的存储有关的 I/O （包括数据在存储上的读写、数据库的修改、熵的增加等）而提升 CPU 频率，以便加快 I/O 性能。</p>
<h2 id="align-windows"><a href="#align-windows" class="headerlink" title="align_windows"></a>align_windows</h2><p>是否对齐所有 CPU 的计时器窗口。对齐的优点是同时评估整个簇的 CPU 以便获得对整个簇的 CPU 的负载信息。缺点是整个簇的 CPU 会同时上线和同时离线导致性能突然增加或突然下降。现在一般都不会开启。</p>
<h2 id="scaling-min-freq- 和 -scaling-max-freq"><a href="#scaling-min-freq- 和 -scaling-max-freq" class="headerlink" title="scaling_min_freq 和 scaling_max_freq"></a>scaling_min_freq 和 scaling_max_freq</h2><p>在 CPU 的设计的容许频率范围内（一般都是由内核规定）再设定一个 CPU 的运行频率区间，内核将会在这个区间内选择 CPU 的运行频率。</p>
<h2 id="ignore-hispeed-on-notif"><a href="#ignore-hispeed-on-notif" class="headerlink" title="ignore_hispeed_on_notif"></a>ignore_hispeed_on_notif</h2><p>如果该参数非零，则频率的改变由调度程序触发，则不应用上述与频率设定相关的逻辑（比如不再根据负载控制频率）。</p>
<h2 id="fast-ramp-down"><a href="#fast-ramp-down" class="headerlink" title="fast_ramp_down"></a>fast_ramp_down</h2><p>如果非零，则不应用 <code>min_sample_time</code>。</p>
<h2 id="max-freq-hysteresis"><a href="#max-freq-hysteresis" class="headerlink" title="max_freq_hysteresis"></a>max_freq_hysteresis</h2><p>这是 <code>interave</code> 调速器的一个扩展，保持 <code>interative</code> 调速器在 <code>policy-&gt; max</code> 的时间。</p>
<h2 id="use-sched-load"><a href="#use-sched-load" class="headerlink" title="use_sched_load"></a>use_sched_load</h2><p>如果该值非零，则 <code>align_windows</code> 则不会生效。</p>
<h2 id="use-migration-notif"><a href="#use-migration-notif" class="headerlink" title="use_migration_notif"></a>use_migration_notif</h2><p>是否在所有 CPU 之间对齐定时器窗口。</p>
<hr>
<p>本文参考了 linux CPU 调速器机制文档和 CAF 的相关文档。</p>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 温控 </tag>
            
            <tag> CPU </tag>
            
            <tag> Interactiv </tag>
            
            <tag> 调速器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 的网络感叹号]]></title>
      <url>/archives/android-captive-portal.html</url>
      <content type="html"><![CDATA[<p>从 Android L 开始，原生和 CM 的 ROM 用户就会发现，状态栏的网络信号莫名多了一个感叹号。而且，有的时候明明连着 WIFI 用得好好的，却突然跳到数据流量。</p>
<a id="more"></a>
<h1 id="“感叹号”出现的原因和作用"><a href="#“感叹号”出现的原因和作用" class="headerlink" title="“感叹号”出现的原因和作用"></a>“感叹号”出现的原因和作用</h1><p>Android 5.0 开始引入了一种新的网络评估机制来评估网络状况，当你有网络请求时会自动选择网络连接条件最好的一个网络进行连接（也就是 WIFI 和数据之间自动切换）。自然，验证方法是连接到 Google 自家的服务器进行检查。</p>
<blockquote>
<p>这个检测的作用除了可以检查该网络是否能够使用以外，还能检查该网络是否需要登陆（就是运营商的 WiFi 如 CCMC，或者其它公共场所的免费 WiFi 的那个认证）。</p>
</blockquote>
<hr>
<p>正是这个 google 被 Wall 掉了以后导致安卓没有办法评估网络。所以，系统每隔一定时间都会重新尝试连接，就在不知不觉中消耗了数据流量。更恐怖的就是 Android 认为在 WiFi 下无法连接互联网，就让联网的程序通通走流量。于是这样就导致了那个蛋碎的感叹号一直存在，以及 WiFi 用着用着突然自动连回数据连接了。</p>
<h1 id="解决方法"><a href="# 解决方法" class="headerlink" title="解决方法"></a>解决方法 </h1><h2 id="Android-5-0-6-0"><a href="#Android-5-0-6-0" class="headerlink" title="Android 5.0-6.0"></a>Android 5.0-6.0</h2><h3 id="直接禁用验证"><a href="# 直接禁用验证" class="headerlink" title="直接禁用验证"></a> 直接禁用验证 </h3><p> 手机连接电脑开启 USB 调试，输入以下 ADB 命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_detection_enabled 0"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启设备或者开关一下飞行模式就行。</p>
<blockquote>
<p>但是，还记得我说过么，这个感叹号可以用来判断网络可用性，还可以用来判断网络是否需要登录。</p>
</blockquote>
<h3 id="更换验证地址"><a href="# 更换验证地址" class="headerlink" title="更换验证地址"></a>更换验证地址 </h3><p> 当然还有另外一个方法，就是直接把这个服务地址切换到国内的可用的地址就行了。这样既可以去除叹号，也可以检查网络可用情况。</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_server your.domain"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="恢复方法"><a href="# 恢复方法" class="headerlink" title="恢复方法"></a>恢复方法 </h3><p> 如果你用的是第一种方法，恢复方法是：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_detection_enabled 1"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果你用的是第二种方法，那么你需要输入的是：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings delete global captive_portal_server"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Android-7-0-7-1-0"><a href="#Android-7-0-7-1-0" class="headerlink" title="Android 7.0-7.1.0"></a>Android 7.0-7.1.0</h2><p>与 Android 5.0-6.0 所用的方法相同，只是验证要求从 443 端口进行，也就是说必须要支持通过 HTTPS 正常访问。</p>
<p>也可以通过 ADB 输入以下指令禁用 HTTPS：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_use_https 0"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>恢复 HTTPS 的方法是用 ADB 输入以下指令：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_use_https 1"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings delete global captive_portal_use_https"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Android-7-1"><a href="#Android-7-1" class="headerlink" title="Android 7.1+"></a>Android 7.1+</h2><p>从 Android 7.1.1 开始，系统在验证时不会自动加入 <code>generate_204</code> 的后缀了，这意味着 url 可以设计的更加灵活，同时也意味着在设置的时候需要填入完整的 url，即需要在现有的 url 验证地址后面加上 <code>/generate_204</code></p>
<p>同时也默认要求使用 HTTPS 的方法进行验证。禁用和恢复 HTTPS 检查的方法同 <a href="#Android-7-0-7-1-0">Android 7.0 ~ 7.1.0</a> 的方法。</p>
<p>在 Android 7.1+ 上配置 Captive Portal 地址需要两行指令：</p>
<pre><code>adb shell &quot;settings put global captive_portal_http_url http://yourdomain&quot;; 
adb shell &quot;settings put global captive_portal_https_url https://]]yourdomain&quot;;
</code></pre><h2 id="手机端应用"><a href="# 手机端应用" class="headerlink" title="手机端应用"></a>手机端应用 </h2><p><a href="www.noisyfox.cn"> 小狐狸 </a> 开发了这款“叹号杀手”应用实现了这个：<a href="http://www.coolapk.com/apk/org.foxteam.noisyfox.noexclamation" target="_blank" rel="external">酷安下载地址</a></p>
<p>用这款应用可以快速设置禁用验证或者更换验证地址。<del>可能 </del> 需要 root，如果没 root <del>可能 </del> 会导致修改失败。</p>
<h1 id="架设自己的验证服务"><a href="# 架设自己的验证服务" class="headerlink" title="架设自己的验证服务"></a>架设自己的验证服务 </h1><p> 这个验证机制是访问所给地址的 <code>generate_204</code> 子目录看返回值，所以可以这么解决：</p>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>开启 Rewrite 模块（大部分虚拟主机商都会帮你开好），在 <code>.htaccess</code> 文件中最末写入以下值：</p>
<pre class="line-numbers language-apacheconf"><code class="language-apacheconf"><span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;</span>IfModule</span><span class="token directive-block-parameter attr-value"> mod_rewrite.c</span><span class="token punctuation">></span></span>
  <span class="token directive-inline property">RewriteEngine</span> On
  <span class="token directive-inline property">RewriteCond</span> <span class="token variable">%{REQUEST_URI}</span><span class="token regex"> /generate_204$</span>
  <span class="token directive-inline property">RewriteRule</span><span class="token regex"> $</span> / [R=204]
<span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Nignx"><a href="#Nignx" class="headerlink" title="Nignx"></a>Nignx</h2><p>直接在配置文件中写入：</p>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>generate_204 <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">204</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Workaround"><a href="#Workaround" class="headerlink" title="Workaround"></a>Workaround</h2><p><del>如果你没有服务器（比如你只用 pages 服务），或者上述设置方法全部无效，还有一个 workaround 的方法——直接建立一个名字叫做“generate_204”的空文件，因为空文件也会被 Android 当做是 204 返回（毕竟空文件绝对不会是网络登录验证咯）</del> 经测试，这种方法已经不能生效了。</p>
<h2 id="验证服务地址"><a href="# 验证服务地址" class="headerlink" title="验证服务地址"></a>验证服务地址</h2><ul>
<li>www.qualcomm.com/generate_204（高通）</li>
<li>noisyfox.cn/generate_204（小狐狸）</li>
<li><del>www.v2ex.com</del>（V2EX 旧 Captive 地址，已弃用）</li>
<li>captive.v2ex.co/generate_204（V2EX 新 Captive 地址）</li>
<li><del>bbs.mfunz.com</del>（魔趣开源项目，已弃用）</li>
<li>g.cn/generate_204（谷歌中国，一个不存在的网站）</li>
<li>google.cn</li>
<li>developer.google.cn/generate_204（谷歌开发者文档中国）</li>
<li>http204.sinaapp.com/generate_204（Tink 提供，运行在 SAE 上）</li>
</ul>
<h1 id="分析 -NetWorkMonitor- 的工作原理"><a href="# 分析 -NetWorkMonitor- 的工作原理" class="headerlink" title="分析 NetWorkMonitor 的工作原理"></a>分析 NetWorkMonitor 的工作原理 </h1><h2 id="Android-5-0-6-0-1"><a href="#Android-5-0-6-0-1" class="headerlink" title="Android 5.0~6.0"></a>Android 5.0~6.0</h2><p> 以下代码摘自 <a href="https://android.googlesource.com/platform/frameworks/base/+/android-6.0.1_r70/services/core/java/com/android/server/connectivity/NetworkMonitor.java" target="_blank" rel="external">Android 6.0.1_r70 分支</a> 的 <code>NetworkMonitor</code> 第 384 行至第 425 行</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> CMD_REEVALUATE<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>arg1 <span class="token operator">!=</span> mReevaluateToken <span class="token operator">||</span> mUserDoesNotWant<span class="token punctuation">)</span>
                <span class="token keyword">return</span> HANDLED<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// Don't bother validating networks that don't satisify the default request.</span>
            <span class="token comment" spellcheck="true">// This includes:</span>
            <span class="token comment" spellcheck="true">//  - VPNs which can be considered explicitly desired by the user and the</span>
            <span class="token comment" spellcheck="true">//    user's desire trumps whether the network validates.</span>
            <span class="token comment" spellcheck="true">//  - Networks that don't provide internet access.  It's unclear how to</span>
            <span class="token comment" spellcheck="true">//    validate such networks.</span>
            <span class="token comment" spellcheck="true">//  - Untrusted networks.  It's unsafe to prompt the user to sign-in to</span>
            <span class="token comment" spellcheck="true">//    such networks and the user didn't express interest in connecting to</span>
            <span class="token comment" spellcheck="true">//    such networks (an app did) so the user may be unhappily surprised when</span>
            <span class="token comment" spellcheck="true">//    asked to sign-in to a network they didn't want to connect to in the</span>
            <span class="token comment" spellcheck="true">//    first place.  Validation could be done to adjust the network scores</span>
            <span class="token comment" spellcheck="true">//    however these networks are app-requested and may not be intended for</span>
            <span class="token comment" spellcheck="true">//    general usage, in which case general validation may not be an accurate</span>
            <span class="token comment" spellcheck="true">//    measure of the network's quality.  Only the app knows how to evaluate</span>
            <span class="token comment" spellcheck="true">//    the network so don't bother validating here.  Furthermore sending HTTP</span>
            <span class="token comment" spellcheck="true">//    packets over the network may be undesirable, for example an extremely</span>
            <span class="token comment" spellcheck="true">//    expensive metered network, or unwanted leaking of the User Agent string.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mDefaultRequest<span class="token punctuation">.</span>networkCapabilities<span class="token punctuation">.</span><span class="token function">satisfiedByNetworkCapabilities</span><span class="token punctuation">(</span>mNetworkAgentInfo<span class="token punctuation">.</span>networkCapabilities<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>mValidatedState<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> HANDLED<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mAttempts<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// Note: This call to isCaptivePortal() could take up to a minute. Resolving the</span>
            <span class="token comment" spellcheck="true">// server's IP addresses could hit the DNS timeout, and attempting connections</span>
            <span class="token comment" spellcheck="true">// to each of the server's several IP addresses (currently one IPv4 and one</span>
            <span class="token comment" spellcheck="true">// IPv6) could each take SOCKET_TIMEOUT_MS.  During this time this StateMachine</span>
            <span class="token comment" spellcheck="true">// will be unresponsive. isCaptivePortal() could be executed on another Thread</span>
            <span class="token comment" spellcheck="true">// if this is found to cause problems.</span>
            <span class="token keyword">int</span> httpResponseCode <span class="token operator">=</span> <span class="token function">isCaptivePortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponseCode <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>mValidatedState<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponseCode <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> httpResponseCode <span class="token operator">&lt;=</span> <span class="token number">399</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>mCaptivePortalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当安卓设备联网后，如果该网络是 VPN，那么直接使用这个网络进行连接，否则调用 <code>isCaptivePortal()</code> 函数进行网络状况的判定，再根据判定结果决定是否选用此网络。这个函数就会先访问系统内指定的网址并根据返回结果来判断网络状况，而这个网址如字面所说，会产生一个 204 返回值。204 返回值的意思就是空内容。如果当 WiFi 是需要登录才可以连接，那么当试图访问 google 的服务器的链接就一定会自动跳转到一个登录页面，这个时候 http 请求的返回值就必然不是 204。就是通过这一机制，便可以区分当前 WiFi 是否需要验证，不得不佩服想出这个办法的人来。</p>
<h2 id="Android-7-0-7-1-0-1"><a href="#Android-7-0-7-1-0-1" class="headerlink" title="Android 7.0-7.1.0"></a>Android 7.0-7.1.0</h2><p>以下代码摘自 <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.1.0_r2/services/core/java/com/android/server/connectivity/NetworkMonitor.java" target="_blank" rel="external">Android 7.1.0_r2 分支</a> 的 <code>NetworkMonitor</code> 第 336 行至第 386 行。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> CMD_LAUNCH_CAPTIVE_PORTAL_APP<span class="token operator">:</span>
            <span class="token keyword">final</span> Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">.</span>ACTION_CAPTIVE_PORTAL_SIGN_IN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">.</span>EXTRA_NETWORK<span class="token punctuation">,</span> mNetworkAgentInfo<span class="token punctuation">.</span>network<span class="token punctuation">)</span><span class="token punctuation">;</span>
            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">.</span>EXTRA_CAPTIVE_PORTAL<span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">CaptivePortal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ICaptivePortal<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appResponse</span><span class="token punctuation">(</span><span class="token keyword">int</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> APP_RETURN_WANTED_AS_IS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                mContext<span class="token punctuation">.</span><span class="token function">enforceCallingPermission</span><span class="token punctuation">(</span>
                                        android<span class="token punctuation">.</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CONNECTIVITY_INTERNAL<span class="token punctuation">,</span>
                                        <span class="token string">"CaptivePortal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token function">sendMessage</span><span class="token punctuation">(</span>CMD_CAPTIVE_PORTAL_APP_FINISHED<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            intent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_BROUGHT_TO_FRONT <span class="token operator">|</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mContext<span class="token punctuation">.</span><span class="token function">startActivityAsUser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> HANDLED<span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> NOT_HANDLED<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Message message <span class="token operator">=</span> <span class="token function">obtainMessage</span><span class="token punctuation">(</span>EVENT_PROVISIONING_NOTIFICATION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
            mNetworkAgentInfo<span class="token punctuation">.</span>network<span class="token punctuation">.</span>netId<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mConnectivityServiceHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
* Result of calling isCaptivePortal().
* @hide
*/</span>
<span class="token annotation punctuation">@VisibleForTesting</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CaptivePortalProbeResult</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> CaptivePortalProbeResult FAILED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaptivePortalProbeResult</span><span class="token punctuation">(</span><span class="token number">599</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">int</span> mHttpResponseCode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP response code returned from Internet probe.</span>
<span class="token keyword">final</span> String mRedirectUrl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Redirect destination returned from Internet probe.</span>
<span class="token keyword">public</span> <span class="token function">CaptivePortalProbeResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> httpResponseCode<span class="token punctuation">,</span> String redirectUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mHttpResponseCode <span class="token operator">=</span> httpResponseCode<span class="token punctuation">;</span>
    mRedirectUrl <span class="token operator">=</span> redirectUrl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">boolean</span> <span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> mHttpResponseCode <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">boolean</span> <span class="token function">isPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mHttpResponseCode <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> mHttpResponseCode <span class="token operator">&lt;=</span> <span class="token number">399</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Android-7-1-1"><a href="#Android-7-1-1" class="headerlink" title="Android 7.1.1"></a>Android 7.1.1</h2><p>以下代码摘自 <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.1.1_r4/services/core/java/com/android/server/connectivity/NetworkMonitor.java" target="_blank" rel="external">Android 7.1.1_r4 分支 </a> 的 <code>NetworkMonitor</code> 第 611 行至第 631 行。<br> 可以看到 Android 7.1.1 开始已经不会再自动给验证 url 加上 <code>generate_204</code>。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalServerHttpsUrl</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_HTTPS_URL<span class="token punctuation">,</span> DEFAULT_HTTPS_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalServerHttpUrl</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_HTTP_URL<span class="token punctuation">,</span> DEFAULT_HTTP_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalFallbackUrl</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>
  Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_FALLBACK_URL<span class="token punctuation">,</span> DEFAULT_FALLBACK_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalUserAgent</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_USER_AGENT<span class="token punctuation">,</span> DEFAULT_USER_AGENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getSetting</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String symbol<span class="token punctuation">,</span> String defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> String value <span class="token operator">=</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value <span class="token operator">!=</span> null <span class="token operator">?</span> value <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Root </tag>
            
            <tag> Captive </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用 Flow.CI 让 Hexo 持续集成]]></title>
      <url>/archives/hexo-auto-deploy-with-flow-ci.html</url>
      <content type="html"><![CDATA[<p><a href="https://Flow.CI" target="_blank" rel="external">Flow.CI</a> 是一个由著名移动应用公测平台 <a href="https://fir.im" target="_blank" rel="external">Fir.im</a> 推出的持续集成（CI）的 saas 服务平台，感觉就是中国的 Travis.CI，作用是把你 Github 或者 Coding 上的代码拉过来，通过容器技术自动化完成代码的构建、测试、交付和部署。整个对 Flow.CI 使用下来的感受就是简洁和美观，配置方便，速度很快。</p>
<a id="more"></a>
<p>虽然内测阶段我没有拿到邀请码，但是我至少参加了公测。<del>目前 Flow.CI 依然在公测，所以依旧免费 </del> 公测早就结束了，现在要付费了。<br>跟 Daocloud 的代码构建相比，Flow.CI 是更纯粹的持续集成 / 部署平台。</p>
<h1 id="基本思路"><a href="# 基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><ul>
<li>关闭 Daocloud 持续集成功能</li>
<li>配置 Flow.CI 持续集成</li>
<li>增加触发器</li>
<li>在本地提交 Hexo 主项目修改的 <code>git commit</code> 进行测试。</li>
</ul>
<h1 id="准备工作"><a href="# 准备工作" class="headerlink" title="准备工作"></a>准备工作 </h1><p> 如果之前用的是 Daocloud 的持续集成服务，首先是禁用 Daocloud 的持续集成，在 Daocloud 的控制台关掉持续集成。<br>如果以后再也不用 Daocloud 了，那么建议你把 <code>daocloud.yml</code> 和<code>dockerfile</code>两个文件删除。虽然不删除也不影响部署，但是这两个配置文件并没有起任何作用。</p>
<h1 id="创建持续集成项目"><a href="# 创建持续集成项目" class="headerlink" title="创建持续集成项目"></a>创建持续集成项目 </h1><p> 这一步很简单，按照 Flow.CI 控制台里面的按钮顺着点“创建项目”-&gt; 选择 CODING 代码托管库 -&gt; 选择你的用户 -&gt; 选择你的项目。完成！</p>
<p>这时 CODING 里面的项目会有两处变化：</p>
<ul>
<li>新增了 Flow.CI 的 webhook</li>
<li>新增了项目下的部署公钥（只读）</li>
</ul>
<h1 id="创建并设置工作流"><a href="# 创建并设置工作流" class="headerlink" title="创建并设置工作流"></a>创建并设置工作流 </h1><p><img src="https://bbs-static.nfz.yecdn.com/i/0000035.png" alt="0000035.png"><br> 接下来点击“创建你的第一个工作流”，开始设置部署流程。<br>由于 Hexo 的所需环境是 Node.js，所以选择 Node.js，版本选择最新的 6.6.0。</p>
<p>接下来就会进入到工作流定义界面。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000036.png" alt="0000036.png"></p>
<h2 id="触发器"><a href="# 触发器" class="headerlink" title="触发器"></a>触发器 </h2><p> 触发器自然是选择对所有分支的 Push、对所有的 Tag 进行匹配。当然你也可以设置每天定时运行。</p>
<h2 id="初始化"><a href="# 初始化" class="headerlink" title="初始化"></a>初始化 </h2><p> 保持默认即可，初始环境变量（Flow.CI 提供）和 Node.js 的组件版本等信息。</p>
<h2 id="Git- 仓库克隆"><a href="#Git- 仓库克隆" class="headerlink" title="Git 仓库克隆"></a>Git 仓库克隆 </h2><p> 保持默认即可，拉取你的仓库。</p>
<h2 id="缓存"><a href="# 缓存" class="headerlink" title="缓存"></a>缓存 </h2><p> 保持默认即可，使用缓存可以大大加快下一次部署的速度。</p>
<h2 id="安装"><a href="# 安装" class="headerlink" title="安装"></a>安装 </h2><p> 保持默认即可。使用 <code>npm install</code> 指令安装依赖项，而安装的依赖项基于你仓库中的 <code>package.json</code></p>
<h2 id="自定义脚本"><a href="# 自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本 </h2><p> 在左侧的工作流定义的“安装”与“测试”之间的 + 号，添加一个节点“自定义脚本”</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000037.png" alt="0000037.png"></p>
<p>我们的脚本要执行的有：</p>
<ul>
<li>Hexo 命令行的安装</li>
<li>Hexo 静态站点的生成和部署</li>
</ul>
<p>在这个节点输入以下脚本：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 安装 Hexo 命令行工具</span>
flow_cmd "npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
<span class="token comment" spellcheck="true"># 准备并安装私钥</span>
flow_cmd "cp .daocloud/id_rsa ." <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "chmod 600 ./id_rsa" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "eval $(ssh<span class="token punctuation">-</span>agent)" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "ssh<span class="token punctuation">-</span>add ./id_rsa" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
<span class="token comment" spellcheck="true"># 执行 Hexo 生成和发布</span>
flow_cmd "hexo clean" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "hexo g" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "hexo d" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试"><a href="# 测试" class="headerlink" title="测试"></a>测试 </h2><p> 在右上角把这个节点删除。我们不需要执行 <code>npm test</code>。</p>
<h2 id="完成后"><a href="# 完成后" class="headerlink" title="完成后"></a>完成后 </h2><p> 如果你打算让 Flow.CI 每次部署成功后都给你发邮件，可以在这里设置。默认会给你的注册时用的邮箱发邮件。</p>
<h1 id="手动测试"><a href="# 手动测试" class="headerlink" title="手动测试"></a>手动测试 </h1><p> 回到构建列表，点击手动构建，选择你的分支开始构建，之后会看到整个工作流的执行过程和日志信息（绿色为成功，蓝色为正在执行，灰色为等待，红色为停止或失败）。<br>然后写一篇博客（庆祝一下你配置了 Flow.CI 嘛），然后用 <code>git commit</code> 和 <code>git push</code> 推送到你的仓库，看一下你的 Flow.CI 是否开始了自动运行。</p>
<h1 id="小结"><a href="# 小结" class="headerlink" title="小结"></a>小结 </h1><p> 本文介绍了从 Daocloud 进行持续集成 / 部署改造为 Flow.CI 进行集成 / 部署的过程，今后的使用和之前的方式一样，向仓库提交 push 就可以触发自动部署。<br>和 Daocloud 的代码构建相比，Flow.CI 的优点如下：</p>
<ul>
<li>更简单、直观的方式，更容易理解（但是并不像配置一个 yml 那样 Geek，对吧？）</li>
<li><del>更加丰富的触发方式（比如支持正则表达式匹配 commit 信息）</del>其实这个优势并不明显</li>
<li>方便地配置环境（而不需要像 Daocloud 一样，需要先生成一个带着 node.js 和 hexo 的 image，用来搭建一个 docker 作为运行环境）</li>
<li>控制台界面比 Daocloud 要漂亮得多（美，才是驱动开发的第一生产力！）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI </tag>
            
            <tag> Flow.CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 DaoCloud 让 Hexo 持续集成]]></title>
      <url>/archives/hexo-auto-deploy-with-daocloud.html</url>
      <content type="html"><![CDATA[<p>用 Hexo 搭建好博客，使用起来算方便，而且静态页面使用起来很方便，但是每次还要在安装了 Hexo 环境的机器上才能写文章和发布。能不能在任何地方只要新增或修改了 post 就自动生成并部署 hexo 呢？</p>
<a id="more"></a>
<h1 id="实现思路"><a href="# 实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul>
<li>用 CODING 开源社区对 Hexo 项目的源码进行管理（master 分支，要配置好 Hexo 部署信息）</li>
<li>在 Daocloud 上进行 Hexo 环境的构建</li>
<li>Daocloud 通过持续集成功能自动生成静态页面</li>
<li>通过 FtpSync 插件上传到我的虚拟空间</li>
</ul>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000029.jpg" alt="0000029.jpg"></p>
<h1 id="需要的东西"><a href="# 需要的东西" class="headerlink" title="需要的东西"></a>需要的东西</h1><ul>
<li><a href="https://hexo.io" target="_blank" rel="external">Hexo</a>——静态页面生成器</li>
<li><a href="https://coding.io" target="_blank" rel="external">CODING.NET</a>——中国版 Github，可以拥有免费无限私有项目。</li>
<li><a href="https://www.daocloud.io" target="_blank" rel="external">Daocloud</a>——中国版 Docker hub，而且还能持续集成。</li>
</ul>
<h1 id="开始配置"><a href="# 开始配置" class="headerlink" title="开始配置"></a>开始配置 </h1><p> 首先自然是根据 Hexo 的官方文档对 Hexo 进行基本的配置。然后是创建一个 <strong> 私有仓库 </strong> 把 Hexo 文件夹 push 到你建好的私有仓库中。</p>
<h2 id="通过 master 构建 Hexo 基础运行环境镜像"><a href="# 通过 master 构建 Hexo 基础运行环境镜像" class="headerlink" title="通过 master 构建 Hexo 基础运行环境镜像"></a>通过 <code>master</code> 构建 Hexo 基础运行环境镜像 </h2><p> 国内貌似也没找到什么合适的、支持 Coding 的 CI 平台，最后我找到了 Daocloud。Daocloud 可以根据 dockerfile 自动构建 Docker 私有镜像并同时进行持续集成的能力。所以可以把 Hexo 及其运行环境（node.js）打包成一个镜像。</p>
<ol>
<li>编写 DockerFile。</li>
</ol>
<pre class="line-numbers language-dockerfile"><code class="language-dockerfile">#Dockerfile
FROM node:slim
MAINTAINER 你的用户名 你的邮箱

# 安装 git、ssh 等基本工具
RUN apt-get update && apt-get install -y git ssh-client ca-certificates --no-install-recommends && rm -r /var/lib/apt/lists/*
# 设置时区，不知道为什么？
RUN echo "Asia/Shanghai" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata
# 只安装 Hexo 命令行工具，其他依赖项根据项目 package.json 在持续集成过程中安装
RUN npm install hexo-cli -g
EXPOSE 4000
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>在 Daocloud 的控制面板内的代码构建选项卡内，选择“创建新项目”<ul>
<li>输入你的应用名</li>
<li>设置代码源的地方绑定你的 Coding 或 Github，并绑定你建立好的 Repository。</li>
<li>开启持续集成</li>
<li>执行环境设在国外（The GirlFriend Wall 越来越高了，有时连 npm 都执行不了）</li>
</ul>
</li>
</ol>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000030.png" alt="0000030.png"></p>
<ul>
<li>镜像选择发布在“镜像仓库”中（这个镜像仓库是私有的）</li>
</ul>
<h2 id="通过 -DaoCloud-yml- 定义流程"><a href="# 通过 -DaoCloud-yml- 定义流程" class="headerlink" title="通过 DaoCloud.yml 定义流程"></a>通过 DaoCloud.yml 定义流程</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#Daocloud.yml</span>
<span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/&lt; 你的用户名 <span class="token punctuation">></span>/&lt; 你的应用名 <span class="token punctuation">></span><span class="token punctuation">:</span>latest  <span class="token comment" spellcheck="true">#使用已经在上一步创建好的 Hexo 基础环境镜像（并不包括博客项目源码）</span>
<span class="token key atrule">install</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> npm install
<span class="token key atrule">before_script</span><span class="token punctuation">:</span>
<span class="token key atrule">script</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> hexo clean
 <span class="token punctuation">-</span> hexo g
 <span class="token punctuation">-</span> hexo d
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>yml 当中有一段 <code>before_script</code>，这个是用户自定义脚本。如果说你是在用 Github<br> 或者 Coding 的 Pages 服务，需要把生成的静态页面 push 到你的 Repository 中，你就需要用 SSH 使 Daocloud 和 Repository 连接。配置 SSH 的具体用法见文章最后附录。</p>
<p>在 install 过程中才进行了 npm install，并没有在镜像构建时进行依赖项安装，这是因为依赖项安装过程根据不同用户的 Hexo 的配置和安装的功能不同而不同（<code>package.json</code>中记录的不仅仅是 Hexo 依赖项，还有用户装了的插件），并没有通用性，而且本身它就属于 build 过程，尽管花费时间稍长（平均耗时 90 秒），但是这样更科学。</p>
</blockquote>
<p>接下来是对 Daocloud 进行配置。</p>
<ul>
<li>在设置选项卡中设置用 <code>daocloud.yml</code> 定义流程。</li>
<li>镜像构建中两个勾都选上。</li>
</ul>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000032.png" alt="0000032.png"></p>
<ul>
<li>触发规则按照如图所示的定义。</li>
</ul>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000031.png" alt="0000031.png"></p>
<h2 id="大功告成"><a href="# 大功告成" class="headerlink" title="大功告成"></a>大功告成 </h2><p> 之后写文章发布就是使用 <code>git commit</code> 而不是 <code>hexo g</code> 和<code>hexo d</code>了。只要提交以后，持续集成平台就会自动生成静态网页并发布。</p>
<h1 id="附录"><a href="# 附录" class="headerlink" title="附录"></a>附录 </h1><h2 id="关于 daocloud-yml"><a href="# 关于 daocloud-yml" class="headerlink" title="关于 daocloud.yml"></a> 关于 daocloud.yml</h2><p>Daocloud 如今已经开始用 daocloud YAML 2.0 定义流程了（1.0 版本的 YAML 于 9 月份停用了）, 然而本篇博客中的依然是 YAML 1.0，所以请自行按照网页提示进行 YAML 升级。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000033.png" alt="0000033.png"></p>
<h2 id="HexoAutoBuildScript 项目"><a href="#HexoAutoBuildScript 项目" class="headerlink" title="HexoAutoBuildScript 项目"></a>HexoAutoBuildScript 项目 </h2><p> 本文提到的有关的 dockerfile 和 daocloud.yml（包括 1.0 和 2.0）开源在 Github 上，并包括更加详细的使用教程</p>
<ul>
<li><a href="https://github.com/neoFelhz/HexoAutoBuildScript" target="_blank" rel="external">项目地址</a></li>
<li><a href="https://github.com/neoFelhz/HexoAutoBuildScript/wiki" target="_blank" rel="external">使用教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI </tag>
            
            <tag> DaoCloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全站开启 HSTS]]></title>
      <url>/archives/enable-hsts.html</url>
      <content type="html"><![CDATA[<p>HSTS 是 HTTP Strict Transport Security （HTTP 严格安全传输）的缩写。开启了这项设置以后，大部分浏览器会强制性地使用 HTTPS 来请求资源，能够更加有效地保护网站和用户的数据安全。</p>
<a id="more"></a>
<p>一般情况（未启用 HSTS），浏览器会允许用户在了解了安全风险之后继续使用不安全的连接来访问，但如果启用了 HSTS，则不允许忽略，所以如果你要启用 https ，得一定要 <strong> 很长期使用 HTTPS</strong>，或者像我一样，成为一个 https 控。</p>
<h1 id="启用 HSTS"><a href="# 启用 HSTS" class="headerlink" title="启用 HSTS"></a>启用 HSTS</h1><p>HSTS 是一个响应头，格式如下：</p>
<pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload;
</code></pre><ul>
<li>max-age，单位是秒，用来告诉浏览器在指定时间内，这个网站必须通过 HTTPS 协议来访问。也就是对于这个网站的 HTTP 地址，浏览器需要先在本地替换为 HTTPS 之后再发送请求。</li>
<li>includeSubDomains ，可选参数，如果指定这个参数，表明这个网站所有子域名也必须通过 HTTPS 协议来访问。</li>
<li>preload ，可选参数，预加载到浏览器缓存。</li>
</ul>
<blockquote>
<p><a href="https://tools.ietf.org/html/rfc6797" target="_blank" rel="external">RFC 6797</a> 对 HSTS 进行了详细说明。</p>
</blockquote>
<h1 id="配置 -HSTS"><a href="# 配置 -HSTS" class="headerlink" title="配置 HSTS"></a>配置 HSTS</h1><p>HSTS 这个响应头只能用于 HTTPS 响应；网站必须使用默认的 443 端口；必须使用域名，不能是 IP。而且启用 HSTS 之后，<strong>一旦网站证书错误，用户无法选择忽略。</strong>（这意味着你需要及时给证书续命）<br>添加 HSTS 支持其实很简单，修改一下 Web 服务器的配置，增加一个 HTTP 头就行。</p>
<blockquote>
<p>举个例子，这个域名目前使用的是：</p>
</blockquote>
<pre><code>Strict-Transport-Security: max-age=15552000; includeSubDomains; preload max-age=15552000
</code></pre><p>告诉浏览器缓存这条规则 180 天；includeSubDomains 对子域名也使用相同的规则；preload 允许将这条规则内置进浏览器。</p>
<h1 id="WebServer- 配置 -HSTS"><a href="#WebServer- 配置 -HSTS" class="headerlink" title="WebServer 配置 HSTS"></a>WebServer 配置 HSTS</h1><p>对于 Apache，只需在 .htaccess 加入以下代码即可</p>
<pre class="line-numbers language-apache"><code class="language-apache">Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" env=HTTPS
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对于 Nginx，可以在站点配置文件中添加</p>
<pre class="line-numbers language-conf"><code class="language-conf">add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="申请 -HSTS-Preload-List"><a href="# 申请 -HSTS-Preload-List" class="headerlink" title="申请 HSTS Preload List"></a>申请 HSTS Preload List</h1><p>HSTS 必须要在浏览器访问过你的网站一次以后才会生效，如果希望提前生效，需要申请 HSTS Preloading List。<br>目前这个 Preload List 由 Google Chrome 维护，Chrome、Firefox、Safari、IE 11 和 Microsoft Edge 都在使用和不断更新。<br>如果要想把自己的域名加进这个列表，首先需要满足以下条件：</p>
<ul>
<li>拥有合法的证书（如果使用 SHA-1 证书，过期时间必须早于 2016 年）</li>
<li>将所有 HTTP 流量重定向到 HTTPS</li>
<li>确保所有子域名都启用了 HTTPS</li>
<li>输出 HSTS 响应头</li>
<li>max-age 不能低于 18 周（10886400 秒）</li>
<li>必须指定 includeSubdomains 参数</li>
<li>必须指定 preload 参数</li>
</ul>
<p>觉得妥了可以去 <a href="https://hstspreload.org" target="_blank" rel="external">HSTS Preload List</a> 这个页面申请。<br>我的域名已经去申请加入预加载列表了。如果能通过，将会是很吼的！</p>
<blockquote>
<p>特别提醒：对于 HSTS 以及 HSTS Preload List ，如果你不能确保永远提供 HTTPS 服务，就不要启用。因为一旦 HSTS 生效，<strong>你再想把网站重定向为 HTTP ，之前的老用户会被无限重定向，唯一的办法是换新域名。</strong></p>
</blockquote>
<hr>
<p>本站已经加入了 <a href="https://cs.chromium.org/chromium/src/net/http/transport_security_state_static.json?q=nfz.moe&amp;sq=package:chromium&amp;maxsize=5625974&amp;l=24044" target="_blank" rel="external">HSTS Preload List</a>。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000150.jpg" alt="0000150.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 博客栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> HSTS </tag>
            
            <tag> SSL </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[莱卡回家]]></title>
      <url>/archives/laikai-home.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>11 月 3 日是个特别的日子。1957 年 11 月 3 日，前苏联发射了 Sputnik-2 号卫星，这是第二颗进入地球轨道的人造卫星，也是人类发射的第一颗载有活物的卫星。消息发布后，西方世界一片哗然，在美国小得可怜的首枚人造卫星发射之前，苏联的举动彻底夯实了其航天第一强国的地位。美国中情局对此作了大量分析，纠结于苏联卫星究竟是否带了活物之间。在确信苏联发射了活狗，原已令西方震惊，但这只狗的结局，更成为后来数十年的科学悬案。<br> 那只随 Sputnik-2 升空的三岁流浪雌性混血萨摩耶犬名叫莱卡。作为第一只进入太空的地球生物，莱卡名垂青史，但它的结局却着实悲惨。从一开始，苏联人就没打算让它回来。10 月 4 日苏联发射首枚人造卫星后一星期后，赫鲁晓夫就建议再次发射更为复杂的卫星，作为伟大十月革命 40 周年献礼，这意味着工程技术人员只有 3 周时间来设计和制造新的火箭及卫星。这次苏联决定发射生物上天。<br> 一切为了进度， Sputnik-2 使用了 Sputnik-1 的部分备件，为了最大限度提高载荷能力，火箭的部分设备甚至也被拆除。科罗廖夫的助手鲍里斯·切尔托克在回忆中这样写道，“一切火箭技术开发的传统都被抛弃，第二颗卫星的开发根本未经详细设计，或者说根本没有设计。”卫星的大部分部件都是赶工制造的，工程师们甚至被派到工厂协助工人赶工，许多部件甚至省略了蓝图环节。紧张的工期甚至不允许工程师设计出可靠的生命保障系统，更不消说为莱卡铺就一条回家的路。</p>
<p> 发射升空过程中，监测系统显示莱卡的心率达到了每分钟 260 次，比平时高 3 倍，呼吸频率也超出正常水平 4～5 倍，但顽强的莱卡还是活了下来，成功进入轨道。入轨后，载荷舱头锥成功分离，但有些部件却分离失败。造成的一个恶劣后果就是，热控制系统无法正常工作。此外，一些隔热材料被撕裂，舱内温度很快升至 40 度以上。据信在死于焦躁和高热之前，莱卡顶多活了两天，西方人甚至认为只有几个小时，根本不像苏联人宣布的那样长。莱卡用自己的生命告诉人类科学家，通过合理的防护措施，人类能够在太空环境下生存。这个代价对人类而言不大，但对莱卡而言不小。<br> 莱卡的悲惨结局，固然可以归结为当时尚不成熟的返回卫星技术，但更为重要的原因，是美苏当时心急火燎的太空竞赛，而竞赛背后，是东西方阵营意识形态的激烈冲突。但无论如何，我们起码可以给莱卡更有尊严的死亡方式，一支安乐死制剂就足以实现。遗憾的是，1957 年 11 月 3 日的那次发射，这些都没有被详尽计划。<br> 每每看到关于莱卡的记述，我都会对身边动物平添几分敬意，提醒自己善待它们。为了人类的文明征程，它们已经付出了太多，我们不能与此同时再让他们成为我们野蛮举止的牺牲。<br> 莱卡，回家吧。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000160.jpg" alt="0000160.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 自言语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 切换 F2FS 文件系统]]></title>
      <url>/archives/switch-f2fs-file-system-for-android.html</url>
      <content type="html"><![CDATA[<p>F2FS 如今也是折腾 Android 的玩家口中的一个常见词汇。虽然 2014 年起就已经有 ROM 对其提供支持，但是一加在 2016 年发布了原生支持 F2FS 的氢 OS 7.0，和华为重金聘用了 F2FS 文件系统开发人员的新闻，又把 F2FS 推上了热点。本文介绍了 F2FS 是什么、F2FS 的优势和将手机切换到 F2FS 文件系统的方式。</p>
<h1 id="警告"><a href="# 警告" class="headerlink" title="警告"></a>警告 </h1><p> 切换文件系统为 F2FS 是一项有风险的行为。如果你的 ROM 的内核不能够支持 F2FS 文件系统，那么有可能导致一系列问题！这些问题并不是由 F2FS 文件系统引起！</p>
<h1 id="Why-F2FS"><a href="#Why-F2FS" class="headerlink" title="Why F2FS?"></a>Why F2FS?</h1><h2 id="F2FS- 是什么"><a href="#F2FS- 是什么" class="headerlink" title="F2FS 是什么"></a>F2FS 是什么</h2><p>F2FS ，即 “Flash-Friendly File system”，是一种新的文件系统，用于 NAND 闪存一类的储存设备，甚至可以自移动设备广泛应用至服务器。三星应用了日志结构档案系统的概念，使它更适合用于储存设备。</p>
<h2 id="F2FS- 的优点"><a href="#F2FS- 的优点" class="headerlink" title="F2FS 的优点"></a>F2FS 的优点</h2><p>F2FS 相对目前主流的 EXT3/4 格式，</p>
<ul>
<li>更好的加密特性；</li>
<li>更快的读取速度；</li>
<li>加快针对零碎小文件的读写速度；</li>
<li>对固态存储的寿命保护；</li>
<li>娱乐兔跑分 UX 性能可以增加 3000 多分（<del>不重要</del>）。</li>
</ul>
<h2 id="F2FS- 的缺点"><a href="#F2FS- 的缺点" class="headerlink" title="F2FS 的缺点"></a>F2FS 的缺点 </h2><p> 虽然 F2FS 拥有针对零碎小文件有 Buff，但是在面对大文件读写上并没有太大优势（如果部分 ROM 没有调试好有关参数，甚至可能导致出现性能波动）。而且当存储空间快要满的时候，F2FS 的性能也会急剧下降。<br>除此以外，F2FS 和 FBE 加密之间存在冲突（这也是小米至今不愿意跟进 F2FS 的原因）。</p>
<blockquote>
<p>本人的建议是，除非你的存储芯片是 EMMC 或者 UFS2.0，否则不需要使用 F2FS 来增强你的存储 IO 性能。在 UFS2.1 上，F2FS 对存储 IO 性能的提升并不明显，而且损失 FBE 加密对于一些用户来说是得不偿失的。</p>
</blockquote>
<h1 id="How-to-F2FS"><a href="#How-to-F2FS" class="headerlink" title="How to F2FS?"></a>How to F2FS?</h1><h2 id="选择合适的 ROM"><a href="# 选择合适的 ROM" class="headerlink" title="选择合适的 ROM"></a>选择合适的 ROM</h2><p>首先你得选择一个支持 F2FS 的 ROM 。比如说我的 nubia Z9 max 的 NubiaUI 并不支持 F2FS ，但是适配的 Mokee 和 CM 都是支持的。<br>大部分第三方 ROM 都是支持的，建议直接咨询 ROM 的开发者。</p>
<h2 id="刷入一个第三方 -recovery"><a href="# 刷入一个第三方 -recovery" class="headerlink" title="刷入一个第三方 recovery"></a>刷入一个第三方 recovery</h2><p>最好是 TWRP 。因为 TWRP 支持可视化和触摸操作，也支持文件系统转换等很多功能。TWRP 支持 F2FS 的版本是 2.8.6.1+ 。<del>本人使用的是 TWRP3.0.2-2-stalence-nx510j-unofficial</del> TWRP 3.0.1-1_abforce-oneplus3-unofficial。</p>
<h2 id="备份数据"><a href="# 备份数据" class="headerlink" title="备份数据"></a>备份数据 </h2><p> 备份你的数据，包括使用钛备份应用数据，用 TWRP 备份存储 system、data 分区。<br>把你位于内部存储和外部存储的个人文件也全部拷贝到电脑上。</p>
<blockquote>
<p>自 Android 5.0 开始已经实现了 data 分区和内置存储合并；这样一旦转换 data 分区的文件系统以后，内置存储也会被清空。</p>
</blockquote>
<h2 id="切换分区"><a href="# 切换分区" class="headerlink" title="切换分区"></a>切换分区</h2><ol>
<li>在 TWRP 下，先清除下述分区的内容：cache、data、system。</li>
<li>“高级清除菜单”，勾选 Data ，“修复或转换文件系统”，“转换文件系统”，选择 F2FS 。</li>
<li>用同样的方法，转换 cache 分区为 F2FS</li>
<li>对于 system 分区要特别注意，有的 ROM 不支持 system 分区为 F2FS 。所以一旦转换 system 分区以后无法开机，你可以直接退回 TWRP ，把 system 再转换回 ext4 ，重新刷入 ROM 一遍即可。</li>
</ol>
<blockquote>
<p>部分 ROM 会在刷机前检测 system 的分区格式，如果不支持会自动把分区转换回 ext4。这是正常现象。</p>
<p>注意，部分 ROM 也不支持 cache 分区为 F2FS 格式，表现为转换后开机时间变长、多次重启均无法改善。如果出现这种情况，把 cache 分区转换为 ext4 即可（刷机后或者清除 davlik/cache 分区后第一次开机需要执行 dex2oat，所以时间会较长，所以需要之后再多次重启作为对照）。</p>
</blockquote>
<p>全部转换以后，再用 TWRP 看一下分区是不是已经转换好了。然后就可以享受 F2FS 给你带来的丝滑的感受了。</p>
<h2 id="还原数据"><a href="# 还原数据" class="headerlink" title="还原数据"></a>还原数据 </h2><p> 先把 TWRP 文件夹拷回手机（这个文件夹中有你转换分区格式之前的分区备份文件），然后在 TWRP 的设置中，把 “使用 rm-rf 指令代替格式化” 的选项勾上，以便实现跨文件系统还原分区（如果不勾选，TWRP 会给你还原你之前的文件系统），然后再用 TWRP 还原分区。</p>
<p>当分区还原完以后就可以开机进系统测试一下，如果一切正常，就再把你备份的个人数据拷回手机存储即可。</p>
]]></content>
      
        <categories>
            
            <category> 分享镜 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> TWRP </tag>
            
            <tag> F2FS </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CCMT 收购 SuperSU 以后]]></title>
      <url>/archives/after-the-acquisition-of-supersu-by-ccmt.html</url>
      <content type="html"><![CDATA[<p> 大概没有比 SuperSU 声誉更好、认可度最高的软件。无论是移动设备、平板电脑，亦或者机顶盒、智能手表，只要是基于 Android 的设备，大家都会想到使用 Chainfire 的 SuperSU 来接管 Android 系统的 Root 权限。</p>
<a id="more"></a>
<h1 id="从 2015-09-29 开始谈起"><a href="# 从 2015-09-29 开始谈起" class="headerlink" title="从 2015.09.29 开始谈起"></a> 从 2015.09.29 开始谈起 </h1><p>SuperSU 的作者 Chainfire 在近一年前（2015 年 09 月 29 日）的时候，将 SuperSU 项目移交给了一家叫 Coding Code Mobile Technology LLC 的公司（简称 CCMT）。包括 SuperSU 源码、签名以及 Chainfire 自己的 Google play 开发者账号。xda 上发布了一些有关的声明：<a href="http://www.xda-developers.com/chainfire-makes-important-announcement-about-supersus-future" target="_blank" rel="external">Chainfire Makes Important Announcement About SuperSU’s Future</a></p>
<p>Chainfire 也在 Google+ 发表声明称，将此项目移交给 CCMT 以便让自己更好的去处理别的事情。</p>
<p>Chainfire 指出 CCMT 是一个用于接管 SuperSU 的全新公司。Chainfire 还表示 SuperSU 不会立即发生变化，它仍然是可以免费下载并再发布的（只要不经过修改）。将 SuperSU 移交给 CCMT 后，SuperSU 项目将会有更多的资金和更多的开发者参与，以利于 SuperSU 继续完善功能并更好的运行在众多 Android 设备上。</p>
<p> 之后，Chainfire 仍然在继续维护 SuperSU 项目，并在其个人网站 <a href="https://chainfire.eu/" target="_blank" rel="external">chainfire.eu</a><br> 上发布。</p>
<p> 在 2016 年 09 月 02 日（北京时间）的时候，CCMT 通过 Google Play 商店发布了第一个由 CCMT 基于原 SuperSU 源码进行开发的第一个版本 v2.78。</p>
<blockquote>
<p> 实际上，截止到本博客发布，Google play 上共发布过两个 CCMT 提供的 SuperSU 版本，一个是 2.73，另一个则是 2.78。</p>
</blockquote>
<p> 在酷安上，曾经有两次应用被收购引起了轩然大波，一次是 xposed 模块“阻止运行”被 liudongmiao 卖给了上海猎鹰网络的工作室，另一次就是这次 SuperSU 被一家来自中国的公司收购。</p>
<h1 id="博主个人的冷眼旁观"><a href="# 博主个人的冷眼旁观" class="headerlink" title="博主个人的冷眼旁观"></a> 博主个人的冷眼旁观 </h1><p>Chainfire 自己也没有构建，CCMT 就自行发布了新版本；</p>
<p> 严重怀疑是不是 Chainfire 说的来自纽约州的全新公司，而不是中国控制的空壳公司。<br> 更新 logo 动不动就全球、率先、首发、第一…国产软件就这尿性么…</p>
<blockquote>
<p> 连 SuperSU 主页都把自己公司名字拼错了（目前已经修改）<br><img src="https://bbs-static.nfz.yecdn.com/i/0000006.jpg" alt="0000006.jpg"></p>
</blockquote>
<h1 id="目前似乎一切正常"><a href="# 目前似乎一切正常" class="headerlink" title="目前似乎一切正常"></a> 目前似乎一切正常 </h1><ol>
<li> 目前为止没有任何证据表明 CCMT 正在利用 SuperSU 做危害 Android 系统安全的事情。</li>
<li> 并不表明使用了由 CCMT 发布的 SuperSU 以后，系统就变的不再安全。</li>
<li> 获取 root 权限只是 Android 的一种使用方式； root 本身即存在风险。</li>
</ol>
<p>CCMT 公司是由谁控制的并不重要，如果一家美国公司通过 root 级别植入广告和跟踪工具，它仍然是坏公司。某些营销号和网站总想搞个大新闻，报道一些夸大且危言耸听的东西。恶意软件远比 SuperSU 亦或者 Root 权限本身更可怕。</p>
<hr>
<p>2017.03.08 更新：CCMT 用 Chainfire 的 Play 帐号发布了一个新的手机管理软件 <code>AppMaster</code>，用户体验后说该应用在获取了 root 权限后会自动重启并把自己转成 <code>priv-app</code> 应用。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000069.png" alt="0000069.png" style="width:50%"></p>
<p> 有网友认为这并不是 Chainfire 的一贯风格，所以在 xda 上询问 Chainfire，答复如下：</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000070.jpg" alt="0000070.jpg" style="width:50%"></p>
<blockquote>
<p>SuperSU 被收购以后，也并没有太多兼容性、功能性的改动。我自己已经在用 MagiskSU，以后会发生什么，也只能 Wait and see 罢了。</p>
</blockquote>
<hr>
<p>2017.05.26 再度更新：</p>
<p> 嗯，SuperSU 最终还是开始作恶了。还是同样老套的“统计和信息采集”的理由，增加不必要的权限，如定位权限。</p>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000115.png" style="width:50%" alt="0000115.png"></p>
<blockquote>
<p> 在这里我顺便挂一个大言不惭的人。说真的，我还以为他只是跟我过不去呢。要不是在酷安我和他有过过节，我还真的以为他是 CCMT 请来的水军。</p>
</blockquote>
<p><img src="https://bbs-static.nfz.yecdn.com/i/0000116.png" style="width:50%" alt="0000116.png"></p>
<hr>
<p><strong> 对了，至于大家关心的、这个中国公司是否可靠的问题，可以参考前文。是的，这是一个曾经把自己官网页脚公司的英文名字的单词都拼错过的公司。我想，没必要再对这家公司做更多评价了。</strong></p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Root </tag>
            
            <tag> SuperSU </tag>
            
            <tag> CCMT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[制服火龙——为骁龙 810 降温]]></title>
      <url>/archives/coding-snapdragon-810-down.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>“高通骁龙 810 是我们的一款失败的产品”——高通工程师</p>
</blockquote>
<a id="more"></a>
<h1 id="骁龙 -810"><a href="# 骁龙 -810" class="headerlink" title="骁龙 810"></a>骁龙 810</h1><h2 id="基本参数"><a href="# 基本参数" class="headerlink" title="基本参数"></a>基本参数 </h2><p> 首先给一下 Qualcomm MSM8994 Snapdragon 810 的基本参数：</p>
<blockquote>
<p>4x Quad-core 2.0 GHz ARM®Cortex™ A57 （big）@ 1.96GHz and 4x quad-core 1.5 GHz ARM®Cortex™ A53（LITTLE）@ 1.56GHz；Adreno 430 GPU；X10 LTE modem；20nm LMP。</p>
</blockquote>
<h2 id="温控数据"><a href="# 温控数据" class="headerlink" title="温控数据"></a>温控数据 </h2><p> 根据高通工程师高通设定的原厂限制是核心温度达到 95℃ 的时候 A57 开始降频，105℃ 核心强制下线，115℃ 设备重启。<br>nubiaUI 来自原厂的温控二进制内的 system/bin/thermal-engine 做了优先级更高的进一步限制： GeekBench 和安兔兔类跑分类应用加入了“白名单”在 95℃ 降频，而非白名单的应用运行在 75℃就开始降频了。<br>高通吧的吧主炮神就拿 Nubia z9 max （这也正是我的主力机）做过拷机测试，测试结果是如果只有一颗 A57 进行开机的话，满载直接超过 100 度，两颗 A57 开机满载直接爆机重启。</p>
<blockquote>
<p>单个 2GHz A57 核心，满载坚持 1 分多钟后达到 105℃ 左右，没有降频，但直接就重启了。两个 2GHz A57 核心，最多不到 5 秒钟就冲到 105℃ ，然后重启。A53 核心就好多了，1.56GHz 频率下单个满载不超过 50℃，双核大约 50℃ ，四核也才 61℃ ，都过得去。<br>经过计算可知，骁龙 810 里边单个 1.56GHz A53 核心的满载功耗大约是 400-470mW ，看起来不高但经不起对比啊：海思 930 1.5GHz 350mW、2.0GHz 570mW，联发科 MT6752 1.7GHz 400mW，而且它俩都还是 28nm 。A57 就太恐怖了，2GHz 频率下单个就达到了 4.9W ，双核直接爆机没法测试——是手机处理器啊亲！20nm 工艺啊亲！ Intel Core M 都能做到 TDP 4.5W 啊！</p>
</blockquote>
<p>所以 A57 才是骁龙 810 发热的罪魁祸首。但是 A57 的性能不容小觑。用 z9 max 进行圆周率测试来测试性能——跑 1000 万位圆周率，只开 4 颗 A53，需要 72 秒，但是开着 4 颗 A53 和 2 颗 A57 只要 31 秒，A57 间断开启的话（温控限制）也只要 42 秒。</p>
<h1 id="一些事实"><a href="# 一些事实" class="headerlink" title="一些事实"></a>一些事实 </h1><p> 我有一次有幸和高通（中国）的工程师在微信上交流过。最后结论就是：</p>
<ul>
<li>CPU 频率越高，CPU 电压越高，发热越多，越耗电</li>
<li>kyro 架构的 CPU 分体质（801、805、820），体质越高，相同频率电压可以更低，但一些 CPU 电压太低会重启</li>
<li>ARM 公版架构的 CPU 没有体质这一说法，但是仅仅只是说法不同罢了。</li>
<li>因为频率越高，核心间电压也要升高，所以就会越来越耗电。 </li>
<li>核心之间电压越高，发热越多耗电越快。</li>
</ul>
<blockquote>
<p> 比如一加一的内核支持 CPU 修改电压，很多加油都选择 CPU 降压解决发热（很多用户都选择每个频率降压 20-30mV）</p>
</blockquote>
<p>nubia 的内核就不支持修改电压。怎么办？<br>控制频率调整机制呗，既然电压和频率有关。<br>真正的关键并不是现在很多人认为的那样去限制最大频率，而是不要让频率升的太快。对于 CPU ，如果想要省电，那么频率就要尽可能低，升频要慢，降频要快。<br>当然对于性能的需求来说恰恰相反，追求更好的性能就要求较高的频率需求。<br>其次另外还有一个矛盾，就是在待机的时候， CPU 核心数越少越好。这个时候多核待机就耗电了。</p>
<blockquote>
<p>通俗点、简单点说就是——多核高频如尿崩，多核低频很省电，多核待机很耗电，少核高频很耗电，少核低频跑不动，少核待机不耗电。</p>
<p>当然，耗电大户一般都是屏幕，屏幕的功率有 50W 左右。关掉屏幕应该就会省电多了。也可以理解关屏听音乐，虽然唤醒锁没被释放，但是耗电却比开屏少了一半。</p>
<p>再补充一下，虽然联发科已经被人嘲笑一核有难，九核围观，然而基于 corepilot 的异构异步多核会根据负载开关核心，虽然性能不怎么地，但是省电倒是真的。</p>
</blockquote>
<h1 id="基本思路"><a href="# 基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><ol>
<li>在待机时核心数要少，操作时核心数要多。</li>
<li>尽量让 CPU 运行在较低频率。</li>
<li>根据频率区间不同调整升频间隔，尽可能解决省电与性能的矛盾。</li>
</ol>
<h1 id="操刀，上！"><a href="# 操刀，上！" class="headerlink" title="操刀，上！"></a>操刀，上！</h1><p>来我们来分析 init.qcom.post_boot.sh 脚本中 <br> 的几个调速器有关的片段，来看看如何实现基本思路。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ensure at most one A57 is online when thermal hotplug is disabled</span>
<span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu5/online
<span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu6/online
<span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu7/online
<span class="token comment" spellcheck="true"># Limit A57 max freq from msm_perf module in case CPU 4 is offline</span>
<span class="token keyword">echo</span> <span class="token string">"4:960000 5:960000 6:960000 7:960000"</span> <span class="token operator">></span> /sys/module/msm_performance/parameters/cpu_max_freq
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是保护措施，即当 hotplug 温控机制失效的时候，仅保留一颗 A57 以防止温度过高；当控制大核心簇的 CPU4 离线的时候，就控制 A57 的最大频率防止过热。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># configure governor settings for little cluster</span>
<span class="token keyword">echo</span> <span class="token string">"interactive"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/use_sched_load
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/use_migration_notif
<span class="token keyword">echo</span> 39000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/above_hispeed_delay
<span class="token keyword">echo</span> 95 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/go_hispeed_load
<span class="token keyword">echo</span> 20000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/timer_rate
<span class="token keyword">echo</span> 960000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/hispeed_freq
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/io_is_busy
<span class="token keyword">echo</span> 85 960000:90 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/target_loads
<span class="token keyword">echo</span> 40000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/min_sample_time
<span class="token keyword">echo</span> 80000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/max_freq_hysteresis
<span class="token keyword">echo</span> 384000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
<span class="token comment" spellcheck="true"># online CPU4</span>
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/online
<span class="token comment" spellcheck="true"># configure governor settings for big cluster</span>
<span class="token keyword">echo</span> <span class="token string">"interactive"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/use_sched_load
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/use_migration_notif
<span class="token keyword">echo</span> 39000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/above_hispeed_delay
<span class="token keyword">echo</span> 90 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/go_hispeed_load
<span class="token keyword">echo</span> 20000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/timer_rate
<span class="token keyword">echo</span> 768000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/hispeed_freq
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/io_is_busy
<span class="token keyword">echo</span> <span class="token string">"85 1248000:95"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/target_loads
<span class="token keyword">echo</span> 40000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/min_sample_time
<span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/max_freq_hysteresis
<span class="token keyword">echo</span> 384000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个是对 CPU 调速器的参数控制。</p>
<p>这些参数的含义是：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/online
// 暴力关核或者开核（有的 romer 就是这么优化 CPU 的，所以用户老是抱怨卡的要命）
<span class="token keyword">echo</span> x <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/go_hispeed_load
// 当 CPU 负载超过 x 时升频，CM 和魔趣默认都用 99。
<span class="token keyword">echo</span> x <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/hispeed_freq
// 当 go_hispeed_load 达到或超过设定值时，CPU 调到 x 频率。
<span class="token keyword">echo</span> x <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/target_loads
// 定义了前台应用程序对 CPU 的负载达到多少时进入预订频率 语法是 <span class="token string">"m1 n1:m2 n2:。。。:m n:z"</span> m 指的是负载值，n 指的是预设频率，z 是上限。
即负载在 m1-m2 之间运行在 n1 频率，负载在 m2-m3 之间运行在 n2 频率。
当负载超过 z 时，该规则不再生效（即使用内核默认的缺省数值）。
<span class="token keyword">echo</span> x <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/above_hispeed_delay
// 升频之间的间隔时间, 单位是微秒 语法是 <span class="token string">"m1 n1:m2 n2:。。。:z"</span>
m 指的是时间间隔，n 指的是频率（单位为 Hz），z 是上限
即频率在 n1 时间隔为 m1，n2 时间隔为 m2
当频率没有被 n 定义时，间隔统一为 z
<span class="token keyword">echo</span> x <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/min_sample_time
// 采样时间，单位微秒。（内核探看 CPU 负载的间隔时间）
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/io_is_busy
// 对于 big.LITTLE 大小核架构，建议只对强劲的 CPU 开启！ 比如 615 高通默认大小核都不开，810 高通默认大小核都开。
<span class="token keyword">echo</span> x <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq
//CPU 的最低频率。建议用内核给定的最低值而不是自定义。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据我的要求，把这些改成了。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># configure governor settings for little cluster</span>
<span class="token keyword">echo</span> <span class="token string">"interactive"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/use_sched_load
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/use_migration_notif
<span class="token keyword">echo</span> 39000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/above_hispeed_delay
<span class="token keyword">echo</span> 99 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/go_hispeed_load
<span class="token keyword">echo</span> 20000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/timer_rate
<span class="token keyword">echo</span> 960000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/hispeed_freq
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/io_is_busy
<span class="token keyword">echo</span> <span class="token string">"75 460800:85 960000:90"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/target_loads
<span class="token keyword">echo</span> 40000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/min_sample_time
<span class="token keyword">echo</span> 80000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/interactive/max_freq_hysteresis
<span class="token keyword">echo</span> 384000 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
<span class="token comment" spellcheck="true"># online CPU4</span>
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/online <span class="token comment" spellcheck="true"># configure governor settings for big cluster</span>
<span class="token keyword">echo</span> <span class="token string">"interactive"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/use_sched_load
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/use_migration_notif
<span class="token keyword">echo</span> <span class="token string">"19000 1400000:39000 1700000:19000"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/above_hispeed_delay
<span class="token keyword">echo</span> 99 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/go_hispeed_load
<span class="token keyword">echo</span> 20000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/timer_rate
<span class="token keyword">echo</span> 960000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/hispeed_freq
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/io_is_busy
<span class="token keyword">echo</span> <span class="token string">"70 960000:80 1248000:85 1500000:90"</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/target_loads
<span class="token keyword">echo</span> 40000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/min_sample_time
<span class="token keyword">echo</span> 80000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/interactive/max_freq_hysteresis
<span class="token keyword">echo</span> 384000 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来是 core_ctl 参数。</p>
<blockquote>
<p>core_ctl 是由 /system/lib/modules/core_ctl.ko 文件控制的 CPU 控制机制，根据 CPU 的负载和温度控制 CPU 上线和离线。</p>
<p>在 core_ctl 的帮助下可以解决待机低负载少核与操作时负载上升时启动多核的矛盾。</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># configure core_ctl module parameters</span>
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/max_cpus
<span class="token keyword">echo</span> 2 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/min_cpus
<span class="token keyword">echo</span> 60 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/busy_up_thres
<span class="token keyword">echo</span> 30 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/busy_down_thres
<span class="token keyword">echo</span> 100 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/offline_delay_ms
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/is_big_cluster
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/task_thres
<span class="token comment" spellcheck="true"># ztemt:rm core_ctl module rmmod /system/lib/modules/core_ctl.ko</span>
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/task_thres
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这些意思是当平均负载大于 60 时，会有一颗 A57 上线；平均负载小于 30 时，要有 A57 离线；最多只有 4 颗 A57 上线，最少会有 2 颗 A57 在线；在 A57 离线之前至少需要 100 毫秒；A57 能承受大负载长线程。</p>
</blockquote>
<p>然而与此同时，我很痛扁一下努比亚的工程师。因为他们直接把 core_ctl 关闭了。。。core_ctl 有什么用我也说了，所以为什么要关掉呢？</p>
<p>于是我修改成这样——给 A53 也定义了 core_ctl，并且修改了参数，去掉了 rmmod 指令。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># core_ctl module</span>
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/max_cpus
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/min_cpus
<span class="token keyword">echo</span> 70 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/busy_up_thres
<span class="token keyword">echo</span> 20 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/busy_down_thres
<span class="token keyword">echo</span> 100 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/offline_delay_ms
<span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/is_big_cluster
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu0/core_ctl/task_thres
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/max_cpus
<span class="token keyword">echo</span> 0 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/min_cpus
<span class="token keyword">echo</span> 72 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/busy_up_thres
<span class="token keyword">echo</span> 28 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/busy_down_thres
<span class="token keyword">echo</span> 100 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/offline_delay_ms
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/is_big_cluster
<span class="token keyword">echo</span> 4 <span class="token operator">></span> /sys/devices/system/cpu/cpu4/core_ctl/task_thres
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>最后讲一点，有些 romer 宣称用 ondemand 调速器可以省电降温，宣称“发热 = 耗电，耗电≠发热”，这样的想法显然是错误的。ondemand 调速器的特点就是升频快降频也快，但是如果出现负载较高，而且没有调整好 ondemand 参数的阈值，就会引起频率只升不降，耗电也没法解决，而且频率较高，电压较大，功率较大，发热同样随之而来。Ondemand 如果经过参数调整，也是可以很省电的，就是把 ondemand 里面改个 powersaving 的参数，实现频率等阶梯降低 10% ，并且根据负载和所在频率梯度修改 sampling_time 就行。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 实验室 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 温控 </tag>
            
            <tag> 骁龙 810 </tag>
            
            <tag> CPU </tag>
            
            <tag> 省电 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何选择 AOKP 类 ROM 和厂商定制 UI]]></title>
      <url>/archives/how-to-choose-customlized-rom-and-stock-ui.html</url>
      <content type="html"><![CDATA[<p>最近老是被人问及，在厂商提供的原厂 ROM 、AOKP ，和移植的其它 ROM（比如移植的 flyme 和 MIUI），到底应该怎么选择。于是我决定写一写这篇博客，从功能层面和国内用户的行为习惯来讲讲如何选择这几类 ROM。</p>
<a id="more"></a>
<h2 id="厂商定制 -UI- 的特点"><a href="# 厂商定制 -UI- 的特点" class="headerlink" title="厂商定制 UI 的特点"></a>厂商定制 UI 的特点 </h2><p> 厂商在 Android 的基础上修改了很多功能，还有很多界面上的修改，增加了很多功能。比如 MIUI 增加了手机分身、伪基站识别等功能；nubiaUI 增加了应用分身、边缘触控 FiT、Neovision 相机、录屏和长截屏等功能；乐视的 EUI 甚至可以把视频讯息聚合和桌面结合在一起，而一加的氢氧 OS 是国内难得的还用了点 Material Design 的定制 OS（而且现在国内厂商的 UI，普遍都有什么屏幕分屏、长截屏之类的功能）。这些都是作为手机厂商的卖点。毕竟手机是拿来用的，光靠堆高通骁龙 820 还有 6G 运存什么的，真不一定能把手机卖出去（在国内，买 nexus 或者 pixel 的多半为了体验全套谷歌服务的信仰）。<br>但是说实在的，其中有的功能的确算得上实际。比如在国内，流量不像国外价格那么便宜；比如在国内的骚扰广告电话和骚扰短信要比国外多很多；云云。所以国内定制 UI 一定会加一套完整的手机管家，具备完整的流量计算和自动断网功能（而且为了应对国内的现状增加了结转和闲时功能）；骚扰拦截功能，黑名单功能和关键字拦截；针对国内应用的毒瘤现状，纷纷增加了禁止自启、禁止唤醒、自动休眠的功能；云云。</p>
<h2 id="AOKP- 的特点"><a href="#AOKP- 的特点" class="headerlink" title="AOKP 的特点"></a>AOKP 的特点 </h2><h3 id="CyanogenMod"><a href="#CyanogenMod" class="headerlink" title="CyanogenMod"></a>CyanogenMod</h3><p> 现在回来说说 CM 。CM 是基于 AOSP 开发的、开源的定制 Android 项目；CM 开始保留 Android 原生系统的界面风格，做了一些定制，比如内置了 root 、增加了一些有用的功能（比如说 CM 在今年四月份加入了天气功能，并提供了天气接口）。但是这些简单的修改是有限的，CM 基本保留了原生系统完整的风格，没有像国内厂商一样提供这么多功能，什么视频聚合、什么伪基站识别，什么手机管家。CM 并没有像国内的厂商一样做太多定制。</p>
<h3 id="Mokee-Open-Source-Project"><a href="#Mokee-Open-Source-Project" class="headerlink" title="Mokee Open Source Project"></a>Mokee Open Source Project</h3><p>当然谈到 AOKP，就不能避开魔趣，这个全世界排名第二的 AOKP 项目。有的人认为魔趣就是抄袭 CM，关于这一点我不想发表太多意见。所有基于 AOSP 开发的 ROM 都长这个样，不能因此就能说明魔趣抄袭 CM ；AICP 、Sudamod 、Slim 、Blisspop 等等一干 AOKP 项目都长这个样。魔趣可以说用了 CM 项目的部分代码，这是无可厚非的，因为 CM 是一项伟大的开源项目，很多东西是绕不开 CM 的；CM 有很多东西值得借鉴，但并不意味着魔趣就是彻头彻尾基于 CM 、进行抄袭；魔趣在不违反开源协定的前提下合并 CM 的源码无可厚非。<br>魔趣相比 CM 和其它一些 AOKP ，增加了更多基于中国本土化的修改，比如 chormium 内核的羽·浏览器；可以用来有效对付国内毒瘤的宙斯盾系统（这东西是要写进 framework 和 service.jar 里头的）；ViPER4Android 蝰蛇音效；更完整的汉化（虽然你可能感觉不到）；来去电归属地显示和基本的骚扰拦截功能；服务类短信归档；网速显示；短信验证码智能识别和复制；T9 拼音拨号；等等很多本土化的东西。</p>
<hr>
<p>所以说，CM 的 ROM 没有那么臃肿；CM 的确会比官方 ROM 要流畅一些；CM 采用原生的 Material Design 风格；但是厂商定制的 ROM 的确会有更多的功能，有的功能你甚至还离不开。</p>
<h2 id="So…"><a href="#So…" class="headerlink" title="So…"></a>So…</h2><p>如果你对国内厂商拿来吹嘘和用来营销的一些作为卖点的功能特别感兴趣甚至离不开，那么请千万不要选择 CM 或者魔趣。所以如果你追求这些功能，你最好还是回去去用原厂 UI，而不是奢求有人愿意把某些功能移植会 CM 或者魔趣上面去、对 CM 或者魔趣的设备维护者说什么“有人曾经在 xxx 的 ROM 上成功过”、什么“CM/MK 加上什么功能就完美了”。<br>如果你对这些功能不感兴趣、或者说相比这些功能你更追求的是简洁和流畅，那么 CM 就是你的最佳选择；如果你希望本土化一些，可以选择魔趣。<br>如果你只是对现在的 UI 感到厌烦，或者对其它 UI 的界面碰巧感兴趣或者某项功能感兴趣，你可以选择去用 MIUI 或者 flyme，因为这类 ROM 和原厂的 UI 界面相似（国内定制 UI 和国内毒瘤 App 都有一个共性，就是尽量跪舔 iOS 界面），一样针对国人的使用习惯和国内现状做了特别定制。但是是否能够作为日常使用的 ROM ，取决于这个 ROM 的稳定性和各项功能的完备性。</p>
<blockquote>
<p>本文仅供参考，实际如何选择，还需要自己亲自体验一番才知道。毕竟你才是用户；毕竟安卓就是拿来折腾的。</p>
</blockquote>
<hr>
<p>2017.03.29 更新</p>
<p>关于不同基于 AOSP 的 Android 开源的 ROM 项目的横向比较，可以参考 <a href="https://ivanilla.org/ITTech/Android/11/" target="_blank" rel="external"> 这篇文章</a>。</p>
]]></content>
      
        <categories>
            
            <category> 异闻堂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CM </tag>
            
            <tag> ROM </tag>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/sw.js</url>
      <content type="html"><![CDATA["use strict";
(function() {
    var cacheVersion = "-170816";
    var staticImageCacheName = "image" + cacheVersion;
    var staticAssetsCacheName = "assets" + cacheVersion;
    var contentCacheName = "content" + cacheVersion;
    var vendorCacheName = "vendor" + cacheVersion;
    var maxEntries = 100;
    self.importScripts("https://s.nfz.yecdn.com/static/js/sw-t.js");
    self.toolbox.options.debug = false;
    self.toolbox.options.networkTimeoutSeconds = 5;

    /* staticImageCache */
    self.toolbox.router.get("/img/(.*)", self.toolbox.cacheFirst, {
        origin: /blog\.nfz\.yecdn\.com/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/img/(.*)", self.toolbox.cacheFirst, {
        origin: /bbs-static\.nfz\.yecdn\.com/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /p0\.ssl\.qhmsg\.com/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /img1\.nfz\.yecdn\.com/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /img2\.nfz\.yecdn\.com/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /i\.nfz\.yecdn\.com/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /ooo\.0o0\.ooo/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /i\.loli\.net/,
        cache: {
            name: staticImageCacheName,
            maxEntries: maxEntries
        }
    });

    /* StaticAssetsCache */
    self.toolbox.router.get("/css/(.*)", self.toolbox.networkFirst, {origin: /blog\.nfz\.yecdn\.com/,});
    self.toolbox.router.get("/js/(.*)", self.toolbox.networkFirst, {origin: /blog\.nfz\.yecdn\.com/,});
    self.toolbox.router.get("/static/(.*)", self.toolbox.networkFirst, {
        origin: /blog\.nfz\.yecdn\.com/,
        cache: {
            name: staticAssetsCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/fonts/(.*)", self.toolbox.cacheFirst, {
        origin: /blog\.nfz\.yecdn\.com/,
        cache: {
            name: staticAssetsCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /cdnjs\.cat\.net/,
        cache: {
            name: staticAssetsCacheName,
            maxEntries: maxEntries
        }
    });

    /* ContentCache */
    self.toolbox.router.get("/archives/(.*).html(.*)", self.toolbox.networkFirst, {
        cache: {
            name: contentCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(tags|about|gallery|archives|links|timeline)(.*)", self.toolbox.networkFirst, {
        cache: {
            name: contentCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/$", self.toolbox.networkFirst, {
        cache: {
            name: contentCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/\?(.*)$", self.toolbox.networkFirst, {
        cache: {
            name: contentCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/", self.toolbox.networkFirst, {
        cache: {
            name: contentCacheName,
            maxEntries: maxEntries
        }
    });

    /* VendorCache */
    self.toolbox.router.get("/next/config.json", self.toolbox.networkOnly, {origin: /disqus\.com/,});
    self.toolbox.router.get("/api/(.*)", self.toolbox.networkOnly, {origin: /disqus\.com/,});
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /a\.disquscdn\.com/,
        cache: {
            name: vendorCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /c\.disquscdn\.com/,
        cache: {
            name: vendorCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /uploads\.disquscdn\.com/,
        cache: {
            name: vendorCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /media\.disquscdn\.com/,
        cache: {
            name: vendorCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.cacheFirst, {
        origin: /referrer\.disqus\.com/,
        cache: {
            name: vendorCacheName,
            maxEntries: maxEntries
        }
    });
    self.toolbox.router.get("/(.*)", self.toolbox.networkOnly, {origin: /(www\.google-analytics\.com|ssl\.google-analytics\.com)/,
        cache: {
            name: vendorCacheName,
            maxEntries: maxEntries
        }
    });

    /* NoCache */
    self.toolbox.router.get("/sw.js", self.toolbox.networkFirst),
    self.toolbox.router.get("/(.*).php(.*)", self.toolbox.networkOnly),
	self.toolbox.router.get("/(.*)", self.toolbox.networkOnly, {origin: /ga\.fir\.im/,});
    self.toolbox.router.get("/(.*)", self.toolbox.networkOnly, {origin: /ga\.yecdn\.com/,});
    self.toolbox.router.get("/(.*)", self.toolbox.networkOnly, {origin: /api\.nfz\.moe/,});

    self.addEventListener("install",
        function(event) {return event.waitUntil(self.skipWaiting())
        });
    self.addEventListener("activate",
        function(event) {return event.waitUntil(self.clients.claim())
        })
})();]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about.html</url>
      <content type="html"><![CDATA[<script src="https://cdnjs.cat.net/ajax/libs/aplayer/1.6.0/APlayer.min.js"></script>
<script src="https://api.i-meto.com/music/aplayer.min.js"></script>

<div class="aplayer" data-title="愚弄者 x 愚弄者" data-author="洛天依 / 桑葚上的猴子" data-pic="https://ww1.sinaimg.cn/large/0060lm7Tly1fk7973eouqj30so0qpjt5.jpg" data-url="https://fuckalisummer.nfz.yecdn.com/music/%E6%84%9A%E5%BC%84%E8%80%85.mp3" data-lrc="https://fuckalisummer.nfz.yecdn.com/music/%E3%80%90%E6%B4%9B%E5%A4%A9%E4%BE%9D%E5%8E%9F%E5%88%9B%E6%9B%B2%E3%80%91%E6%84%9A%E5%BC%84%E8%80%85x%E6%84%9A%E5%BC%84%E8%80%85%20%EF%BC%88%E6%A1%91%E8%91%9A%E4%B8%8A%E7%9A%84%E7%8C%B4%E5%AD%90%EF%BC%89%E3%80%90%E4%B8%80%E5%9B%BEpv%E4%BB%98%E3%80%91.lrc" data-autoplay="false"></div>

<h2 id="我是谁"><a href="# 我是谁" class="headerlink" title="我是谁"></a>我是谁 </h2><p> 我是 neoFelhz (/ˌnɪəʊˈfɜːz/)，叫我的简称 neo 也行。</p>
<blockquote>
<p>如果你叫我 neo 喵，我会回应一声 “喵呜(๑´ω`๑)～”</p>
</blockquote>
<p>我给自己取 ID 的时候是努比亚手机的忠实粉。那时候，努比亚的很多产品都用 Neo 命名（比如 nubia 相机 NeoVision；nubiaUI 省电技术 NeoPower；nubia 声音渲染技术 Neosound；摄影分享软件 NeoShare . . .），所以我就给自己取了 neo 这个姓。<br><code>F</code> 表示我来自 福建，<code>E</code> 表示 <code>Elementery</code> ，<code>lhz</code> 是我的姓名首字母缩写（显而易见地）。</p>
<hr>
<p>不善交际，不喜欢外出。<br>喜欢小众事物，对开源的、自己可以参与的东西很感兴趣。</p>
<blockquote>
<p>这就是为什么我折腾 Android 有关的东西。</p>
</blockquote>
<p>喜欢自由和无拘无束、不喜欢被束缚。</p>
<blockquote>
<p>所以我一直研究如何吊打国内 BAT 毒瘤。我也已经是 <del><a href="https://mat.letitfly.me" target="_blank" rel="external">MAT BBS</a>的中级会员</del> <a href="https://bbs.letitfly.me" target="_blank" rel="external">LetITFly BBS</a> 的管理员了。</p>
</blockquote>
<p>一只中文 VOCALOID 歌迷，也喜欢听各种纯音乐；对人声无感；还是一只 Penbeater。</p>
<blockquote>
<p>看看我几个网易云音乐歌单就知道了。</p>
</blockquote>
<h2 id="联系方式"><a href="# 联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul>
<li>E-Mail: <a href="mailto:neofelhz@gmail.com" target="_blank" rel="external"><code>neofelhz@gmail.com</code></a><blockquote>
<p>每天定时多次检查 Inbox</p>
</blockquote>
</li>
<li>QQ: <code>getDNS.search(&#39;qq.info.nfz.moe&#39;,&#39;TXT&#39;);</code><blockquote>
<p>You can find me if you want.</p>
</blockquote>
</li>
<li><del>SinaWeibo: <a href="http://weibo.com/neoFelhz" target="_blank" rel="external">@neoFelhz</a></del><blockquote>
<p><del>本人正在使用第三方客户端，恕不接受任何来自微博的私信 </del> 本人已经不再使用新浪微博。</p>
</blockquote>
</li>
<li>Telegram: <a href="https://telegram.me/neoFelhz" target="_blank" rel="external">@neoFelhz</a></li>
</ul>
<p>补充几点说明：</p>
<ul>
<li>本人不在任何即时通讯软件提供无偿陪聊服务（有偿也不行）<blockquote>
<p>如果你破译了我的 QQ 号，我一定会接受你的好友申请，但不一定会和你聊天</p>
</blockquote>
</li>
<li>与本博客文章有关的问题，建议直接评论，这样可以让更多人看到讨论的内容<blockquote>
<p>你在文章后面评论，Disqus 会把评论内容推送到我的 Inbox</p>
</blockquote>
</li>
<li>一些技术相关问题建议发邮件；但是暂不接受项目合作</li>
<li>无论通过何种方式咨询，请务必一次性把话说清楚，否则不予理会<blockquote>
<p><a href="https://gist.github.com/zer4tul/95ffaa741c836dc6ab3b" target="_blank" rel="external">提问的智慧</a> </p>
</blockquote>
</li>
<li>伸手党会直接拉黑，包括把邮件全部丢进垃圾邮件、禁止该 IP 在我的博客下面评论、在 Telegram 上予以屏蔽，等等。</li>
</ul>
<h2 id="版权说明"><a href="# 版权说明" class="headerlink" title="版权说明"></a>版权说明 </h2><p> 除非单独说明，任何个人或者媒体转载本博客的原创内容，都请严格遵循 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh" target="_blank" rel="external">署名 - 非商业性使用 - 相同方式共享 3.0 未本地化版本 </a> 的知识共享协议。可阅读 <a href="https://blog.nfz.moe/creativecommons.html"> 本博客的知识共享协议说明</a> 了解具体授权说明。</p>
<h2 id="关于本站"><a href="# 关于本站" class="headerlink" title="关于本站"></a>关于本站</h2><blockquote>
<p>待到英雄们在铁铸的摇篮中长成,<br>勇敢的心像从前一样,<br>去造访万能的神祗.<br>在这之前,<br>我却常感到,<br>与其孤身独涉,<br>不如安然沉睡.<br>——拾穗</p>
</blockquote>
<p>《拾穗者》是法国画家 让·弗朗索瓦·米勒 于 1857 年创作的油画。米勒用横向构图，描绘了三个正在弯着腰、低着头，在收割过的麦田里拾剩落的麦穗的妇女形象。她们穿着粗布衣裙和沉重的旧鞋子，在她们身后是一望无际的麦田、天空和隐约可见的劳动场面。</p>
<p><strong>有些人拾穗是因为他们被生活所迫，有些人拾穗是因为他们是艺术家，有些人拾穗是因为他们喜欢拾穗。</strong></p>
<p>就像在已经收获过后的麦田上，我捡起被别人的遗忘的、或是并没有被遗忘的麦穗，小心地收集着，把它们珍藏起来。</p>
<blockquote>
<p>想写点属于自己的文字却一直没有提起笔来。<br>渐渐发现独立思考需要文字来记录自己的见解。<br>写点技术、偶尔吐吐槽也好，文艺一把也罢。</p>
</blockquote>
<h2 id="支持本站"><a href="# 支持本站" class="headerlink" title="支持本站"></a>支持本站 </h2><p> 坚持写有用的、原创的技术文章并不是一件容易的事。如果你认为我的文章对你有帮助，欢迎将本站推荐给你的小伙伴！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[友链申请]]></title>
      <url>/apply-for-links.html</url>
      <content type="html"><![CDATA[<p>本站的友链 <del> 分为两个组成部分，一部分是出现在我的 <a href="https://nfz.moe" target="_blank" rel="external"> 个人主页 </a>，另一部分</del> 位于博客内页的 <a href="https://blog.nfz.moe/links.html"> 友情链接页面</a>。</p>
<p>本站的友链并不是为了 SEO，但是仍然会向搜索引擎专门提交 <a href="https://blog.nfz.moe/links.html"> 友情链接页面</a>。</p>
<hr>
<p>想来互换友链的需满足以下规则：</p>
<blockquote>
<p>申请友链的站点全站必须完整 HTTPS 加密。<strong>不接受任何非实现全站 HTTPS</strong>、<strong>不强制跳转 HTTPS 的站点的友链申请 </strong>。<br> 申请将友链加在我的博客内的友链页面的，除全站启用 HTTPS 以外，还需要满足以下六条规则中的四条。<br><del>申请将友链加在个人主页的，则需要满足以下全部六条规则，并直接联系我申请。</del><br>符合条件的，可以直接在博客下面评论提交申请互换友链，或者访问 <a href="https://blog.nfz.moe/about.html">关于页面</a> 找到我的联系方式直接向我申请。</p>
</blockquote>
<ul>
<li>以原创、<strong>技术向为主 </strong> 的内容</li>
<li>站点已平稳运行超过 60 天</li>
<li>已经加好本站的友链</li>
<li>网站在线率在 90% 以上</li>
<li>启用 HSTS（被 HSTS Preload List 收录可以加分）</li>
<li>可以在 6s 之内加载完毕并正常浏览（3s 以内可以加分）</li>
</ul>
<hr>
<p>满足上述规则的，请在评论里留下你的友链信息：</p>
<blockquote>
<p>请务必按照格式。</p>
</blockquote>
<ul>
<li>Name: neoFelhz</li>
<li>Link: <a href="https://nfz.moe" target="_blank" rel="external">https://nfz.moe</a> <a href="https://blog.nfz.moe">https://blog.nfz.moe</a></li>
<li>Slogan: 有些人拾穗生计所迫，有些人因为艺术，有些人仅因为喜欢拾穗。</li>
<li>Description: 拾穗者的故事</li>
<li>Avatar: <a href="https://i.v2ex.co/Q4661K0b.png" target="_blank" rel="external">https://i.v2ex.co/Q4661K0b.png</a></li>
<li>Favicon: https//i.v2ex.co/U326QjN0.png</li>
<li><del>申请将友链放在个人主页</del></li>
</ul>
<blockquote>
<p>Slogan 非必需；Description 尽量简短。<br>头像或 ICON 请提供高清图片下载链接。</p>
</blockquote>
<p>如果您的站点信息有改动，请更新后尽快联系我更新友链信息。</p>
<hr>
<p>本人保证每月都会对所有的友链站点进行回访，对友链站点有更新的页面会留下脚印。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[本博客的知识共享协议说明]]></title>
      <url>/creativecommons.html</url>
      <content type="html"><![CDATA[<h1 id="关于知识共享协议的说明"><a href="# 关于知识共享协议的说明" class="headerlink" title="关于知识共享协议的说明"></a>关于知识共享协议的说明 </h1><p>neoFelhz（以下简称本人），是“neoFelhz’s blog”博客（以下简称本博客）的拥有者。本博客上创造和发布的内容可用于传播和共享，对于本人发布的原创内容（包含图片、文字、音乐、视频）采用 <strong>CreativeCommons 3.0 Unported</strong> 协议，即 <strong> 知识共享许可协议 3.0 未本地化版本 </strong> 加以许可保护。作者在发布内容时，如果没有特殊注明，默认将会采用 <strong> 知识共享协议 署名 - 非商业性使用 - 相同方式共享 3.0 未本地化版本</strong> (<strong>CC BY-NC-SA 3.0 Unported</strong>) 对原创内容进行保护。</p>
<h1 id="关于知识共享协议的补充说明"><a href="# 关于知识共享协议的补充说明" class="headerlink" title="关于知识共享协议的补充说明"></a>关于知识共享协议的补充说明 </h1><h2 id="侵权有关"><a href="# 侵权有关" class="headerlink" title="侵权有关"></a> 侵权有关 </h2><p> 如个人或单位发现本博客上存在侵犯其自身合法权益的内容，请及时与本人取得联系，并提供具有法律效力的证明材料，以便本人作出处理。</p>
<h2 id="非原创作品商业使用有关"><a href="# 非原创作品商业使用有关" class="headerlink" title="非原创作品商业使用有关"></a>非原创作品商业使用有关 </h2><p> 任何被本博客划收录的非原创作品，原作者依然持有商业使用其作品的权利。<br>如果您希望商业使用这些被收录的内容，请与所有 <strong>参与此作品创作的原作者 </strong> 和 / 或 <strong> 版权持有者</strong> 进行协商。在与所有人达成协议后，方可商业使用。<br>（本博客及其本人不进行任何商业接洽工作，请自行与作者联系）</p>
<h1 id="CC-3-0-Unported- 协议概要"><a href="#CC-3-0-Unported- 协议概要" class="headerlink" title="CC 3.0 Unported 协议概要"></a>CC 3.0 Unported 协议概要 </h1><h2 id="语言：中文"><a href="# 语言：中文" class="headerlink" title="语言：中文"></a><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh" target="_blank" rel="external"> 语言：中文</a></h2><blockquote>
<p>该 <code> 协议摘要 </code> 摘抄于 Sat Sep 03 2016 22:30:57 GMT+0800 (中国标准时间)<br>这是一份普通人可以理解的许可协议概要 (但不是替代) 。</p>
</blockquote>
<p><strong>您可以自由地：</strong></p>
<ul>
<li><strong>分享</strong> — 在任何媒介以任何形式复制、发行本作品</li>
<li><strong>演绎</strong> — 修改、转换或以本作品为基础进行创作</li>
<li>只要你遵守许可协议条款，许可人就无法收回你的这些权利。</li>
</ul>
<p><strong>惟须遵守下列条件：</strong></p>
<ul>
<li><strong>署名 </strong> — 你必须遵守信用，注明来源链接和演绎内容，并提供一个通往与 <strong> 原作所用协议并不冲突的知识共享协议</strong> 许可证页面的链接。你可以用任何合适的方式实现这个，但这并不暗示许可证拥有者和原作者认可该分享方式。</li>
<li><strong>非商业性使用</strong> — 您不得将本作品用于商业目的。</li>
<li><strong>相同方式共享 </strong> — 如果你节选、翻译、重排版，或基于本作品二次创作，你必须将你的贡献用 <strong> 相同的协议</strong> 进行分享，并分别注明原作者与你的贡献。</li>
<li><strong>没有附加限制</strong> — 虽然您可能依旧不适用那些法律上限制的任何关于知识产权的法律条款或技术措施，即使你的行为符合知识共享协议。</li>
</ul>
<h2 id="Language-English"><a href="#Language-English" class="headerlink" title="Language:English"></a><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/deed" target="_blank" rel="external">Language:English</a></h2><blockquote>
<p>This copy was copied at Sat Sep 03 2016 22:36:47 GMT+0800 (Asia/Beijing)<br>This is a human-readable summary of (and not a substitute for) the license.</p>
</blockquote>
<p><strong>You are free to:</strong></p>
<ul>
<li><strong>Share</strong> — copy and redistribute the material in any medium or format</li>
<li><strong>Adapt</strong> — remix, transform, and build upon the material</li>
<li>The licensor cannot revoke these freedoms as long as you follow the license terms.</li>
</ul>
<p><strong>Under the following terms:</strong></p>
<ul>
<li><strong>Attribution</strong> — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li>
<li><strong>NonCommercial</strong> — You may not use the material for commercial purposes.</li>
<li><strong>ShareAlike</strong> — If you remix, transform, or build upon the material, you must distribute your contributions under the <strong>same license</strong> as the original.</li>
<li><strong>No additional restrictions</strong> — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li>
</ul>
<blockquote>
<p>商业目的指的是通过使用分享来的内容用于商业活动当中或用于获得经济上的补偿。<br>Commercial purposes refers to the use of shared content to be used in business or to obtain economic compensation.</p>
</blockquote>
<h1 id="CC-3-0-Unported- 完整协议"><a href="#CC-3-0-Unported- 完整协议" class="headerlink" title="CC 3.0 Unported 完整协议"></a>CC 3.0 Unported 完整协议</h1><h2 id="Language-English-1"><a href="#Language-English-1" class="headerlink" title="Language:English"></a>Language:English</h2><p><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode" target="_blank" rel="external">CC by-nc-sa 3.0 Unported Legalcode</a></p>
<h2 id="语言：中文 -1"><a href="# 语言：中文 -1" class="headerlink" title="语言：中文"></a>语言：中文 </h2><p><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/legalcode" target="_blank" rel="external"> 知识共享协议署名 - 非商业性使用 - 相同方式共享 3.0 中国大陆 许可协议</a></p>
<blockquote>
<p>请注意， <strong>CC 3.0 BY-NC-SA 中国大陆 </strong> 版本协议由于其与本博客使用的 <strong>CC 3.0 BY-NC-SA Unported</strong> 协议仅具有相同要素(BY-NC-SA) 而非同一司法管辖区（互相不适用两个地区分别的著作权保护有关的法律），<strong>故属于不同协议</strong>，但 <strong>CC 3.0 BY-NC-SA 中国大陆</strong> 版本协议可作为 <strong>CC 3.0 BY-NC-SA Unported</strong> 的翻译进行参考阅读。</p>
</blockquote>
<h1 id="您如何在不违反知识共享协议条约的基础上使用本博客的原创内容"><a href="# 您如何在不违反知识共享协议条约的基础上使用本博客的原创内容" class="headerlink" title="您如何在不违反知识共享协议条约的基础上使用本博客的原创内容"></a>您如何在不违反知识共享协议条约的基础上使用本博客的原创内容 </h1><h2 id="商业使用"><a href="# 商业使用" class="headerlink" title="商业使用"></a> 商业使用 </h2><p><strong> CC 3.0 BY-NC-SA Unported</strong> 协议规定，只要他人注明本人的姓名并在以本人的作品为基础创作的新作品上适用同一类型的许可协议，该他人就可基于非商业目的对您的作品重新编排、节选或者以本人的作品为基础进行创作。基于本人的作品创作的所有新作品都要适用同一类型的许可协议，因此适用该项协议则对任何以您的原作为基础创作的演绎作品自然同样<strong> 都不得进行商业性使用</strong>。</p>
<h2 id="署名方法"><a href="# 署名方法" class="headerlink" title="署名方法"></a>署名方法 </h2><p> 在转载本博客中任何内容时必须给出原页面的 URL 链接，并注明文章（全文，部分）从“neoFelhz’s Blog” 或转载，并提供一个与 CC 3.0 BY-NC-SA Unported 不相违背的知识共享协议的许可证；<br>如果你对本博客的原创内容进行了演绎，则必须注明演绎的内容；并提供 <strong>CC 3.0 BY-NC-SA 协议 </strong> 的<a href="https://creativecommons.org/choose/results-one?license_code=by-nc-sa&amp;jurisdiction=cn&amp;version=3.0&amp;lang=zh" target="_blank" rel="external"> 许可证</a></p>
<h2 id="演绎政策"><a href="# 演绎政策" class="headerlink" title="演绎政策"></a>演绎政策 </h2><p> 本博客属于所有在网络上公开发表的，任何人可访问的作品，故本人在这里明确声明 <strong>所有原创内容均 允许演绎</strong>。</p>
<blockquote>
<p>知识共享协议中对 <em>演绎</em> 的定义是：在不改变原作者的原创内容的含义和内涵的基础上，对原创内容进行 节选、翻译、重排版，或将原作者的原创内容作为论据和素材，或基于原作者的原创内容进行二次创作。</p>
</blockquote>
<hr>
<p>你将会在我的博客的每一篇文章结尾，看到如下所示的版权说明：</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图库]]></title>
      <url>//gallery.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[小站历史]]></title>
      <url>/history.html</url>
      <content type="html"><![CDATA[<h1 id="2016-08-15-2016-09-15"><a href="#2016-08-15-2016-09-15" class="headerlink" title="2016.08.15-2016.09.15"></a>2016.08.15-2016.09.15</h1><h2 id="2016-08"><a href="#2016-08" class="headerlink" title="2016.08"></a>2016.08</h2><ul>
<li>2016.08.15 在 moehentai.space 网站的指导下，注册了 Hostinger 的免费空间（主机在德国），在 via 浏览器作者 various 的个人博客中认识了 Typecho 程序，成功搭建成功（好运气，是不是？至少我没趟 WordPress 的坑）</li>
<li>2016.08.23 博客正式启用，域名为 neofelhz.esy.es （现在这个域名已经重定向到我的个人主页了）</li>
<li>2016.08.26 将博客的数据库从 SQLite 切换到 MySQL。同一天我启用了 Material 主题。</li>
<li>2016.08.27 由于负载占用过高，hostinger 停用了我的主机 24 小时。</li>
<li>2016.08.29 我的博客又被 hostinger 关停了 24 小时。</li>
</ul>
<h2 id="2016-09"><a href="#2016-09" class="headerlink" title="2016.09"></a>2016.09</h2><ul>
<li>2016.09.09 我将博客迁移到了 byehost 分销的 FreeCloudHost 免费主机（主机在英国）。然而我的锁并不是绿色的也不是灰色的而是红色的——主机商提供的证书已经到期。</li>
<li>2016.09.15 在蠢黑通行的推荐下选择了锐壳云作为主机商，同一天在 guozixi（让技术飞 站长）的帮助下，我申请了 Let’s 的 SSL 证书，给博客启用了 https。</li>
</ul>
<h1 id="2016-09-16- 至今"><a href="#2016-09-16- 至今" class="headerlink" title="2016.09.16- 至今"></a>2016.09.16- 至今</h1><h2 id="2016-09-1"><a href="#2016-09-1" class="headerlink" title="2016.09"></a>2016.09</h2><ul>
<li>2016.09.16 为博客开启 301 跳转实现 http2https。同一天全站图床改用七牛，实现全站图片 https。</li>
</ul>
<h2 id="2016-10"><a href="#2016-10" class="headerlink" title="2016.10"></a>2016.10</h2><ul>
<li>2016.10.02 申请了一个免费顶级域名 neofelhz.ga</li>
<li>2016.10.13 为博客开启了伪静态</li>
<li>2016.10.15 为全站启用了 HSTS</li>
<li>2016.10.31 申请把我的域名加入到 HSTS preload list。</li>
<li>2016.10.18 建立了个人主页，并把博客迁移到子域 blog 下。</li>
<li>2016.10.21 申请了免费顶级域名 neofz.ga 并绑定在我的实验室。</li>
</ul>
<h2 id="2016-11"><a href="#2016-11" class="headerlink" title="2016.11"></a>2016.11</h2><ul>
<li>2016.11.01 启用了我的资源下载站和实验室，通过 CloudFlare 反代实现 https。</li>
<li>2016.11.20 改用 AlphaSSL 泛域名 SSL 证书</li>
<li>2016.11.25 启用了 Piwik 作为网站访问统计程序</li>
<li>2016.11.28 将博客从动态博客 Typecho 迁移到静态博客 Hexo。</li>
</ul>
<h2 id="2016-12"><a href="#2016-12" class="headerlink" title="2016.12"></a>2016.12</h2><ul>
<li>2016.12.15 利用七牛实现全站 js 和 css CDN 化。</li>
<li>2016.12.22 由于在酷安分享了我的博客地址，于是博客被大量访问，PV、UV 和七牛 CDN 流量都翻了 20 倍（乍一看我还以为我的网站被攻击了）。于是逐渐将全站所有的图片类文件全部转移到图床。</li>
<li>2016.12.24 购买了现在的域名 neofelhz.space，然后把原来的网站全部绑定在新的域名下面。</li>
</ul>
<h2 id="2017-01"><a href="#2017-01" class="headerlink" title="2017.01"></a>2017.01</h2><ul>
<li>2017.01.23 由于写了一篇解析盗号木马的博客，这一天得到了将近 5000PV，以及引发了作案团伙的攻击作为报复。由于本人之前做好的负载均衡，以及主机商的应对得当，本站安稳运行度过了这一天。</li>
<li>2017.01.25 博客的评论系统从多说迁移到 Disqus</li>
<li>2017.01.29 用 MDUI 做前端制作了一个 Material Design 的个人主页。</li>
</ul>
<h2 id="2017-03"><a href="#2017-03" class="headerlink" title="2017.03"></a>2017.03</h2><ul>
<li>2017.03.08 妇女节这一天，花了 89 RMB 买了现在的域名的 <code>nfz.moe</code>，启用了新的 <code>性冷淡</code> 风格主页。</li>
<li>2017.03.09 将个人主页托管到主机壳的虚拟主机上。</li>
<li>2017.03.16 申请又拍云联盟成功，个人博客的部分静态文件从七牛转移到又拍云。</li>
</ul>
<h2 id="2017-04"><a href="#2017-04" class="headerlink" title="2017.04"></a>2017.04</h2><ul>
<li>2017.04.03 我的博客运行满 200 天</li>
</ul>
<h1 id="2017-06"><a href="#2017-06" class="headerlink" title="2017.06"></a>2017.06</h1><ul>
<li>2016.06.18 我的博客正式启用 Google Analytics 异步方案统计访问</li>
</ul>
<h1 id="2017-08"><a href="#2017-08" class="headerlink" title="2017.08"></a>2017.08</h1><ul>
<li>感谢 <a href="https://www.iwch.me" target="_blank" rel="external">Zohar</a> 大佬捐赠的 nfz.yecdn.com 已备案的子域名。目前本站用的图床接入了腾讯云 CDN 和网宿 CDN。</li>
<li><a href="planet.nfz.moe">伙伴星球 </a> 和 <a href="lab.nfz.moe"> 实验室</a> 正式启用，部署在 GitHub Pages 上。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[友情链接]]></title>
      <url>/links.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签云]]></title>
      <url>/tags.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[「时间轴」]]></title>
      <url>/timeline.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
